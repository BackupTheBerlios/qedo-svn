//
// generated by Qedo
//

#include "CCMGenerator_CPDBackEnd_compo.h"


// BEGIN USER INSERT SECTION file
#include <iostream>
#include "Exceptions.h"
#include "HelpFunctions.h"
// END USER INSERT SECTION file


namespace CCMGenerator {


// BEGIN USER INSERT SECTION CPDBackendSessionImpl
void CPDBackendSessionImpl::connect_the_whole_repository ()
{
	
	M2C::MOFRepository::RepositoryRoot_var repository_root = 
		M2C::MOFRepository::RepositoryRoot::_narrow ( _root );

	if( CORBA::is_nil ( repository_root ) )
	{
		std::cerr << "I got a nil reference for the repository root reference" << std::endl;
		exit (1);
	}
	::Reflective::RefPackageSet* package_set = repository_root -> get_root_packages();
	_repconnector.set_package_set (package_set); 
	_repconnector.connectRepository();
	_base_idl_pkg_ref =		_repconnector._base_idl_pkg_ref;
	_cif_ref  =				_repconnector._cif_ref;
	_component_idl_ref =	_repconnector._component_idl_ref ;
	_deployment_ref =		_repconnector._deployment_ref;
}

void CPDBackendSessionImpl::begin ( ostream& out )
{
	out << "<?xml version=\"1.0\" ?>";
	HelpFunctions::new_line ( out, 0 );
	out << "<!DOCTYPE properties PUBLIC \"-//OMG//DTD Property File Descriptor\" \"properties.dtd\">";
	HelpFunctions::new_line ( out, 0 );
}
void CPDBackendSessionImpl::_generte_property_element
		( MDE::Deployment::Property_ptr property, ostream& out, unsigned long & indent_level )
{
	std::string name_ = property->identifier();

	if ( property->el_name() == MDE::Deployment::SIMPLE_EL )
	{
		out << "<simple name=\"" << name_.erase( 0, _name.length()+1 ) << "\" type=\"" << property->type() << "\">";
		HelpFunctions::inc_indent_level( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<value>" << property->value() << "</value>";
		HelpFunctions::dec_indent_level( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</simple>";
		HelpFunctions::new_line ( out, indent_level );
	}

	if ( property->el_name() == MDE::Deployment::SEQUENCE_EL )
	{
		out << "<sequence name=\"" << name_.erase( 0, _name.length()+1 ) << "\" type=\"" << property->type() << "\">";
		HelpFunctions::inc_indent_level( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<value>" << property->value() << "</value>";
		HelpFunctions::dec_indent_level( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</sequence>";
		HelpFunctions::new_line ( out, indent_level );
	}

	if ( property->el_name() == MDE::Deployment::STRUCT_EL )
	{
		out << "<struct name=\"" << name_.erase( 0, _name.length()+1 ) << "\" type=\"" << property->type() << "\">";
		HelpFunctions::inc_indent_level( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<value>" << property->value() << "</value>";
		HelpFunctions::dec_indent_level( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</struct>";
		HelpFunctions::new_line ( out, indent_level );
	}

	if ( property->el_name() == MDE::Deployment::VALUETYPE_EL )
	{
		out << "<valuetype name=\"" << name_.erase( 0, _name.length()+1 ) << "\" type=\"" << property->type() << "\">";
		HelpFunctions::inc_indent_level( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<value>" << property->value() << "</value>";
		HelpFunctions::dec_indent_level( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</valuetype>";
		HelpFunctions::new_line ( out, indent_level );
	}
}
// END USER INSERT SECTION CPDBackendSessionImpl


CPDBackendSessionImpl::CPDBackendSessionImpl()
{
// BEGIN USER INSERT SECTION CPDBackendSessionImpl::CPDBackendSessionImpl
// END USER INSERT SECTION CPDBackendSessionImpl::CPDBackendSessionImpl
}


CPDBackendSessionImpl::~CPDBackendSessionImpl()
{
// BEGIN USER INSERT SECTION CPDBackendSessionImpl::~CPDBackendSessionImpl
// END USER INSERT SECTION CPDBackendSessionImpl::~CPDBackendSessionImpl

}


void
CPDBackendSessionImpl::set_context(::CCMGenerator::CCM_CPDBackend_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::CCMGenerator::CCM_CPDBackend_ContextImpl::_duplicate(context);
}


void
CPDBackendSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION CPDBackendSessionImpl::configuration_complete
// END USER INSERT SECTION CPDBackendSessionImpl::configuration_complete
}


void
CPDBackendSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION CPDBackendSessionImpl::remove
// END USER INSERT SECTION CPDBackendSessionImpl::remove
}


void
CPDBackendSessionImpl::rep_ref(CORBA::Object_ptr param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION CPDBackendSessionImpl::_rep_ref
	_root = CORBA::Object::_duplicate(param);
	if( CORBA::is_nil ( _root ) ) 
	{
		throw NilObjectRef ( "Repository root is NIL: narrow problem!" );
	}
// END USER INSERT SECTION CPDBackendSessionImpl::_rep_ref
}


CORBA::Object_ptr
CPDBackendSessionImpl::rep_ref()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION CPDBackendSessionImpl::rep_ref
	return _root._retn();
// END USER INSERT SECTION CPDBackendSessionImpl::rep_ref
}


void
CPDBackendSessionImpl::generate(const char* target, const char* output)
	throw(CORBA::SystemException, ::CCMGenerator::OutputError)
{
// BEGIN USER INSERT SECTION CPDBackendSessionImpl::generate
	try{

		this->connect_the_whole_repository ();

		ofstream out;
		out.open ( output );
		unsigned long indent_level = 0;
		begin(out);

		MDE::Deployment::ComponentInstantiationSet_var all_comp_instancies_= 
			_repconnector._component_instantiation_ref->all_of_class_component_instantiation();

		MDE::Deployment::ComponentInstantiation_var comp_instance_;
		MDE::Deployment::HomeInstantiation_var home_instance_;
		MDE::Deployment::DeploymentUnit_var unit_;
		std::string id_;
		//std::string element_;
		bool b_ = false;
		for (CORBA::ULong i = 0; i < all_comp_instancies_->length (); i++)
		{
			id_ = all_comp_instancies_[i]->repository_id();
			if ( ! strcmp (id_.c_str(), target) )
			{
				comp_instance_ = all_comp_instancies_[i];
				b_ = true;
				//element_ = "comp_instance";
				break;
			}
		}
		if ( ! b_ )
		{
			MDE::Deployment::HomeInstantiationSet_var all_home_instancies_ = 
				_repconnector._home_instantiation_ref -> all_of_class_home_instantiation();
			for (CORBA::ULong i = 0; i < all_home_instancies_->length (); i++)
			{
				id_ = all_home_instancies_[i]->repository_id();
				if ( ! strcmp (id_.c_str(), target) )
				{
					home_instance_ = all_home_instancies_[i];
					b_ = true;
					//element_ = "home_instance";
					break;
				}
			}
		}
		if ( ! b_ )
		{
			MDE::Deployment::DeploymentUnitSet_var  all_deployment_units_ = 
				_repconnector._deployment_unit_ref -> all_of_class_deployment_unit();
			for (CORBA::ULong i = 0; i < all_deployment_units_->length (); i++)
			{
				id_ = all_deployment_units_[i]->repository_id();
				if ( ! strcmp (id_.c_str(), target) )
				{
					unit_ = all_deployment_units_[i];
					b_ = true;
					//element_ = "unit";
					break;
				}
			}
		}
		if ( ! b_ && CORBA::is_nil (comp_instance_) && CORBA::is_nil (home_instance_) && CORBA::is_nil (unit_) )
			throw NilObjectRef ( "Element for CPD generating wasn't found!!!" );

		MDE::Deployment::PropertySet_var property_set_;
		MDE::Deployment::PropertySet_var config_property_set_;
		MDE::Deployment::Property_var property_;
		if ( ! CORBA::is_nil (comp_instance_) )
		{
			_name = comp_instance_->identifier();
			property_set_ = comp_instance_->prop();
			config_property_set_ = comp_instance_->conf_prop();
		}
		else
			if ( ! CORBA::is_nil (home_instance_) )
			{
				property_set_ = home_instance_->prop();
				_name = home_instance_->identifier();
			}
			else
			{
				property_set_ = unit_->prop();
				_name = unit_->identifier();
			}

		HelpFunctions::new_line ( out, indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<properties>" ;
		HelpFunctions::inc_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		for (CORBA::ULong i = 0; i < property_set_->length (); i++)
		{
			property_ = property_set_[i];
			HelpFunctions::new_line ( out, indent_level );
			this->_generte_property_element ( property_,  out, indent_level );
		}
		if ( config_property_set_->length () > 0 )
		{
			HelpFunctions::new_line ( out, indent_level );
			out << "<configuration>" ;
			HelpFunctions::inc_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			for ( i = 0; i < config_property_set_->length (); i++)
			{
				property_ = config_property_set_[i];
				HelpFunctions::new_line ( out, indent_level );
				this->_generte_property_element ( property_,  out, indent_level );
			}
			HelpFunctions::dec_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			out << "</configuration>" ;
			HelpFunctions::new_line ( out, indent_level );
		}
		HelpFunctions::dec_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</properties>" ;
		out.close();
	}
	catch (CORBA::SystemException& e)
	{
		throw e;
	}
// END USER INSERT SECTION CPDBackendSessionImpl::generate
}


// BEGIN USER INSERT SECTION CPDBackEnd_compo
// END USER INSERT SECTION CPDBackEnd_compo


CPDBackEnd_compo::CPDBackEnd_compo()
:component_(new CPDBackendSessionImpl())
{
// BEGIN USER INSERT SECTION CPDBackEnd_compo::CPDBackEnd_compo
// END USER INSERT SECTION CPDBackEnd_compo::CPDBackEnd_compo
}


CPDBackEnd_compo::~CPDBackEnd_compo()
{
// BEGIN USER INSERT SECTION CPDBackEnd_compo::~CPDBackEnd_compo
// END USER INSERT SECTION CPDBackEnd_compo::~CPDBackEnd_compo

    component_->_remove_ref();
}


::CORBA::Object*
CPDBackEnd_compo::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "control")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
CPDBackEnd_compo::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
CPDBackEnd_compo::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION CPDBackEnd_compo::configuration_complete
// END USER INSERT SECTION CPDBackEnd_compo::configuration_complete
}


void
CPDBackEnd_compo::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::CCMGenerator::CCM_CPDBackend_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::CCMGenerator::CCM_CPDBackend_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::CCMGenerator::CCM_CPDBackend_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::CCMGenerator::CCM_CPDBackend_ContextImpl::_nil();
        
    #else
    context_ = ::CCMGenerator::CCM_CPDBackend_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
CPDBackEnd_compo::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION CPDBackEnd_compo::ccm_activate
// END USER INSERT SECTION CPDBackEnd_compo::ccm_activate
}


void
CPDBackEnd_compo::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION CPDBackEnd_compo::ccm_passivate
// END USER INSERT SECTION CPDBackEnd_compo::ccm_passivate
}


void
CPDBackEnd_compo::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION CPDBackEnd_compo::ccm_remove
// END USER INSERT SECTION CPDBackEnd_compo::ccm_remove
}


// BEGIN USER INSERT SECTION CPDBackendHomeImpl
// END USER INSERT SECTION CPDBackendHomeImpl


CPDBackendHomeImpl::CPDBackendHomeImpl()
{
// BEGIN USER INSERT SECTION CPDBackendHomeImpl::CPDBackendHomeImpl
// END USER INSERT SECTION CPDBackendHomeImpl::CPDBackendHomeImpl
}


CPDBackendHomeImpl::~CPDBackendHomeImpl()
{
// BEGIN USER INSERT SECTION CPDBackendHomeImpl::~CPDBackendHomeImpl
// END USER INSERT SECTION CPDBackendHomeImpl::~CPDBackendHomeImpl

}


void
CPDBackendHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
CPDBackendHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION CPDBackendHomeImpl::create
// END USER INSERT SECTION CPDBackendHomeImpl::create
    return new CPDBackEnd_compo();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_CPDBackendHomeE(void)
{
// BEGIN USER INSERT SECTION create_CPDBackendHome
// END USER INSERT SECTION create_CPDBackendHome

    return new ::CCMGenerator::CPDBackendHomeImpl();
}

