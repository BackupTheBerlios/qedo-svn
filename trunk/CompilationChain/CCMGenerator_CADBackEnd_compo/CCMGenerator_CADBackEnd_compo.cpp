//
// generated by Qedo
//

#include "CCMGenerator_CADBackEnd_compo.h"


// BEGIN USER INSERT SECTION file
#include <iostream>
#include "Exceptions.h"
#include "HelpFunctions.h"
// END USER INSERT SECTION file


namespace CCMGenerator {


// BEGIN USER INSERT SECTION CADBackendSessionImpl

void CADBackendSessionImpl::connect_the_whole_repository ()
{
	M2C::MOFRepository::RepositoryRoot_var repository_root = 
		M2C::MOFRepository::RepositoryRoot::_narrow ( _root );

	if( CORBA::is_nil ( repository_root ) )
	{
		std::cerr << "I got a nil reference for the repository root reference" << std::endl;
		exit (1);
	}
	::Reflective::RefPackageSet* package_set = repository_root -> get_root_packages();
	_repconnector.set_package_set (package_set); 
	_repconnector.connectRepository();
	_base_idl_pkg_ref =		_repconnector._base_idl_pkg_ref;
	_cif_ref  =				_repconnector._cif_ref;
	_component_idl_ref =	_repconnector._component_idl_ref ;
	_deployment_ref =		_repconnector._deployment_ref;
}

void CADBackendSessionImpl::begin ( ostream& out )
{
	out << "<?xml version = '1.0' ?>";
	HelpFunctions::new_line ( out, 0 );
	out << "<!DOCTYPE componentassembly SYSTEM \"componentassembly.dtd\">";
	HelpFunctions::new_line ( out, 0 );
}
void CADBackendSessionImpl::_generate_componentfile_element ( MDE::Deployment::DeploymentUnit_ptr unit, ostream& out, unsigned long & indent_level )
{
	std::string unit_name_ = unit->identifier();
	unit_name_.append ("_file");
	out << "<componentfile id=\"" << unit_name_  << "\">";
	HelpFunctions::inc_indent_level ( indent_level );
	HelpFunctions::new_line ( out, indent_level );
	out << "<fileinarchive name=\" \">";
	HelpFunctions::inc_indent_level ( indent_level );
	HelpFunctions::new_line ( out, indent_level );
	out << "<link href=\" \" xml:link=\"SIMPLE\"/>";
	HelpFunctions::dec_indent_level ( indent_level );
	HelpFunctions::new_line ( out, indent_level );
	out << "</fileinarchive>";
	HelpFunctions::dec_indent_level ( indent_level );
	HelpFunctions::new_line ( out, indent_level );
	out << "</componentfile>";
}
void CADBackendSessionImpl::_generate_partitioning_element ( MDE::Deployment::ProcessCollocation_ptr part, ostream& out, unsigned long & indent_level )
{
	MDE::Deployment::HomeInstantiationSet_var homeplacements_ = part->thehome();
	if ( homeplacements_->length () > 0)
		for (CORBA::ULong i = 0; i < homeplacements_->length (); i++)
		{
			this->_generate_homeplacement_element ( homeplacements_[i], out, indent_level );
		}
}
void CADBackendSessionImpl::_generate_connection_element ( MDE::Deployment::Connection_ptr conn, ostream& out, unsigned long & indent_level )
{
	MDE::Deployment::ConnectionEnd_var target_end_ = conn->target_end();
	MDE::Deployment::ConnectionEnd_var source_end_ = conn->source_end();
	if ( target_end_->kind() == MDE::Deployment::COMPONENTINTERFACE )
		out << "<connectinterface>";
	if ( target_end_->kind() == MDE::Deployment::EVENTPORT )
		out << "<connectevent>";
	HelpFunctions::inc_indent_level ( indent_level );
	HelpFunctions::new_line ( out, indent_level );
	this->_generate_target_end_element ( target_end_, out, indent_level );
	HelpFunctions::new_line ( out, indent_level );
	this->_generate_source_end_element ( source_end_, out, indent_level );
	HelpFunctions::dec_indent_level ( indent_level );
	HelpFunctions::new_line ( out, indent_level );
	if ( target_end_->kind() == MDE::Deployment::COMPONENTINTERFACE )
		out << "</connectinterface>";
	if ( target_end_->kind() == MDE::Deployment::EVENTPORT )
		out << "</connectevent>";
	HelpFunctions::new_line ( out, indent_level );
}
void CADBackendSessionImpl::_generate_target_end_element 
	( MDE::Deployment::ConnectionEnd_ptr conn, ostream& out, unsigned long & indent_level )
{
	MDE::ComponentIDL::EventPortDef_var event_ = MDE::ComponentIDL::EventPortDef::_narrow ( conn->thefeature() );
	MDE::ComponentIDL::ConsumesDef_var consumes_ = MDE::ComponentIDL::ConsumesDef::_narrow ( conn->thefeature() );
	MDE::ComponentIDL::UsesDef_var uses_ = MDE::ComponentIDL::UsesDef::_narrow ( conn->thefeature() );
	if ( CORBA::is_nil ( event_ ) )
		if( ! CORBA::is_nil ( uses_ ) ) 
		{
			out << "<usesport>";
			HelpFunctions::inc_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			out << "<usesidentifier>" << uses_->identifier() << "</usesidentifier>";
			HelpFunctions::new_line ( out, indent_level );
			out << "<componentinstantiationref idref=\"" << conn->int_comp_inst()->identifier() << "\"/>";
			HelpFunctions::dec_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			out << "</usesport>";
			return;
		} 
	if( ! CORBA::is_nil ( consumes_ ) ) 
	{
		out << "<consumesport>";
		HelpFunctions::inc_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<consumesidentifier>" << consumes_->identifier() << "</consumesidentifier>";
		HelpFunctions::new_line ( out, indent_level );
		out << "<componentinstantiationref idref=\"" << conn->int_comp_inst()->identifier() << "\"/>";
		HelpFunctions::dec_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</consumesport>";
		return;
	}	
}
void CADBackendSessionImpl::_generate_source_end_element 
	( MDE::Deployment::ConnectionEnd_ptr conn, ostream& out, unsigned long & indent_level )
{
	MDE::ComponentIDL::EventPortDef_var event_ = MDE::ComponentIDL::EventPortDef::_narrow ( conn->thefeature() );
	MDE::ComponentIDL::ProvidesDef_var provides_ = MDE::ComponentIDL::ProvidesDef::_narrow ( conn->thefeature() );
	MDE::ComponentIDL::PublishesDef_var publishes_ = MDE::ComponentIDL::PublishesDef::_narrow ( conn->thefeature() );
	MDE::ComponentIDL::EmitsDef_var emits_ = MDE::ComponentIDL::EmitsDef::_narrow ( conn->thefeature());
	if ( CORBA::is_nil ( event_ ) )
		if( ! CORBA::is_nil ( provides_ ) ) 
		{
			out << "<providesport>";
			HelpFunctions::inc_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			out << "<providesidentifier>" << provides_->identifier() << "</providesidentifier>";
			HelpFunctions::new_line ( out, indent_level );
			out << "<componentinstantiationref idref=\"" << conn->int_comp_inst()->identifier() << "\"/>";
			HelpFunctions::dec_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			out << "</providesport>";
			return;
		}
	if( ! CORBA::is_nil ( emits_ ) ) 
	{
		out << "<emitsport>";
		HelpFunctions::inc_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<emitsidentifier>" << emits_->identifier() << "</emitsidentifier>";
		HelpFunctions::new_line ( out, indent_level );
		out << "<componentinstantiationref idref=\"" << conn->int_comp_inst()->identifier() << "\"/>";
		HelpFunctions::dec_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</emitsport>";
		return;
	}
	if( ! CORBA::is_nil ( publishes_ ) ) 
	{
		out << "<publishesport>";
		HelpFunctions::inc_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<publishesidentifier>" << publishes_->identifier() << "</publishesidentifier>";
		HelpFunctions::new_line ( out, indent_level );
		out << "<componentinstantiationref idref=\"" << conn->int_comp_inst()->identifier() << "\"/>";
		HelpFunctions::dec_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</publishesport>";
		return;
	}	
}
void CADBackendSessionImpl::_generate_homeplacement_element 
	( MDE::Deployment::HomeInstantiation_ptr home_inst, ostream& out, unsigned long & indent_level )
{
	out << "<homeplacement id=\"" << home_inst->identifier()  << "\">";
	HelpFunctions::inc_indent_level ( indent_level );
	HelpFunctions::new_line ( out, indent_level );
	MDE::Deployment::DeploymentUnit_var unit_ = home_inst->unit();
	std::string ref_ = unit_->identifier();
	ref_.append("_file");
	out << "<componentfileref idref=\"" << ref_ << "\"/>";
	HelpFunctions::new_line ( out, indent_level );
	out << "<componentimplref idref=\"" << unit_->uuid() << "\"/>";
	
	MDE::Deployment::ComponentInstantiationSet_var comp_instancies_ = home_inst->comp();
	if ( comp_instancies_->length () > 0)
		for (CORBA::ULong i = 0; i < comp_instancies_->length (); i++)
		{
			HelpFunctions::new_line ( out, indent_level );
			this->_generate_comp_instantiation_element ( comp_instancies_[i], out, indent_level );
			_comp_inst_count++;
			this->add_comp_instance( comp_instancies_[i] );
		}
	HelpFunctions::dec_indent_level ( indent_level );
	HelpFunctions::new_line ( out, indent_level );
	out << "</homeplacement>";
	HelpFunctions::new_line ( out, indent_level );

}
void CADBackendSessionImpl::_generate_comp_instantiation_element 
	( MDE::Deployment::ComponentInstantiation_ptr comp_inst, ostream& out, unsigned long & indent_level )
{
	MDE::Deployment::PropertySet_var properties_ = comp_inst->prop();
	MDE::Deployment::RegisterComponentInstanceSet_var registers_ = comp_inst->registration();
	if ( properties_->length () > 0 && registers_->length () == 0 )
	{
		out << "<componentinstantiation id=\"" << comp_inst->identifier() << "\">";
		std::string ref_ = comp_inst->identifier();
		ref_.append(".cpf");
		HelpFunctions::inc_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<componentproperties>";
		HelpFunctions::inc_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<fileinarchive name=\"" << ref_ << "\"/>";
		HelpFunctions::dec_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</componentproperties>";
		HelpFunctions::dec_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</componentinstantiation>";
	}
	
	else if ( properties_->length () > 0 && registers_->length () > 0 )
	{
		out << "<componentinstantiation id=\"" << comp_inst->identifier() << "\">";
		std::string ref_ = comp_inst->identifier();
		ref_.append(".cpf");
		HelpFunctions::inc_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<componentproperties>";
		HelpFunctions::inc_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<fileinarchive name=\"" << ref_ << "\"/>";
		HelpFunctions::dec_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</componentproperties>";

		for (CORBA::ULong i = 0; i < registers_->length (); i++)
		{
			HelpFunctions::new_line ( out, indent_level );
			out << "<registercomponent>";
			HelpFunctions::inc_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			this->_generate_registerwith_element( registers_[i],out, indent_level );
			HelpFunctions::dec_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			out << "</registercomponent>";
		}
		HelpFunctions::dec_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</componentinstantiation>";
	}
	else if ( properties_->length () == 0 && registers_->length () > 0 )
	{
		out << "<componentinstantiation id=\"" << comp_inst->identifier() << "\">";
		HelpFunctions::inc_indent_level ( indent_level );
		for (CORBA::ULong i = 0; i < registers_->length (); i++)
		{
			HelpFunctions::new_line ( out, indent_level );
			out << "<registercomponent>";
			HelpFunctions::inc_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			this->_generate_registerwith_element( registers_[i],out, indent_level );
			HelpFunctions::dec_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			out << "</registercomponent>";
		}
		HelpFunctions::dec_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</componentinstantiation>";
	}
	else 
		out << "<componentinstantiation id=\"" << comp_inst->identifier() << "\"/>";	
}
void CADBackendSessionImpl::_generate_registerwith_element 
	( MDE::Deployment::RegisterComponentInstance_ptr reg, ostream& out, unsigned long & indent_level )
{
	MDE::Deployment::FinderServiceKind service_ = reg->service();
	std::string regname_ = reg->regname();
	std::string full_str_ = "<registerwith";
	if ( service_ == MDE::Deployment::NAMING )
		full_str_.append("naming");
	if ( service_ == MDE::Deployment::HOMEFINDER )
		full_str_.append("homefinder");
	if ( service_ == MDE::Deployment::TRADING )
		full_str_.append("trading");
	full_str_.append( " name=\"" );
	full_str_.append(regname_);
	
	out << full_str_  << "\"/>";
}
void CADBackendSessionImpl::_generate_ordered_element ( MDE::Deployment::ComponentInstantiation_ptr comp, ostream& out, unsigned long & indent_level )
{
	out << "<extension class=\"startorder\" origin=\"HU\">";
	out << comp->identifier();
	out << "</extension>";
}
void CADBackendSessionImpl::add_ordered_comp_instance ( MDE::Deployment::ComponentInstantiation_var comp )
{
	//MDE::BaseIDL::InterfaceDefSet* temp = new MDE::BaseIDL::InterfaceDefSet;
	_ordered_comps->length ( _ordered_comps->length () + 1);
	_ordered_comps [ _ordered_comps->length () - 1 ] = comp;
}
void CADBackendSessionImpl::add_comp_instance ( MDE::Deployment::ComponentInstantiation_var comp )
{
	//MDE::BaseIDL::InterfaceDefSet* temp = new MDE::BaseIDL::InterfaceDefSet;
	_all_comps->length ( _all_comps->length () + 1);
	_all_comps [ _all_comps->length () - 1 ] = comp;
}
MDE::Deployment::ComponentInstantiation_var CADBackendSessionImpl::get_comp_inst_ordered ( unsigned long order)
{
	for ( CORBA::ULong i = 0; i < _all_comps->length (); i++)
	{
		if ( _all_comps[i]->startorder() == order )
			return _all_comps[i];
	}
	return 0;
}
bool CADBackendSessionImpl::is_deployment_unit_correct 
( MDE::Deployment::HomeInstantiationSet* homes , MDE::Deployment::DeploymentUnit_ptr unit )
{
	MDE::Deployment::DeploymentUnit_var unit_;
	for ( CORBA::ULong i = 0; i < homes->length (); i++)
	{
		unit_ = (*homes)[i]->unit();
		if ( ! strcmp ( unit_->uuid(), unit->uuid() ) )
			return true;
	}
	return false;
}
// END USER INSERT SECTION CADBackendSessionImpl


CADBackendSessionImpl::CADBackendSessionImpl()
{
// BEGIN USER INSERT SECTION CADBackendSessionImpl::CADBackendSessionImpl
	_ordered_comps = new MDE::Deployment::ComponentInstantiationSet;
	_ordered_comps->length(0);
	_all_comps = new MDE::Deployment::ComponentInstantiationSet;
	_all_comps->length(0);
	_comp_inst_count = 0;
// END USER INSERT SECTION CADBackendSessionImpl::CADBackendSessionImpl
}


CADBackendSessionImpl::~CADBackendSessionImpl()
{
// BEGIN USER INSERT SECTION CADBackendSessionImpl::~CADBackendSessionImpl
// END USER INSERT SECTION CADBackendSessionImpl::~CADBackendSessionImpl

}


void
CADBackendSessionImpl::set_context(::CCMGenerator::CCM_CADBackend_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::CCMGenerator::CCM_CADBackend_ContextImpl::_duplicate(context);
}


void
CADBackendSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION CADBackendSessionImpl::configuration_complete
	cout << "configuration_complete() by CADBackEnd was called!!! " <<  endl;
// END USER INSERT SECTION CADBackendSessionImpl::configuration_complete
}


void
CADBackendSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION CADBackendSessionImpl::remove
// END USER INSERT SECTION CADBackendSessionImpl::remove
}


void
CADBackendSessionImpl::rep_ref(CORBA::Object_ptr param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION CADBackendSessionImpl::_rep_ref

	_root = CORBA::Object::_duplicate(param);
	if( CORBA::is_nil ( _root ) ) 
	{
		throw NilObjectRef ( "Repository root is NIL: narrow problem!" );
	}

// END USER INSERT SECTION CADBackendSessionImpl::_rep_ref
}


CORBA::Object_ptr
CADBackendSessionImpl::rep_ref()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION CADBackendSessionImpl::rep_ref
	return _root._retn();
// END USER INSERT SECTION CADBackendSessionImpl::rep_ref
}


void
CADBackendSessionImpl::generate(const char* target, const char* output)
	throw(CORBA::SystemException, ::CCMGenerator::OutputError)
{
// BEGIN USER INSERT SECTION CADBackendSessionImpl::generate
	try{

		this->connect_the_whole_repository ();

		MDE::Deployment::AssemblySet_var all_assemblies_= 
			_repconnector._assembly_ref->all_of_class_assembly();
		int all_ = all_assemblies_->length ();
		MDE::Deployment::Assembly_var assembly_;
		std::string assembly_rep_id_;
		CORBA::ULong i;
		for (i = 0; i < all_assemblies_->length (); i++)
		{
			assembly_rep_id_ = all_assemblies_[i]->repository_id();
			if ( ! strcmp (assembly_rep_id_.c_str(), target) )
			{
				assembly_ = all_assemblies_[i];
				break;
			}
		}
		ofstream out;
		out.open ( output );
		unsigned long indent_level = 0;
		begin(out);
		HelpFunctions::new_line ( out, indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<componentassembly id=\"" << assembly_->identifier() << "\">";
		HelpFunctions::inc_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "<description> </description>";
		HelpFunctions::new_line ( out, indent_level );	

		MDE::Deployment::Configuration_var config_ = assembly_->config();
		MDE::Deployment::ProcessCollocationSet_var all_collocations_ = config_->coloc();
		MDE::Deployment::DeploymentUnitSet_var depl_set_ = assembly_->impl();
		if ( depl_set_->length () > 0 )
		{
			out << "<componentfiles>";	
			HelpFunctions::inc_indent_level ( indent_level );
			for ( i = 0; i < depl_set_->length (); i++)
			{
				//
				CORBA::ULong number_ = 1;
				if ( all_collocations_->length () == number_ )
				{
					MDE::Deployment::ProcessCollocation_var colloc_ = all_collocations_[number_-1];
					//MDE::Deployment::HomeInstantiationSet_var all_homes_ = colloc_->thehome();
					if ( is_deployment_unit_correct ( colloc_->thehome(), depl_set_[i] ) )
					{
						HelpFunctions::new_line ( out, indent_level );
						this->_generate_componentfile_element ( depl_set_[i], out, indent_level );
					}
				}//
			}
			HelpFunctions::dec_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			out << "</componentfiles>";
		}
		
		if ( all_collocations_->length () > 0 )
		{
			HelpFunctions::new_line ( out, indent_level );
			out << "<partitioning>";	
			HelpFunctions::inc_indent_level ( indent_level );
			for (i = 0; i < all_collocations_->length (); i++)
			{
				HelpFunctions::new_line ( out, indent_level );
				this->_generate_partitioning_element ( all_collocations_[i], out, indent_level );
			}
			HelpFunctions::dec_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			out << "</partitioning>";
		}
		MDE::Deployment::ConnectionSet_var all_connections_ = config_->conn();
		HelpFunctions::new_line ( out, indent_level );
		if ( all_connections_->length () > 0 )
		{
			HelpFunctions::new_line ( out, indent_level );
			out << "<connections>";	
			HelpFunctions::inc_indent_level ( indent_level );
			for (i = 0; i < all_connections_->length (); i++)
			{
				HelpFunctions::new_line ( out, indent_level );
				this->_generate_connection_element ( all_connections_[i], out, indent_level );
			}
			HelpFunctions::dec_indent_level ( indent_level );
			HelpFunctions::new_line ( out, indent_level );
			out << "</connections>";
			HelpFunctions::new_line ( out, indent_level );
		}
		// to do: startorder
		if ( _all_comps->length () > 0 )
		{
			MDE::Deployment::ComponentInstantiation_var comp_inst_ordered_;
			for (i = 0; i < _all_comps->length (); i++)
			{
				comp_inst_ordered_ = this->get_comp_inst_ordered( i+1 );
				if ( ! CORBA::is_nil ( comp_inst_ordered_ ) && ( (i+1) <= _comp_inst_count) )
				{
					this->add_ordered_comp_instance( comp_inst_ordered_ );
				}
				if ( CORBA::is_nil ( comp_inst_ordered_ ) && ( (i+1) == 1) )
					break;
				if ( CORBA::is_nil ( comp_inst_ordered_ ) && ( (i+1) != 1) )
				{}
			}
		}
		if ( _ordered_comps->length() > 0 )
			for (i = 0; i < _ordered_comps->length (); i++)
			{
				HelpFunctions::new_line ( out, indent_level );
				_generate_ordered_element( _ordered_comps[i], out, indent_level );
			}
		HelpFunctions::dec_indent_level ( indent_level );
		HelpFunctions::new_line ( out, indent_level );
		out << "</componentassembly>" ;
		out.close();
	}
	catch (CORBA::SystemException& e)
	{
		throw e;
	}
// END USER INSERT SECTION CADBackendSessionImpl::generate
}


// BEGIN USER INSERT SECTION CADBackEnd_compo
// END USER INSERT SECTION CADBackEnd_compo


CADBackEnd_compo::CADBackEnd_compo()
:component_(new CADBackendSessionImpl())
{
// BEGIN USER INSERT SECTION CADBackEnd_compo::CADBackEnd_compo
// END USER INSERT SECTION CADBackEnd_compo::CADBackEnd_compo
}


CADBackEnd_compo::~CADBackEnd_compo()
{
// BEGIN USER INSERT SECTION CADBackEnd_compo::~CADBackEnd_compo
// END USER INSERT SECTION CADBackEnd_compo::~CADBackEnd_compo

    component_->_remove_ref();
}


::CORBA::Object*
CADBackEnd_compo::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "control")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
CADBackEnd_compo::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
CADBackEnd_compo::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION CADBackEnd_compo::configuration_complete
// END USER INSERT SECTION CADBackEnd_compo::configuration_complete
}


void
CADBackEnd_compo::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::CCMGenerator::CCM_CADBackend_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::CCMGenerator::CCM_CADBackend_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::CCMGenerator::CCM_CADBackend_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::CCMGenerator::CCM_CADBackend_ContextImpl::_nil();
        
    #else
    context_ = ::CCMGenerator::CCM_CADBackend_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
CADBackEnd_compo::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION CADBackEnd_compo::ccm_activate
// END USER INSERT SECTION CADBackEnd_compo::ccm_activate
}


void
CADBackEnd_compo::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION CADBackEnd_compo::ccm_passivate
// END USER INSERT SECTION CADBackEnd_compo::ccm_passivate
}


void
CADBackEnd_compo::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION CADBackEnd_compo::ccm_remove
// END USER INSERT SECTION CADBackEnd_compo::ccm_remove
}


// BEGIN USER INSERT SECTION CADBackendHomeImpl
// END USER INSERT SECTION CADBackendHomeImpl


CADBackendHomeImpl::CADBackendHomeImpl()
{
// BEGIN USER INSERT SECTION CADBackendHomeImpl::CADBackendHomeImpl
// END USER INSERT SECTION CADBackendHomeImpl::CADBackendHomeImpl
}


CADBackendHomeImpl::~CADBackendHomeImpl()
{
// BEGIN USER INSERT SECTION CADBackendHomeImpl::~CADBackendHomeImpl
// END USER INSERT SECTION CADBackendHomeImpl::~CADBackendHomeImpl

}


void
CADBackendHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
CADBackendHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION CADBackendHomeImpl::create
// END USER INSERT SECTION CADBackendHomeImpl::create
    return new CADBackEnd_compo();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_CADBackendHomeE(void)
{
// BEGIN USER INSERT SECTION create_CADBackendHome
// END USER INSERT SECTION create_CADBackendHome

    return new ::CCMGenerator::CADBackendHomeImpl();
}

