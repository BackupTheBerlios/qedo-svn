//
// generated by Qedo
//

#ifndef _DCI_Basics_NodeManagerImpl_H_
#define _DCI_Basics_NodeManagerImpl_H_


// BEGIN USER INSERT SECTION file_pre
// END USER INSERT SECTION file_pre


#include <CORBA.h>
#include "DCI_Basics_NodeManagerImpl_BUSINESS.h"
#include <string>


// BEGIN USER INSERT SECTION file_post
#include "PropertiesRepository.h"
#include <CosNaming.h>
// END USER INSERT SECTION file_post


namespace DCI_Basics
{
    
    //
    // executor
    //
    class NodeManagerSessionImpl
        : public virtual CORBA::LocalObject
        , public virtual ::DCI_Basics::CCM_NodeManagerSessionImpl
// BEGIN USER INSERT SECTION INHERITANCE_NodeManagerSessionImpl
// END USER INSERT SECTION INHERITANCE_NodeManagerSessionImpl
    {
    
    private:
    
        ::DCI_Basics::CCM_NodeManager_Context_var context_;
        
    public:
    
        NodeManagerSessionImpl();
        ~NodeManagerSessionImpl();
        
        void set_context(::DCI_Basics::CCM_NodeManager_Context_ptr context)
            throw (CORBA::SystemException, Components::CCMException);
        
        void configuration_complete()
            throw (CORBA::SystemException, Components::InvalidConfiguration);
        
        void remove()
            throw (CORBA::SystemException);
        
        
        //
        // IDL:Components/Deployment/ComponentInstallation/install:1.0
        //
        virtual void install(const char* implUUID, const char* component_loc)
        	throw(CORBA::SystemException, ::Components::Deployment::InvalidLocation, ::Components::Deployment::InstallationFailure);
        
        //
        // IDL:Components/Deployment/ComponentInstallation/replace:1.0
        //
        virtual void replace(const char* implUUID, const char* component_loc)
        	throw(CORBA::SystemException, ::Components::Deployment::InvalidLocation, ::Components::Deployment::InstallationFailure);
        
        //
        // IDL:Components/Deployment/ComponentInstallation/remove:1.0
        //
        virtual void remove(const char* implUUID)
        	throw(CORBA::SystemException, ::Components::Deployment::UnknownImplId, ::Components::RemoveFailure);
        
        //
        // IDL:Components/Deployment/ComponentInstallation/get_implementation:1.0
        //
        virtual char* get_implementation(const char* implUUID)
        	throw(CORBA::SystemException, ::Components::Deployment::UnknownImplId, ::Components::Deployment::InstallationFailure);
        
        //
        // IDL:DCI_Basics/ExtComponentInstallation/upload:1.0
        //
        virtual void upload(const DCI_Basics::ComponentArchive& archive)
        	throw(CORBA::SystemException, ::DCI_Basics::UploadError);
        
        //
        // IDL:Components/Deployment/ServerActivator/create_component_server:1.0
        //
        virtual Components::Deployment::ComponentServer_ptr create_component_server(const Components::ConfigValues& config)
        	throw(CORBA::SystemException, ::Components::CreateFailure, ::Components::Deployment::InvalidConfiguration);
        
        //
        // IDL:Components/Deployment/ServerActivator/remove_component_server:1.0
        //
        virtual void remove_component_server(Components::Deployment::ComponentServer_ptr server)
        	throw(CORBA::SystemException, ::Components::RemoveFailure);
        
        //
        // IDL:Components/Deployment/ServerActivator/get_component_servers:1.0
        //
        virtual Components::Deployment::ComponentServers* get_component_servers()
        	throw(CORBA::SystemException);
        
        //
        // IDL:CosPropertyService/PropertySet/define_property:1.0
        //
        virtual void define_property(const char* property_name, const CORBA::Any& property_value)
        	throw(CORBA::SystemException, ::CosPropertyService::InvalidPropertyName, ::CosPropertyService::ReadOnlyProperty, ::CosPropertyService::UnsupportedProperty, ::CosPropertyService::UnsupportedTypeCode, ::CosPropertyService::ConflictingProperty);
        
        //
        // IDL:CosPropertyService/PropertySet/define_properties:1.0
        //
        virtual void define_properties(const CosPropertyService::Properties& nproperties)
        	throw(CORBA::SystemException, ::CosPropertyService::MultipleExceptions);
        
        //
        // IDL:CosPropertyService/PropertySet/get_number_of_properties:1.0
        //
        virtual CORBA::ULong get_number_of_properties()
        	throw(CORBA::SystemException);
        
        //
        // IDL:CosPropertyService/PropertySet/get_all_property_names:1.0
        //
        virtual void get_all_property_names(CORBA::ULong how_many, CosPropertyService::PropertyNames_out property_names, CosPropertyService::PropertyNamesIterator_out rest)
        	throw(CORBA::SystemException);
        
        //
        // IDL:CosPropertyService/PropertySet/get_property_value:1.0
        //
        virtual CORBA::Any* get_property_value(const char* property_name)
        	throw(CORBA::SystemException, ::CosPropertyService::PropertyNotFound, ::CosPropertyService::InvalidPropertyName);
        
        //
        // IDL:CosPropertyService/PropertySet/get_properties:1.0
        //
        virtual CORBA::Boolean get_properties(const CosPropertyService::PropertyNames& property_names, CosPropertyService::Properties_out nproperties)
        	throw(CORBA::SystemException);
        
        //
        // IDL:CosPropertyService/PropertySet/get_all_properties:1.0
        //
        virtual void get_all_properties(CORBA::ULong how_many, CosPropertyService::Properties_out nproperties, CosPropertyService::PropertiesIterator_out rest)
        	throw(CORBA::SystemException);
        
        //
        // IDL:CosPropertyService/PropertySet/delete_property:1.0
        //
        virtual void delete_property(const char* property_name)
        	throw(CORBA::SystemException, ::CosPropertyService::PropertyNotFound, ::CosPropertyService::FixedProperty, ::CosPropertyService::InvalidPropertyName);
        
        //
        // IDL:CosPropertyService/PropertySet/delete_properties:1.0
        //
        virtual void delete_properties(const CosPropertyService::PropertyNames& property_names)
        	throw(CORBA::SystemException, ::CosPropertyService::MultipleExceptions);
        
        //
        // IDL:CosPropertyService/PropertySet/delete_all_properties:1.0
        //
        virtual CORBA::Boolean delete_all_properties()
        	throw(CORBA::SystemException);
        
        //
        // IDL:CosPropertyService/PropertySet/is_property_defined:1.0
        //
        virtual CORBA::Boolean is_property_defined(const char* property_name)
        	throw(CORBA::SystemException, ::CosPropertyService::InvalidPropertyName);
        
        //
        // IDL:DCI_Basics/Monitoring/define_property_with_mode:1.0
        //
        virtual void define_property_with_mode(const char* property_name, const CORBA::Any& property_value, DCI_Basics::PropertyMode property_mode)
        	throw(CORBA::SystemException, ::CosPropertyService::InvalidPropertyName, ::CosPropertyService::UnsupportedMode, ::CosPropertyService::ReadOnlyProperty, ::CosPropertyService::UnsupportedProperty, ::CosPropertyService::UnsupportedTypeCode, ::CosPropertyService::ConflictingProperty);
        
        //
        // IDL:DCI_Basics/Monitoring/get_property_mode:1.0
        //
        virtual DCI_Basics::PropertyMode get_property_mode(const char* property_name)
        	throw(CORBA::SystemException, ::CosPropertyService::PropertyNotFound, ::CosPropertyService::InvalidPropertyName);
        
        //
        // IDL:DCI_Basics/Monitoring/set_property_mode:1.0
        //
        virtual void set_property_mode(const char* property_name, DCI_Basics::PropertyMode property_mode)
        	throw(CORBA::SystemException, ::CosPropertyService::InvalidPropertyName, ::CosPropertyService::UnsupportedMode, ::CosPropertyService::PropertyNotFound);
        
        //
        // IDL:DCI_Basics/NodeInformation/get_node_properties:1.0
        //
        virtual char* get_node_properties()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI_Basics/NodeInformation/get_all_homes:1.0
        //
        virtual Components::CCMHomes* get_all_homes()
        	throw(CORBA::SystemException);
    
// BEGIN USER INSERT SECTION NodeManagerSessionImpl
	public:
		void get_host_name (std::string& ) const;
		
	protected:
		void invalid_name (CosNaming::NamingContext_var ns, CosNaming::Name name_, DCI_Basics::NodeManager_var obj_nm_, std::string& new_node_name);

		// If the string property_name is in the allowed_properties_vector, true
		// is returned and the index of the property in the vector is stored at the place
		// specified by the parameter ind ; else false is returned.
		CORBA::Boolean get_index (const char *property_name, CORBA::ULong *ind);

		// This method returns the name of the property whose index in the properties_vector
		// is specified by the parameter ind.
		CosPropertyService::PropertyName get_name (CORBA::ULong ind);

		// This method returns the value of the property whose index in the properties_vector
		// is specified by the parameter ind.
		CORBA::Any* get_value (CORBA::ULong ind);

		// Returns true if the parameter name is not "".
		CORBA::Boolean is_property_name_valid (const char *name);

		// If allowed_types_vector is void, returns true ; if not, returns true if the parameter
		// property_type is in the vector of types.
		CORBA::Boolean is_property_type_allowed (CORBA::TypeCode_ptr property_type);

		// If allowed_properties_vector is void, returns true ; if not, returns true if, in
		// the allowed_properties_vector, the property specified by the parameter name has the same
		// type as the type of the parameter value and if the mode of this property is undefined or
		// is the same as the parameter mode_type.
		CORBA::Boolean is_property_allowed (const char *name, const CORBA::Any &value, const DCI_Basics::PropertyMode &mode_type);

		// Returns true if the mode of the property specified by the index ind is normal_readonly
		// or fixed_readonly.
		CORBA::Boolean is_property_readonly (CORBA::ULong ind);

		// Returns true if the mode of the property specified by the index ind is fixed_normal
		// or fixed_readonly.
		CORBA::Boolean is_property_fixed (CORBA::ULong ind);

		// Defines a property specified by its name (property_name), its value (property_value)
		// and its mode (mode_type).
		// Exceptions:
		//	CosPropertyService::InvalidPropertyName
		//	CosPropertyService::UnsupportedTypeCode
		//	CosPropertyService::UnsupportedProperty
		//	CosPropertyService::ReadOnlyProperty
		//	CosPropertyService::ConflictingProperty
		void definition (const char *property_name, const CORBA::Any &property_value, const DCI_Basics::PropertyMode &mode_type);

		// Defines a set of properties.
		// Exceptions:
		//	CosPropertyService::MultipleExceptions
		void definitions (const CosPropertyService::Properties &nproperties,const DCI_Basics::PropertyMode &mode_type);

		// avf: reference properties repository
		PropertiesRepository* pr;

		// Vector of the defined properties.
		PropertyDefs* properties_vector;

		//hostname
		char _hostname [ 30 ];

		// Vector of the allowed properties.
		PropertyDefs* allowed_properties_vector;

		// Vector of the allowed types.
		PropertyTypes* allowed_types_vector;

		// hide extensive output if true
		bool _quiet_mode;

#ifdef _WINDOWS
		bool _is_NT;
#endif

// END USER INSERT SECTION NodeManagerSessionImpl

    };
    
    
    //
    // executor locator
    //
    class NodeManagerImpl
        : public virtual CORBA::LocalObject
        , public virtual Components::SessionExecutorLocator
// BEGIN USER INSERT SECTION INHERITANCE_NodeManagerImpl
// END USER INSERT SECTION INHERITANCE_NodeManagerImpl
    {
    
    private:
    
        ::DCI_Basics::CCM_NodeManager_Context_var context_;
        
        NodeManagerSessionImpl* component_;
        
    public:
    
        NodeManagerImpl();
        ~NodeManagerImpl();
        
        //
        // IDL:Components/ExecutorLocator/obtain_executor:1.0
        //
        virtual CORBA::Object_ptr obtain_executor(const char* name)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/release_executor:1.0
        //
        virtual void release_executor(CORBA::Object_ptr exc)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/configuration_complete:1.0
        //
        virtual void configuration_complete()
        	throw(CORBA::SystemException, ::Components::InvalidConfiguration);
        
        //
        // IDL:Components/SessionComponent/set_session_context:1.0
        //
        virtual void set_session_context(Components::SessionContext_ptr ctx)
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_activate:1.0
        //
        virtual void ccm_activate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_passivate:1.0
        //
        virtual void ccm_passivate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_remove:1.0
        //
        virtual void ccm_remove()
        	throw(CORBA::SystemException, ::Components::CCMException);
    
// BEGIN USER INSERT SECTION NodeManagerImpl
// END USER INSERT SECTION NodeManagerImpl

    };
    
    
    //
    // home executor
    //
    class NodeManagerHomeImpl
        : public virtual CORBA::LocalObject
        , public virtual ::DCI_Basics::CCM_NodeManagerHome
// BEGIN USER INSERT SECTION INHERITANCE_NodeManagerHomeImpl
// END USER INSERT SECTION INHERITANCE_NodeManagerHomeImpl
    {
    
    private:
    
        Components::CCMContext_ptr context_;
        
    public:
        NodeManagerHomeImpl();
        ~NodeManagerHomeImpl();
        
        //
        // IDL:Components/HomeExecutorBase/set_context:1.0
        //
        virtual void set_context (Components::CCMContext_ptr ctx)
            throw (CORBA::SystemException, Components::CCMException);
        
        //
        // IDL:.../create:1.0
        //
        virtual ::Components::EnterpriseComponent_ptr create()
            throw (CORBA::SystemException, Components::CreateFailure);
    
// BEGIN USER INSERT SECTION NodeManagerHomeImpl
// END USER INSERT SECTION NodeManagerHomeImpl

    };
    
};

//
// entry point
//
extern "C" {
#ifdef _WIN32
__declspec(dllexport)
#else
#endif
::Components::HomeExecutorBase_ptr create_NodeManagerHomeE(void);
}

#endif
