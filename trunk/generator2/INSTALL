/*****************************************************************************/
/* Qedo - Qualitiy of Service Enabled Distributed Objects                    */
/*                                                                           */
/* Copyright (c) 2002 by the Qedo Team                                       */
/*                                                                           */
/* http://qedo.berlios.de                                                    */
/*                                                                           */
/* This file is part of Qedo Generator                                       */
/*                                                                           */
/* Qedo Generator is free software; you can redistribute it and/or modify    */
/* it under the terms of the GNU General Public License as published by      */
/* the Free Software Foundation; either version 2 of the License, or         */
/* (at your option) any later version.                                       */
/*                                                                           */ 
/* Qedo Generator is distributed in the hope that it will be useful,         */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of            */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             */
/* GNU General Public License for more details.                              */
/*                                                                           */
/* You should have received a copy of the GNU General Public License         */
/* along with Qedo; if not, write to the Free Software                     */
/* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */
/*                                                                           */
/*****************************************************************************/

This File decribes the process of installing the Qedo code generator. Because the code generator is a complex software it need many other software products. You have to install all of them before you can compile the code generator. This will take you an amount of time and some expiriences with installing such software qould be very helpfull. Nevertheless, we hopte that this little discription will give enough information to acomplish all needed steps. 
The Qedo code generator can be compiled by using the MS Visual Studio 6 oder MS Visual Studio.Net.

If yuo have any problem or if you have any comments do not hesitate to contact the other Qedo users by using the qedo-devel mailing list. You can reach it at qedo-devel@lists.berlios.de. You can also use the bug tracking system provided by the Qedo project. You can reach it at http://qedo.berlios.de. this site has all relevant information about the Qedo project. In any case you can also contact the authors directly. The email addresses are listed on the Qedo web page as well.

The Qedo team.

1. ORB
======

The code generator uses an extended interface repository. This repository needs CORBA. At the moment Qedo generator supports 3 ORBs 
Mico, TAO and ORBacus. For using one of the ORBs you need to install the ORB and to set an apropriate environment variable. Follow the instructions coming with each ORB to install it properly. We will only point out some important details.


orbacus Version 4.1.1
------------------------------------------------------------------------------
To install ORBACUS you have to do at least the following steps.
obtain software:
	Version 4.1.1
	get from: http://www.iona.com/products/orbacus_home.htm (OB-4.1.1.zip)
install/compile:
	configure file OB-4.1.1/config/Make.rules.mak, set 'prefix' directory, DEBUG=yes and DLL=yes
	cd to OB-4.1.1 and compile with nmake -f Makefile.mak install_min
set environment:
	ORBACUS = (e.g. C:\OOC)
	ORBACUS_CONFIG= %ORBACUS%\ooc\ini\orbacus.ini
	create ini-dir with orbacus.ini:
		ooc.orb.service.NameService = corbaloc:iiop:127.0.0.1:3000/NameService
		ooc.naming.endpoint=iiop --port 3000
	add path %ORBACUS%\lib to VC++ extras/options/directories/executable files (*.dll)



TAO Version x.3
------------------------------------------------------------------------------
TAO comes with the ACE Framework (Version 5.3). 
To install TAO you have to do at least the following steps.
obtain software:
	Version TAO 1.3 ACE 5.3
	get from: http://www.cs.wustl.edu/~schmidt/TAO.html
install/compile:
	ACE_ROOT = C:\ACE_WRAPPERS
	TAO_ROOT = C:\ACE_WRAPPERS\TAO
	TAO      = C:\ACE_WRAPPERS
	create a config.h in %ACE_WRAPPERS%\ace:
		#define ACE_HAS_STANDARD_CPP_LIBRARY 1
		#include "ace/config-win32.h"
	use the TAO workspace provided at %ACE_ROOT%\tao to compile TAO
	there are a lot of project you need at least to compile these ones:
		TAO_IDL
		PortableServer
		DynamicAny




MICO version 2.3.7
------------------------------------------------------------------------------
To install MICO you have to to at least the following steps.
obtain software:
	version MICO 2.3.7
	get from: http://www.mico.org/
install/compile:
	MICO = (e.g. C:\MICO)
	add path %MICO%\win32-bin to VC++ extras/options/directories/executable files

2. Development Environment
==========================
In particular the text based front end of the Qedo code generator uses some of the common mechanisms to generate the text parser. Since these mechanisms are not part of a Windows system you need to install them. We recommend that you install the cygwin package. But you can also use other implementation for this purpose.

cygwin
------------------------------------------------------------------------------
Be careful that you install all the needed packages. Including all programs that are listed below.
obtain software:
	Version: 1.3.13-2
	get from: http://www.cygwin.com (setup.exe)
install/compile:
	start setup, choose server and make sure, that the following tools are installed:
		category devels: flex, bison 
			 interpreters: phyton
			 ( base: all including zlib )
set environment:
	add cygwin\bin to PATH
	YACC = bison.exe
	LEX = flex.exe
	PYTHON = python2.2.exe 

	add path cygwin\bin to VC++ extras/options/directories/executable files

kimwitu++
------------------------------------------------------------------------------
obtain software:
	Version: 2.3.1
	get from: http://site.informatik.hu-berlin.de/kimwitu++/download.html -> precompiled version (kc++-2.3.1.exe)
install/compile:
set environment:
	 KC++ = kimwitu++\kc++-2.3.1.exe

------------------------------------------------------------------------------

ORB
---


For Mico you have to set the MICO environment variable to the root of your mico installation. (e.g. C:\opt\MICO) But pay attention you have to add the path 'Mico install directory' + '\win32_bin' to the Visual Studio settings. Otherwise mico will not find its own preprocessor mico-cpp.exe

For TAO you will have to set the TAO environment variable. (e.g. C:\opt\ACE_wrappers)

For ORBacus you will have to set the ORBACUS environment varibale. (e.g. C:\opt\OOC)


Compiling
---------

If you use the MS Visual Studio 6 you have to open the workspace :
generator2\build\win32\VC6\generator.dsw 

If you use the MS Visual Studio .NET you have to open the solution: 
generator2\build\win32\VC7\generator.sln


Then you will have to set the active configuration. 
mico    ->   CIDLGenerator - Win32 Debug_mico
tao     ->   CIDLGenerator - Win32 Debug_tao
orbacus ->   CIDLGenerator - Win32 Debug_orbacus

