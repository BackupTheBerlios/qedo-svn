// $ANTLR : "idl.g" -> "IDLParser.java"$

  package ccmio.parser;
  import java.io.*;
  import java.util.Vector;
  import java.util.Hashtable;

public interface IDLTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SPECIFICATION = 4;
	int MODULE = 5;
	int DEFINITION = 6;
	int DEFINITION_LIST = 7;
	int ENUM = 8;
	int ENUMERATOR_LIST = 9;
	int SEMI = 10;
	int LITERAL_abstract = 11;
	int LITERAL_local = 12;
	int LITERAL_interface = 13;
	int LITERAL_custom = 14;
	int LITERAL_valuetype = 15;
	int LITERAL_eventtype = 16;
	int LITERAL_module = 17;
	int LCURLY = 18;
	int RCURLY = 19;
	int COLON = 20;
	int COMMA = 21;
	int SCOPEOP = 22;
	int IDENT = 23;
	int LITERAL_truncatable = 24;
	int LITERAL_supports = 25;
	int LITERAL_public = 26;
	int LITERAL_private = 27;
	int LITERAL_factory = 28;
	int LPAREN = 29;
	int RPAREN = 30;
	int LITERAL_in = 31;
	int LITERAL_const = 32;
	int ASSIGN = 33;
	int OR = 34;
	int XOR = 35;
	int AND = 36;
	int LSHIFT = 37;
	int RSHIFT = 38;
	int PLUS = 39;
	int MINUS = 40;
	int STAR = 41;
	int DIV = 42;
	int MOD = 43;
	int TILDE = 44;
	int LITERAL_TRUE = 45;
	int LITERAL_FALSE = 46;
	int LITERAL_typedef = 47;
	int LITERAL_native = 48;
	int LITERAL_float = 49;
	int LITERAL_double = 50;
	int LITERAL_long = 51;
	int LITERAL_short = 52;
	int LITERAL_unsigned = 53;
	int LITERAL_char = 54;
	int LITERAL_wchar = 55;
	int LITERAL_boolean = 56;
	int LITERAL_octet = 57;
	int LITERAL_any = 58;
	int LITERAL_Object = 59;
	int LITERAL_struct = 60;
	int LITERAL_union = 61;
	int LITERAL_switch = 62;
	int LITERAL_case = 63;
	int LITERAL_default = 64;
	int LITERAL_enum = 65;
	int LITERAL_sequence = 66;
	int LT = 67;
	int GT = 68;
	int LITERAL_string = 69;
	int LITERAL_wstring = 70;
	int LBRACK = 71;
	int RBRACK = 72;
	int LITERAL_exception = 73;
	int LITERAL_oneway = 74;
	int LITERAL_void = 75;
	int LITERAL_out = 76;
	int LITERAL_inout = 77;
	int LITERAL_raises = 78;
	int LITERAL_context = 79;
	int LITERAL_fixed = 80;
	int LITERAL_ValueBase = 81;
	int LITERAL_import = 82;
	int LITERAL_typeid = 83;
	int LITERAL_typeprefix = 84;
	int LITERAL_readonly = 85;
	int LITERAL_attribute = 86;
	int LITERAL_getraises = 87;
	int LITERAL_setraises = 88;
	int LITERAL_component = 89;
	int LITERAL_provides = 90;
	int LITERAL_uses = 91;
	int LITERAL_multiple = 92;
	int LITERAL_emits = 93;
	int LITERAL_publishes = 94;
	int LITERAL_consumes = 95;
	int LITERAL_home = 96;
	int LITERAL_manages = 97;
	int LITERAL_primarykey = 98;
	int LITERAL_finder = 99;
	int INT = 100;
	int OCTAL = 101;
	int HEX = 102;
	int STRING_LITERAL = 103;
	int WIDE_STRING_LITERAL = 104;
	int CHAR_LITERAL = 105;
	int WIDE_CHAR_LITERAL = 106;
	int FIXED = 107;
	int FLOAT = 108;
	int QUESTION = 109;
	int DOT = 110;
	int NOT = 111;
	int WS = 112;
	int PREPROC_DIRECTIVE = 113;
	int SL_COMMENT = 114;
	int ML_COMMENT = 115;
	int ESC = 116;
	int VOCAB = 117;
	int DIGIT = 118;
	int NONZERODIGIT = 119;
	int OCTDIGIT = 120;
	int HEXDIGIT = 121;
	int ESCAPED_IDENT = 122;
}
