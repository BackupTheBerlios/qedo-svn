//
// generated by Qedo
//

#include "DCI_RepNodeManagerImpl.h"


// BEGIN USER INSERT SECTION file
// END USER INSERT SECTION file


namespace DCI {


// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl
// END USER INSERT SECTION RepNodeManagerSessionImpl


RepNodeManagerSessionImpl::RepNodeManagerSessionImpl()
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::RepNodeManagerSessionImpl
// END USER INSERT SECTION RepNodeManagerSessionImpl::RepNodeManagerSessionImpl
}


RepNodeManagerSessionImpl::~RepNodeManagerSessionImpl()
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::~RepNodeManagerSessionImpl
// END USER INSERT SECTION RepNodeManagerSessionImpl::~RepNodeManagerSessionImpl

}


void
RepNodeManagerSessionImpl::set_context(::DCI::CCM_RepNodeManager_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::DCI::CCM_RepNodeManager_ContextImpl::_duplicate(context);
}


void
RepNodeManagerSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::configuration_complete
// END USER INSERT SECTION RepNodeManagerSessionImpl::configuration_complete
}


void
RepNodeManagerSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::remove
// END USER INSERT SECTION RepNodeManagerSessionImpl::remove
}


void
RepNodeManagerSessionImpl::node_name(const char* param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::_node_name
// END USER INSERT SECTION RepNodeManagerSessionImpl::_node_name
}


char*
RepNodeManagerSessionImpl::node_name()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::node_name
// END USER INSERT SECTION RepNodeManagerSessionImpl::node_name
}


Components::Deployment::ComponentServer_ptr
RepNodeManagerSessionImpl::create_component_server(const Components::ConfigValues& config)
	throw(CORBA::SystemException, ::Components::CreateFailure, ::Components::Deployment::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::create_component_server
// END USER INSERT SECTION RepNodeManagerSessionImpl::create_component_server
}


void
RepNodeManagerSessionImpl::remove_component_server(Components::Deployment::ComponentServer_ptr server)
	throw(CORBA::SystemException, ::Components::RemoveFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::remove_component_server
// END USER INSERT SECTION RepNodeManagerSessionImpl::remove_component_server
}


Components::Deployment::ComponentServers*
RepNodeManagerSessionImpl::get_component_servers()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::get_component_servers
// END USER INSERT SECTION RepNodeManagerSessionImpl::get_component_servers
}


void
RepNodeManagerSessionImpl::install(const char* implUUID, const char* component_loc)
	throw(CORBA::SystemException, ::Components::Deployment::InvalidLocation, ::Components::Deployment::InstallationFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::install
// END USER INSERT SECTION RepNodeManagerSessionImpl::install
}


void
RepNodeManagerSessionImpl::replace(const char* implUUID, const char* component_loc)
	throw(CORBA::SystemException, ::Components::Deployment::InvalidLocation, ::Components::Deployment::InstallationFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::replace
// END USER INSERT SECTION RepNodeManagerSessionImpl::replace
}


void
RepNodeManagerSessionImpl::remove(const char* implUUID)
	throw(CORBA::SystemException, ::Components::Deployment::UnknownImplId, ::Components::RemoveFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::remove
// END USER INSERT SECTION RepNodeManagerSessionImpl::remove
}


char*
RepNodeManagerSessionImpl::get_implementation(const char* implUUID)
	throw(CORBA::SystemException, ::Components::Deployment::UnknownImplId, ::Components::Deployment::InstallationFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::get_implementation
// END USER INSERT SECTION RepNodeManagerSessionImpl::get_implementation
}


char*
RepNodeManagerSessionImpl::upload(const char* implUUID, const DCI::ComponentArchive& archive)
	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::upload
// END USER INSERT SECTION RepNodeManagerSessionImpl::upload
}


DCI::DCIDescriptors*
RepNodeManagerSessionImpl::get_node_properties()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::get_node_properties
// END USER INSERT SECTION RepNodeManagerSessionImpl::get_node_properties
}


CORBA::Boolean
RepNodeManagerSessionImpl::is_property_defined(const char* property_name)
	throw(CORBA::SystemException, ::Components::InvalidName)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::is_property_defined
// END USER INSERT SECTION RepNodeManagerSessionImpl::is_property_defined
}


CORBA::Any*
RepNodeManagerSessionImpl::get_property_value(const char* property_name)
	throw(CORBA::SystemException, ::Components::InvalidName)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::get_property_value
// END USER INSERT SECTION RepNodeManagerSessionImpl::get_property_value
}


// BEGIN USER INSERT SECTION RepNodeManagerImpl
// END USER INSERT SECTION RepNodeManagerImpl


RepNodeManagerImpl::RepNodeManagerImpl()
:component_(new RepNodeManagerSessionImpl())
{
// BEGIN USER INSERT SECTION RepNodeManagerImpl::RepNodeManagerImpl
// END USER INSERT SECTION RepNodeManagerImpl::RepNodeManagerImpl
}


RepNodeManagerImpl::~RepNodeManagerImpl()
{
// BEGIN USER INSERT SECTION RepNodeManagerImpl::~RepNodeManagerImpl
// END USER INSERT SECTION RepNodeManagerImpl::~RepNodeManagerImpl

    component_->_remove_ref();
}


::CORBA::Object*
RepNodeManagerImpl::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "server_activator")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "component_installation")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "node_information")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
RepNodeManagerImpl::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
RepNodeManagerImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION RepNodeManagerImpl::configuration_complete
// END USER INSERT SECTION RepNodeManagerImpl::configuration_complete
}


void
RepNodeManagerImpl::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::DCI::CCM_RepNodeManager_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::DCI::CCM_RepNodeManager_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::DCI::CCM_RepNodeManager_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::DCI::CCM_RepNodeManager_ContextImpl::_nil();
        
    #else
    context_ = ::DCI::CCM_RepNodeManager_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
RepNodeManagerImpl::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepNodeManagerImpl::ccm_activate
// END USER INSERT SECTION RepNodeManagerImpl::ccm_activate
}


void
RepNodeManagerImpl::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepNodeManagerImpl::ccm_passivate
// END USER INSERT SECTION RepNodeManagerImpl::ccm_passivate
}


void
RepNodeManagerImpl::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepNodeManagerImpl::ccm_remove
// END USER INSERT SECTION RepNodeManagerImpl::ccm_remove
}


// BEGIN USER INSERT SECTION RepNodeManagerHomeImpl
// END USER INSERT SECTION RepNodeManagerHomeImpl


RepNodeManagerHomeImpl::RepNodeManagerHomeImpl()
{
// BEGIN USER INSERT SECTION RepNodeManagerHomeImpl::RepNodeManagerHomeImpl
// END USER INSERT SECTION RepNodeManagerHomeImpl::RepNodeManagerHomeImpl
}


RepNodeManagerHomeImpl::~RepNodeManagerHomeImpl()
{
// BEGIN USER INSERT SECTION RepNodeManagerHomeImpl::~RepNodeManagerHomeImpl
// END USER INSERT SECTION RepNodeManagerHomeImpl::~RepNodeManagerHomeImpl

}


void
RepNodeManagerHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
RepNodeManagerHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerHomeImpl::create
// END USER INSERT SECTION RepNodeManagerHomeImpl::create
    return new RepNodeManagerImpl();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_RepNodeManagerHomeE(void)
{
// BEGIN USER INSERT SECTION create_RepNodeManagerHome
// END USER INSERT SECTION create_RepNodeManagerHome

    return new ::DCI::RepNodeManagerHomeImpl();
}

