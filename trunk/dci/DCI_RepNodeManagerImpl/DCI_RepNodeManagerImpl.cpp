//
// generated by Qedo
//

#include "DCI_RepNodeManagerImpl.h"


// BEGIN USER INSERT SECTION file
using namespace std;
// END USER INSERT SECTION file


namespace DCI {


// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl
// END USER INSERT SECTION RepNodeManagerSessionImpl


RepNodeManagerSessionImpl::RepNodeManagerSessionImpl()
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::RepNodeManagerSessionImpl
// END USER INSERT SECTION RepNodeManagerSessionImpl::RepNodeManagerSessionImpl
}


RepNodeManagerSessionImpl::~RepNodeManagerSessionImpl()
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::~RepNodeManagerSessionImpl
// END USER INSERT SECTION RepNodeManagerSessionImpl::~RepNodeManagerSessionImpl

}


void
RepNodeManagerSessionImpl::set_context(::DCI::CCM_RepNodeManager_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::DCI::CCM_RepNodeManager_ContextImpl::_duplicate(context);
}


void
RepNodeManagerSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::configuration_complete
	//register to DCIManager
	DEBUG_OUT( "RepNodeManagerSessionImpl::configuration_complete(): start...");
	//DCI::NodeManagement_ptr nodemgmt = context_->get_connection_node_management();
	//if ( CORBA::is_nil ( nodemgmt ) ) {
	//	NORMAL_ERR("RepNodeManagerSessionImpl::configuration_complete(): nodemgmt reference nil!");
	//	throw CORBA::SystemException();
	//}
	//for testing -----------------------------------------------------------------------------
	//std::string mda_etc_var = Qedo::getEnvironment ( "MDA_ETC" );
	//std::string file;
	//if (!mda_etc_var.empty())
	//{
	//	file = mda_etc_var + "\\repdcimanager.ior";
	//} 
	//else 
	//{
	//	NORMAL_ERR("RRepNodeManagerSessionImpl::configuration_complete(): MDA_ETC environment variable not found !");
	//	throw CORBA::SystemException();
	//}

	//std::ifstream in;
	//in.open ( file.c_str() );
	//if ( ! ( in.is_open () ) ) 
	//{
	//	NORMAL_ERR3("RepNodeManagerSessionImpl::configuration_complete(): ", file, "repdcimanager reference is not found!");
	//	throw CORBA::SystemException();
	//}

	//DEBUG_OUT2( "RepNodeManagerSessionImpl::configuration_complete(): using repdcimanager reference at: ", file);
	//char ref_[2048];
	//in >> ref_;
	//in.close ();

	//int dummy = 0;
	//CORBA::ORB_var orb = CORBA::ORB_init (dummy, 0);
	//CORBA::Object_var obj_;

	//if ( strcmp ( ref_, "" ) != 0 )
	//		obj_ = orb->string_to_object ( ref_ );
	//else
	//{
	//	NORMAL_ERR2("RepNodeManagerSessionImpl::configuration_complete(): repdcimanager reference not valid!", ref_);
	//	throw CORBA::SystemException();
	//}

	//if( CORBA::is_nil ( obj_.in () ) ) 
	//{
	//	NORMAL_ERR("RepNodeManagerSessionImpl::configuration_complete(): String to Object by ORB initialization failed!");
	//	throw CORBA::SystemException();
	//}

	//DEBUG_OUT( "RepNodeManagerSessionImpl::configuration_complete(): narrowing ...");
	//
	//DCI::RepDCIManager_var dcimgr = DCI::RepDCIManager::_narrow( obj_ );
	//if( CORBA::is_nil ( dcimgr ) ) 
	//{
	//	NORMAL_ERR("RepNodeManagerSessionImpl::configuration_complete(): repdcimanager reference nil!");
	//	throw CORBA::SystemException();
	//}
	//DCI::NodeManagement_ptr nodemgmt = dcimgr->provide_node_management();
	//for testing -----------------------------------------------------------------------------

	DCI::DCIManager_ptr dcimgr = context_->get_connection_dcimanager();
	if( CORBA::is_nil ( dcimgr ) ) 
	{
		NORMAL_ERR("RepNodeManagerSessionImpl::configuration_complete(): get_connection_dcimanager nil!");
		throw CORBA::SystemException();
	}
	DCI::NodeManagement_ptr nodemgmt = dcimgr->provide_node_management();
	if ( CORBA::is_nil ( nodemgmt ) ) {
		NORMAL_ERR("RepNodeManagerImpl::configuration_complete(): nodemgmt reference nil! cannot register node!!");
		throw CORBA::SystemException();
	}
	char hostname[256];
	gethostname(hostname, 256);
	DCI::NodeManager_ptr ref = DCI::NodeManager::_narrow(context_->get_CCM_object());
	DEBUG_OUT2( "RepNodeManagerSessionImpl::configuration_complete(): register at dcimanager node=", hostname );
	nodemgmt->register_node(hostname, DCI::NodeManager::_duplicate(ref));
	DEBUG_OUT( "RepNodeManagerSessionImpl::configuration_complete(): ...end");
// END USER INSERT SECTION RepNodeManagerSessionImpl::configuration_complete
}


void
RepNodeManagerSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::remove
// END USER INSERT SECTION RepNodeManagerSessionImpl::remove
}


void
RepNodeManagerSessionImpl::node_name(const char* param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::_node_name
// END USER INSERT SECTION RepNodeManagerSessionImpl::_node_name
}


char*
RepNodeManagerSessionImpl::node_name()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::node_name
        throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepNodeManagerSessionImpl::node_name
}


Components::Deployment::ComponentServer_ptr
RepNodeManagerSessionImpl::create_component_server(const Components::ConfigValues& config)
	throw(CORBA::SystemException, ::Components::CreateFailure, ::Components::Deployment::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::create_component_server
        throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepNodeManagerSessionImpl::create_component_server
}


void
RepNodeManagerSessionImpl::remove_component_server(Components::Deployment::ComponentServer_ptr server)
	throw(CORBA::SystemException, ::Components::RemoveFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::remove_component_server
// END USER INSERT SECTION RepNodeManagerSessionImpl::remove_component_server
}


Components::Deployment::ComponentServers*
RepNodeManagerSessionImpl::get_component_servers()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::get_component_servers
        throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepNodeManagerSessionImpl::get_component_servers
}


void
RepNodeManagerSessionImpl::install(const char* implUUID, const char* component_loc)
	throw(CORBA::SystemException, ::Components::Deployment::InvalidLocation, ::Components::Deployment::InstallationFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::install
	DEBUG_OUT2( "RepNodeManagerSessionImpl::install(): implUUID=",implUUID);
	DEBUG_OUT2( "RepNodeManagerSessionImpl::install(): component_loc=",component_loc);

	if(strcmp(component_loc, "")==0)
		throw ::Components::Deployment::InvalidLocation();

	std::string repref(component_loc);
	repref = repref.substr(7,repref.length()-7); //"RepRef=IOR:..."

	int dummy = 0;
	CORBA::ORB_var orb = CORBA::ORB_init (dummy, 0);
	CORBA::Object_var obj_;
	if ( strcmp ( repref.c_str(), "" ) != 0 )
		try {
			obj_ = orb->string_to_object ( repref.c_str() );
		}
		catch(...) {
			NORMAL_ERR("RepNodeManagerSessionImpl::install(): string_to_object failed!");
			throw ::Components::Deployment::InvalidLocation();
		}
	else
	{
		NORMAL_ERR("RepNodeManagerSessionImpl::install(): component_loc empty!");
		throw ::Components::Deployment::InvalidLocation();
	}
	if( CORBA::is_nil(obj_.in()) ) 
	{
		NORMAL_ERR2("RepNodeManagerSessionImpl::install(): String to Object by ORB initialization failed! component_loc=", component_loc);
		throw ::Components::Deployment::InvalidLocation();
	}
	DEBUG_OUT( "RepNodeManagerSessionImpl::install(): narrowing ...");
	MDE::Deployment::DeploymentUnit_ptr rep_deployment_unit = MDE::Deployment::DeploymentUnit::_narrow( obj_ );
	if( CORBA::is_nil ( rep_deployment_unit ) ) 
	{
		NORMAL_ERR("RepNodeManagerSessionImpl::install(): rep_deployment_unit reference nil!");
		throw ::Components::Deployment::InvalidLocation();
	}
	DEBUG_OUT2( "RepNodeManagerSessionImpl::install(): installing uuid=", rep_deployment_unit->uuid());
	
	std::string mda_etc_var = Qedo::getEnvironment ( "MDA_ETC" );
	std::string filedir;
	if (!mda_etc_var.empty())
	{
		filedir = mda_etc_var + "\\nm-files";
	} 
	else 
	{
		NORMAL_ERR("RepNodeManagerSessionImpl::install(): MDA_ETC environment variable not found !");
		throw ::Components::Deployment::InstallationFailure();
	}
	Qedo::makeDir(filedir);

	MDE::Deployment::ContainedFileSet* cf_set =rep_deployment_unit->contained_file();
	unsigned long cf_set_idx = 0;
	while ( cf_set_idx < cf_set->length()) {
		std::string out((*cf_set)[cf_set_idx]->filename());
//		out +="\nsize="+(*cf_set)[cf_set_idx]->filesize;
		out = out + "\nlocation="+(*cf_set)[cf_set_idx]->location() + "\ncodetype="+(*cf_set)[cf_set_idx]->codetype() +
			  "\nentrypoint="+(*cf_set)[cf_set_idx]->entrypoint() + "\nentrypointusage="+(*cf_set)[cf_set_idx]->entrypointusage();
		DEBUG_OUT2( "RepNodeManagerSessionImpl::install(): containedFile=\n", out);

		DEBUG_OUT("RepNodeManagerSessionImpl::install(): get_file()...");
		
		CORBA::OctetSeq_var file;
		file = (*cf_set)[cf_set_idx]->get_file();
		std::string filepath = filedir + "\\"+(*cf_set)[cf_set_idx]->filename();
		DEBUG_OUT2("RepNodeManagerSessionImpl::install(): save file ", filepath);
		::RepUtils::save_file(filepath.c_str(), file);
		cf_set_idx++;
	}
	DEBUG_OUT("RepNodeManagerSessionImpl::install(): ...end");
// END USER INSERT SECTION RepNodeManagerSessionImpl::install
}


void
RepNodeManagerSessionImpl::replace(const char* implUUID, const char* component_loc)
	throw(CORBA::SystemException, ::Components::Deployment::InvalidLocation, ::Components::Deployment::InstallationFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::replace
// END USER INSERT SECTION RepNodeManagerSessionImpl::replace
}


void
RepNodeManagerSessionImpl::remove(const char* implUUID)
	throw(CORBA::SystemException, ::Components::Deployment::UnknownImplId, ::Components::RemoveFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::remove
// END USER INSERT SECTION RepNodeManagerSessionImpl::remove
}


char*
RepNodeManagerSessionImpl::get_implementation(const char* implUUID)
	throw(CORBA::SystemException, ::Components::Deployment::UnknownImplId, ::Components::Deployment::InstallationFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::get_implementation
        throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepNodeManagerSessionImpl::get_implementation
}


char*
RepNodeManagerSessionImpl::upload(const char* implUUID, const DCI::ComponentArchive& archive)
	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::upload
	DEBUG_OUT2( "RepNodeManagerSessionImpl::upload(): implUUID=", implUUID );
	
	DCI::Repository_var rep = context_->get_connection_repository();
	CORBA::Object_var obj = rep->provide_facet("rep_feeder"); //provide_rep_feeder(); TODO: knallt in DCINodeManagerExt-Assembly!!
	DCI::RepFeeder_var repfeed = DCI::RepFeeder::_narrow(obj);
	return strdup(::RepUtils::get_strRefRep(repfeed->feed_component(implUUID, archive)).c_str());
// END USER INSERT SECTION RepNodeManagerSessionImpl::upload
}


DCI::DCIDescriptors*
RepNodeManagerSessionImpl::get_node_properties()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::get_node_properties
        throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepNodeManagerSessionImpl::get_node_properties
}


CORBA::Boolean
RepNodeManagerSessionImpl::is_property_defined(const char* property_name)
	throw(CORBA::SystemException, ::Components::InvalidName)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::is_property_defined
        throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepNodeManagerSessionImpl::is_property_defined
}


CORBA::Any*
RepNodeManagerSessionImpl::get_property_value(const char* property_name)
	throw(CORBA::SystemException, ::Components::InvalidName)
{
// BEGIN USER INSERT SECTION RepNodeManagerSessionImpl::get_property_value
        throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepNodeManagerSessionImpl::get_property_value
}


// BEGIN USER INSERT SECTION RepNodeManagerImpl
// END USER INSERT SECTION RepNodeManagerImpl


RepNodeManagerImpl::RepNodeManagerImpl()
:component_(new RepNodeManagerSessionImpl())
{
// BEGIN USER INSERT SECTION RepNodeManagerImpl::RepNodeManagerImpl
// END USER INSERT SECTION RepNodeManagerImpl::RepNodeManagerImpl
}


RepNodeManagerImpl::~RepNodeManagerImpl()
{
// BEGIN USER INSERT SECTION RepNodeManagerImpl::~RepNodeManagerImpl
// END USER INSERT SECTION RepNodeManagerImpl::~RepNodeManagerImpl

    component_->_remove_ref();
}


::CORBA::Object*
RepNodeManagerImpl::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "server_activator")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "component_installation")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "node_information")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
RepNodeManagerImpl::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
RepNodeManagerImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION RepNodeManagerImpl::configuration_complete
DEBUG_OUT( "RepNodeManagerImpl::configuration_complete()");
// END USER INSERT SECTION RepNodeManagerImpl::configuration_complete
}


void
RepNodeManagerImpl::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::DCI::CCM_RepNodeManager_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::DCI::CCM_RepNodeManager_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::DCI::CCM_RepNodeManager_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::DCI::CCM_RepNodeManager_ContextImpl::_nil();
        
    #else
    context_ = ::DCI::CCM_RepNodeManager_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
RepNodeManagerImpl::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepNodeManagerImpl::ccm_activate
	DEBUG_OUT( "RepNodeManagerImpl::ccm_activate()");
// END USER INSERT SECTION RepNodeManagerImpl::ccm_activate
}


void
RepNodeManagerImpl::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepNodeManagerImpl::ccm_passivate
	DEBUG_OUT( "RepNodeManagerImpl::ccm_passivate()");
// END USER INSERT SECTION RepNodeManagerImpl::ccm_passivate
}


void
RepNodeManagerImpl::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepNodeManagerImpl::ccm_remove
	DEBUG_OUT( "RepNodeManagerImpl::ccm_remove(): start...");
	//deregister to DCIManager
	//	DCI::NodeManagement_ptr nodemgmt = context_->get_connection_node_management();
	DCI::DCIManager_ptr dcimgr = context_->get_connection_dcimanager();
	if( CORBA::is_nil ( dcimgr ) ) 
	{
		NORMAL_ERR("RepNodeManagerSessionImpl::ccm_remove(): get_connection_dcimanager nil!");
		throw CORBA::SystemException();
	}
	DCI::NodeManagement_ptr nodemgmt = dcimgr->provide_node_management();
	if ( CORBA::is_nil ( nodemgmt ) ) {
		NORMAL_ERR("RepNodeManagerImpl::ccm_remove(): nodemgmt reference nil! cannot deregister node!!");
	}
	else {
		char hostname[256];
		gethostname(hostname, 256);
		DEBUG_OUT2( "RepNodeManagerImpl::ccm_remove(): deregister at dcimanager node=", hostname );
		nodemgmt->deregister_node(hostname);
	}
	DEBUG_OUT( "RepNodeManagerImpl::ccm_remove(): ...end");
// END USER INSERT SECTION RepNodeManagerImpl::ccm_remove
}


// BEGIN USER INSERT SECTION RepNodeManagerHomeImpl
// END USER INSERT SECTION RepNodeManagerHomeImpl


RepNodeManagerHomeImpl::RepNodeManagerHomeImpl()
{
// BEGIN USER INSERT SECTION RepNodeManagerHomeImpl::RepNodeManagerHomeImpl
// END USER INSERT SECTION RepNodeManagerHomeImpl::RepNodeManagerHomeImpl
}


RepNodeManagerHomeImpl::~RepNodeManagerHomeImpl()
{
// BEGIN USER INSERT SECTION RepNodeManagerHomeImpl::~RepNodeManagerHomeImpl
// END USER INSERT SECTION RepNodeManagerHomeImpl::~RepNodeManagerHomeImpl

}


void
RepNodeManagerHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
RepNodeManagerHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION RepNodeManagerHomeImpl::create
// END USER INSERT SECTION RepNodeManagerHomeImpl::create
    return new RepNodeManagerImpl();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_RepNodeManagerHomeE(void)
{
// BEGIN USER INSERT SECTION create_RepNodeManagerHome
// END USER INSERT SECTION create_RepNodeManagerHome

    return new ::DCI::RepNodeManagerHomeImpl();
}

