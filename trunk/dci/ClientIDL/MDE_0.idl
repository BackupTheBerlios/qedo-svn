/*
	*********************************************************************
	
	Generated by M2C MOF2IDL
	
	Copyright (c) 2001
	IKV++ Technologies AG
	Berlin, Germany
	
	All Rights Reserved
	
	**********************************************************************
*/

#include <Reflective.idl>
#include <CorbaIdlTypes.idl>
#include <PrimitiveTypes.idl>

#pragma prefix ""

#ifndef _MDE_0_idl_
#define _MDE_0_idl_

module MDE
{
	module Deployment
	{
		interface NodeManagerClass;
		typedef sequence < NodeManagerClass >  NodeManagerClassUList;
		
		typedef sequence < NodeManagerClass >  NodeManagerClassList;
		
		typedef sequence < NodeManagerClass >  NodeManagerClassBag;
		
		typedef sequence < NodeManagerClass >  NodeManagerClassSet;
		
		interface NodeManager;
		typedef sequence < NodeManager >  NodeManagerUList;
		
		typedef sequence < NodeManager >  NodeManagerList;
		
		typedef sequence < NodeManager >  NodeManagerBag;
		
		typedef sequence < NodeManager >  NodeManagerSet;
		
		interface RunningInstance;
		typedef sequence < RunningInstance >  RunningInstanceSet;
		

/* 
class proxy::MDE::Deployment::RunningInstance
*/
		interface RunningInstanceClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::RunningInstanceSet all_of_type_running_instance;
		};

		interface Validation;
		typedef sequence < Validation >  ValidationSet;
		

/* 
class proxy::MDE::Deployment::Validation
*/
		interface ValidationClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::ValidationSet all_of_type_validation;
			readonly attribute MDE::Deployment::ValidationSet all_of_class_validation;
			MDE::Deployment::Validation create_validation ( 
				in boolean valid) raises ( 
					Reflective::MofError);
		};


/* 
class proxy::MDE::Deployment::NodeManager
*/
		interface NodeManagerClass
			: RunningInstanceClass,
			  ValidationClass
		{
			readonly attribute MDE::Deployment::NodeManagerSet all_of_type_node_manager;
			readonly attribute MDE::Deployment::NodeManagerSet all_of_class_node_manager;
			MDE::Deployment::NodeManager create_node_manager ( 
				in string ref,
				in string id,
				in boolean valid) raises ( 
					Reflective::MofError);

/* 
::MDE::Deployment::NodeManager::get_nodeRef
*/
			string get_node_ref ( 
				in string name);

/* 
::MDE::Deployment::NodeManager::lookup
*/
			MDE::Deployment::NodeManager lookup ( 
				in string name);
		};


/* 
::MDE::Deployment::RunningInstance
*/
		interface RunningInstance
			: RunningInstanceClass
		{
			string ref ( ) raises ( 
					Reflective::MofError);
			void set_ref ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string id ( ) raises ( 
					Reflective::MofError);
			void set_id ( 
				in string new_value) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::Validation
*/
		interface Validation
			: ValidationClass
		{
			boolean valid ( ) raises ( 
					Reflective::MofError);
			void set_valid ( 
				in boolean new_value) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::NodeManager
*/
		interface NodeManager
			: NodeManagerClass,
			  RunningInstance,
			  Validation
		{
		};

		interface DCIManagerClass;
		typedef sequence < DCIManagerClass >  DCIManagerClassUList;
		
		typedef sequence < DCIManagerClass >  DCIManagerClassList;
		
		typedef sequence < DCIManagerClass >  DCIManagerClassBag;
		
		typedef sequence < DCIManagerClass >  DCIManagerClassSet;
		
		interface DCIManager;
		typedef sequence < DCIManager >  DCIManagerUList;
		
		typedef sequence < DCIManager >  DCIManagerList;
		
		typedef sequence < DCIManager >  DCIManagerBag;
		
		typedef sequence < DCIManager >  DCIManagerSet;
		

/* 
class proxy::MDE::Deployment::DCIManager
*/
		interface DCIManagerClass
			: RunningInstanceClass
		{
			readonly attribute MDE::Deployment::DCIManagerSet all_of_type_dcimanager;
			readonly attribute MDE::Deployment::DCIManagerSet all_of_class_dcimanager;
			MDE::Deployment::DCIManager create_dcimanager ( 
				in string ref,
				in string id) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::DCIManager
*/
		interface DCIManager
			: DCIManagerClass,
			  RunningInstance
		{
		};

		interface ComponentInstanceClass;
		typedef sequence < ComponentInstanceClass >  ComponentInstanceClassUList;
		
		typedef sequence < ComponentInstanceClass >  ComponentInstanceClassList;
		
		typedef sequence < ComponentInstanceClass >  ComponentInstanceClassBag;
		
		typedef sequence < ComponentInstanceClass >  ComponentInstanceClassSet;
		
		interface ComponentInstance;
		typedef sequence < ComponentInstance >  ComponentInstanceUList;
		
		typedef sequence < ComponentInstance >  ComponentInstanceList;
		
		typedef sequence < ComponentInstance >  ComponentInstanceBag;
		
		typedef sequence < ComponentInstance >  ComponentInstanceSet;
		
		interface ComponentInstantiation;

/* 
class proxy::MDE::Deployment::ComponentInstance
*/
		interface ComponentInstanceClass
			: RunningInstanceClass
		{
			readonly attribute MDE::Deployment::ComponentInstanceSet all_of_type_component_instance;
			readonly attribute MDE::Deployment::ComponentInstanceSet all_of_class_component_instance;
			MDE::Deployment::ComponentInstance create_component_instance ( 
				in string ref,
				in string id) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::ComponentInstance
*/
		interface ComponentInstance
			: ComponentInstanceClass,
			  RunningInstance
		{
			MDE::Deployment::ComponentInstantiation instantiation ( ) raises ( 
					Reflective::NotSet,
					Reflective::MofError);
			void set_instantiation ( 
				in MDE::Deployment::ComponentInstantiation new_value) raises ( 
					Reflective::MofError);
			void unset_instantiation ( ) raises ( 
					Reflective::MofError);
		};

		interface HomeInstanceClass;
		typedef sequence < HomeInstanceClass >  HomeInstanceClassUList;
		
		typedef sequence < HomeInstanceClass >  HomeInstanceClassList;
		
		typedef sequence < HomeInstanceClass >  HomeInstanceClassBag;
		
		typedef sequence < HomeInstanceClass >  HomeInstanceClassSet;
		
		interface HomeInstance;
		typedef sequence < HomeInstance >  HomeInstanceUList;
		
		typedef sequence < HomeInstance >  HomeInstanceList;
		
		typedef sequence < HomeInstance >  HomeInstanceBag;
		
		typedef sequence < HomeInstance >  HomeInstanceSet;
		
		interface HomeInstantiation;

/* 
class proxy::MDE::Deployment::HomeInstance
*/
		interface HomeInstanceClass
			: RunningInstanceClass
		{
			readonly attribute MDE::Deployment::HomeInstanceSet all_of_type_home_instance;
			readonly attribute MDE::Deployment::HomeInstanceSet all_of_class_home_instance;
			MDE::Deployment::HomeInstance create_home_instance ( 
				in string ref,
				in string id,
				in string container_ref) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::HomeInstance
*/
		interface HomeInstance
			: HomeInstanceClass,
			  RunningInstance
		{
			string container_ref ( ) raises ( 
					Reflective::MofError);
			void set_container_ref ( 
				in string new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::HomeInstantiation instantiation ( ) raises ( 
					Reflective::NotSet,
					Reflective::MofError);
			void set_instantiation ( 
				in MDE::Deployment::HomeInstantiation new_value) raises ( 
					Reflective::MofError);
			void unset_instantiation ( ) raises ( 
					Reflective::MofError);
			MDE::Deployment::ComponentInstanceSet comp ( ) raises ( 
					Reflective::MofError);
			void set_comp ( 
				in MDE::Deployment::ComponentInstanceSet new_value) raises ( 
					Reflective::MofError);
			void add_comp ( 
				in MDE::Deployment::ComponentInstance new_element) raises ( 
					Reflective::MofError);
			void modify_comp ( 
				in MDE::Deployment::ComponentInstance old_element,
				in MDE::Deployment::ComponentInstance new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_comp ( 
				in MDE::Deployment::ComponentInstance old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		interface ProcessCollocationInstanceClass;
		typedef sequence < ProcessCollocationInstanceClass >  ProcessCollocationInstanceClassUList;
		
		typedef sequence < ProcessCollocationInstanceClass >  ProcessCollocationInstanceClassList;
		
		typedef sequence < ProcessCollocationInstanceClass >  ProcessCollocationInstanceClassBag;
		
		typedef sequence < ProcessCollocationInstanceClass >  ProcessCollocationInstanceClassSet;
		
		interface ProcessCollocationInstance;
		typedef sequence < ProcessCollocationInstance >  ProcessCollocationInstanceUList;
		
		typedef sequence < ProcessCollocationInstance >  ProcessCollocationInstanceList;
		
		typedef sequence < ProcessCollocationInstance >  ProcessCollocationInstanceBag;
		
		typedef sequence < ProcessCollocationInstance >  ProcessCollocationInstanceSet;
		

/* 
class proxy::MDE::Deployment::ProcessCollocationInstance
*/
		interface ProcessCollocationInstanceClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::ProcessCollocationInstanceSet all_of_type_process_collocation_instance;
			readonly attribute MDE::Deployment::ProcessCollocationInstanceSet all_of_class_process_collocation_instance;
			MDE::Deployment::ProcessCollocationInstance create_process_collocation_instance ( 
				in string server_ref) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::ProcessCollocationInstance
*/
		interface ProcessCollocationInstance
			: ProcessCollocationInstanceClass
		{
			string server_ref ( ) raises ( 
					Reflective::MofError);
			void set_server_ref ( 
				in string new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::HomeInstanceSet thehome ( ) raises ( 
					Reflective::MofError);
			void set_thehome ( 
				in MDE::Deployment::HomeInstanceSet new_value) raises ( 
					Reflective::MofError);
			void add_thehome ( 
				in MDE::Deployment::HomeInstance new_element) raises ( 
					Reflective::MofError);
			void modify_thehome ( 
				in MDE::Deployment::HomeInstance old_element,
				in MDE::Deployment::HomeInstance new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_thehome ( 
				in MDE::Deployment::HomeInstance old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		interface AssemblyInstanceClass;
		typedef sequence < AssemblyInstanceClass >  AssemblyInstanceClassUList;
		
		typedef sequence < AssemblyInstanceClass >  AssemblyInstanceClassList;
		
		typedef sequence < AssemblyInstanceClass >  AssemblyInstanceClassBag;
		
		typedef sequence < AssemblyInstanceClass >  AssemblyInstanceClassSet;
		
		interface AssemblyInstance;
		typedef sequence < AssemblyInstance >  AssemblyInstanceUList;
		
		typedef sequence < AssemblyInstance >  AssemblyInstanceList;
		
		typedef sequence < AssemblyInstance >  AssemblyInstanceBag;
		
		typedef sequence < AssemblyInstance >  AssemblyInstanceSet;
		
		interface Assembly;

/* 
class proxy::MDE::Deployment::AssemblyInstance
*/
		interface AssemblyInstanceClass
			: RunningInstanceClass,
			  ValidationClass
		{
			readonly attribute MDE::Deployment::AssemblyInstanceSet all_of_type_assembly_instance;
			readonly attribute MDE::Deployment::AssemblyInstanceSet all_of_class_assembly_instance;
			MDE::Deployment::AssemblyInstance create_assembly_instance ( 
				in string ref,
				in string id,
				in boolean valid) raises ( 
					Reflective::MofError);

/* 
::MDE::Deployment::AssemblyInstance::lookup
*/
			MDE::Deployment::AssemblyInstance lookup ( 
				in string id);
		};


/* 
::MDE::Deployment::AssemblyInstance
*/
		interface AssemblyInstance
			: AssemblyInstanceClass,
			  RunningInstance,
			  Validation
		{

/* 
::MDE::Deployment::AssemblyInstance::get_componentInstanceRef
*/
			string get_component_instance_ref ( 
				in string id);

/* 
::MDE::Deployment::AssemblyInstance::get_homeInstanceRef
*/
			string get_home_instance_ref ( 
				in string id);
			MDE::Deployment::Assembly ass ( ) raises ( 
					Reflective::MofError);
			void set_ass ( 
				in MDE::Deployment::Assembly new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::ProcessCollocationInstanceSet colloc ( ) raises ( 
					Reflective::MofError);
			void set_colloc ( 
				in MDE::Deployment::ProcessCollocationInstanceSet new_value) raises ( 
					Reflective::MofError);
			void add_colloc ( 
				in MDE::Deployment::ProcessCollocationInstance new_element) raises ( 
					Reflective::MofError);
			void modify_colloc ( 
				in MDE::Deployment::ProcessCollocationInstance old_element,
				in MDE::Deployment::ProcessCollocationInstance new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_colloc ( 
				in MDE::Deployment::ProcessCollocationInstance old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		typedef sequence < RunningInstanceClass >  RunningInstanceClassUList;
		
		typedef sequence < RunningInstanceClass >  RunningInstanceClassList;
		
		typedef sequence < RunningInstanceClass >  RunningInstanceClassBag;
		
		typedef sequence < RunningInstanceClass >  RunningInstanceClassSet;
		
		typedef sequence < RunningInstance >  RunningInstanceUList;
		
		typedef sequence < RunningInstance >  RunningInstanceList;
		
		typedef sequence < RunningInstance >  RunningInstanceBag;
		
		interface ProcessCollocationClass;
		typedef sequence < ProcessCollocationClass >  ProcessCollocationClassUList;
		
		typedef sequence < ProcessCollocationClass >  ProcessCollocationClassList;
		
		typedef sequence < ProcessCollocationClass >  ProcessCollocationClassBag;
		
		typedef sequence < ProcessCollocationClass >  ProcessCollocationClassSet;
		
		interface ProcessCollocation;
		typedef sequence < ProcessCollocation >  ProcessCollocationUList;
		
		typedef sequence < ProcessCollocation >  ProcessCollocationList;
		
		typedef sequence < ProcessCollocation >  ProcessCollocationBag;
		
		typedef sequence < ProcessCollocation >  ProcessCollocationSet;
		
		typedef sequence < HomeInstantiation >  HomeInstantiationSet;
		

/* 
class proxy::MDE::Deployment::ProcessCollocation
*/
		interface ProcessCollocationClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::ProcessCollocationSet all_of_type_process_collocation;
			readonly attribute MDE::Deployment::ProcessCollocationSet all_of_class_process_collocation;
			MDE::Deployment::ProcessCollocation create_process_collocation ( 
				in string destination,
				in unsigned long cardinality) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::ProcessCollocation
*/
		interface ProcessCollocation
			: ProcessCollocationClass
		{
			string destination ( ) raises ( 
					Reflective::MofError);
			void set_destination ( 
				in string new_value) raises ( 
					Reflective::MofError);
			unsigned long cardinality ( ) raises ( 
					Reflective::MofError);
			void set_cardinality ( 
				in unsigned long new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::HomeInstantiationSet thehome ( ) raises ( 
					Reflective::MofError);
			void set_thehome ( 
				in MDE::Deployment::HomeInstantiationSet new_value) raises ( 
					Reflective::MofError);
			void add_thehome ( 
				in MDE::Deployment::HomeInstantiation new_element) raises ( 
					Reflective::MofError);
			void modify_thehome ( 
				in MDE::Deployment::HomeInstantiation old_element,
				in MDE::Deployment::HomeInstantiation new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_thehome ( 
				in MDE::Deployment::HomeInstantiation old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		interface InstallationClass;
		typedef sequence < InstallationClass >  InstallationClassUList;
		
		typedef sequence < InstallationClass >  InstallationClassList;
		
		typedef sequence < InstallationClass >  InstallationClassBag;
		
		typedef sequence < InstallationClass >  InstallationClassSet;
		
		interface Installation;
		typedef sequence < Installation >  InstallationUList;
		
		typedef sequence < Installation >  InstallationList;
		
		typedef sequence < Installation >  InstallationBag;
		
		typedef sequence < Installation >  InstallationSet;
		
		interface DeploymentUnit;

/* 
class proxy::MDE::Deployment::Installation
*/
		interface InstallationClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::InstallationSet all_of_type_installation;
			readonly attribute MDE::Deployment::InstallationSet all_of_class_installation;
			MDE::Deployment::Installation create_installation ( 
				in CorbaIdlTypes::StringSet destinations) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::Installation
*/
		interface Installation
			: InstallationClass
		{
			CorbaIdlTypes::StringSet destinations ( ) raises ( 
					Reflective::MofError);
			void set_destinations ( 
				in CorbaIdlTypes::StringSet new_value) raises ( 
					Reflective::MofError);
			void add_destinations ( 
				in string new_element) raises ( 
					Reflective::MofError);
			void modify_destinations ( 
				in string old_element,
				in string new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_destinations ( 
				in string old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::DeploymentUnit impl ( ) raises ( 
					Reflective::MofError);
			void set_impl ( 
				in MDE::Deployment::DeploymentUnit new_value) raises ( 
					Reflective::MofError);
		};

		interface ExternalInstanceClass;
		typedef sequence < ExternalInstanceClass >  ExternalInstanceClassUList;
		
		typedef sequence < ExternalInstanceClass >  ExternalInstanceClassList;
		
		typedef sequence < ExternalInstanceClass >  ExternalInstanceClassBag;
		
		typedef sequence < ExternalInstanceClass >  ExternalInstanceClassSet;
		
		interface ExternalInstance;
		typedef sequence < ExternalInstance >  ExternalInstanceUList;
		
		typedef sequence < ExternalInstance >  ExternalInstanceList;
		
		typedef sequence < ExternalInstance >  ExternalInstanceBag;
		
		typedef sequence < ExternalInstance >  ExternalInstanceSet;
		
		interface FinderService;

/* 
class proxy::MDE::Deployment::ExternalInstance
*/
		interface ExternalInstanceClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::ExternalInstanceSet all_of_type_external_instance;
			readonly attribute MDE::Deployment::ExternalInstanceSet all_of_class_external_instance;
			MDE::Deployment::ExternalInstance create_external_instance ( 
				in MDE::Deployment::FinderService findby,
				in string objectref) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::ExternalInstance
*/
		interface ExternalInstance
			: ExternalInstanceClass
		{
			MDE::Deployment::FinderService findby ( ) raises ( 
					Reflective::NotSet,
					Reflective::MofError);
			void set_findby ( 
				in MDE::Deployment::FinderService new_value) raises ( 
					Reflective::MofError);
			void unset_findby ( ) raises ( 
					Reflective::MofError);
			string objectref ( ) raises ( 
					Reflective::NotSet,
					Reflective::MofError);
			void set_objectref ( 
				in string new_value) raises ( 
					Reflective::MofError);
			void unset_objectref ( ) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::ConnectionEndKind
*/
		enum ConnectionEndKind
			{
			COMPONENTINTERFACE,
			COMPONENTSUPPORTEDINTERFACE,
			HOMEINTERFACE,
			SIMPLEINTERFACE,
			EVENTPORT,
			EVENTCHANNELPORT
			};
		typedef sequence < ConnectionEndKind >  ConnectionEndKindUList;
		
		typedef sequence < ConnectionEndKind >  ConnectionEndKindList;
		
		typedef sequence < ConnectionEndKind >  ConnectionEndKindBag;
		
		typedef sequence < ConnectionEndKind >  ConnectionEndKindSet;
		
		interface ConnectionEndClass;
		typedef sequence < ConnectionEndClass >  ConnectionEndClassUList;
		
		typedef sequence < ConnectionEndClass >  ConnectionEndClassList;
		
		typedef sequence < ConnectionEndClass >  ConnectionEndClassBag;
		
		typedef sequence < ConnectionEndClass >  ConnectionEndClassSet;
		
		interface ConnectionEnd;
		typedef sequence < ConnectionEnd >  ConnectionEndUList;
		
		typedef sequence < ConnectionEnd >  ConnectionEndList;
		
		typedef sequence < ConnectionEnd >  ConnectionEndBag;
		
		typedef sequence < ConnectionEnd >  ConnectionEndSet;
		

/* 
class proxy::MDE::Deployment::ConnectionEnd
*/
		interface ConnectionEndClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::ConnectionEndSet all_of_type_connection_end;
			readonly attribute MDE::Deployment::ConnectionEndSet all_of_class_connection_end;
			MDE::Deployment::ConnectionEnd create_connection_end ( 
				in MDE::Deployment::ConnectionEndKind kind,
				in string name) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::ConnectionEnd
*/
		interface ConnectionEnd
			: ConnectionEndClass
		{
			MDE::Deployment::ConnectionEndKind kind ( ) raises ( 
					Reflective::MofError);
			void set_kind ( 
				in MDE::Deployment::ConnectionEndKind new_value) raises ( 
					Reflective::MofError);
			string name ( ) raises ( 
					Reflective::MofError);
			void set_name ( 
				in string new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::ComponentInstantiation int_comp_inst ( ) raises ( 
					Reflective::NotSet,
					Reflective::MofError);
			void set_int_comp_inst ( 
				in MDE::Deployment::ComponentInstantiation new_value) raises ( 
					Reflective::MofError);
			void unset_int_comp_inst ( ) raises ( 
					Reflective::MofError);
			MDE::Deployment::ExternalInstance ext_inst ( ) raises ( 
					Reflective::NotSet,
					Reflective::MofError);
			void set_ext_inst ( 
				in MDE::Deployment::ExternalInstance new_value) raises ( 
					Reflective::MofError);
			void unset_ext_inst ( ) raises ( 
					Reflective::MofError);
			MDE::Deployment::HomeInstantiation int_home_inst ( ) raises ( 
					Reflective::NotSet,
					Reflective::MofError);
			void set_int_home_inst ( 
				in MDE::Deployment::HomeInstantiation new_value) raises ( 
					Reflective::MofError);
			void unset_int_home_inst ( ) raises ( 
					Reflective::MofError);
		};

		interface ConnectionClass;
		typedef sequence < ConnectionClass >  ConnectionClassUList;
		
		typedef sequence < ConnectionClass >  ConnectionClassList;
		
		typedef sequence < ConnectionClass >  ConnectionClassBag;
		
		typedef sequence < ConnectionClass >  ConnectionClassSet;
		
		interface Connection;
		typedef sequence < Connection >  ConnectionUList;
		
		typedef sequence < Connection >  ConnectionList;
		
		typedef sequence < Connection >  ConnectionBag;
		
		typedef sequence < Connection >  ConnectionSet;
		

/* 
class proxy::MDE::Deployment::Connection
*/
		interface ConnectionClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::ConnectionSet all_of_type_connection;
			readonly attribute MDE::Deployment::ConnectionSet all_of_class_connection;
			MDE::Deployment::Connection create_connection ( 
				in string name) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::Connection
*/
		interface Connection
			: ConnectionClass
		{
			string name ( ) raises ( 
					Reflective::MofError);
			void set_name ( 
				in string new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::ConnectionEnd target_end ( ) raises ( 
					Reflective::MofError);
			void set_target_end ( 
				in MDE::Deployment::ConnectionEnd new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::ConnectionEnd source_end ( ) raises ( 
					Reflective::MofError);
			void set_source_end ( 
				in MDE::Deployment::ConnectionEnd new_value) raises ( 
					Reflective::MofError);
		};

		interface ConfigurationClass;
		typedef sequence < ConfigurationClass >  ConfigurationClassUList;
		
		typedef sequence < ConfigurationClass >  ConfigurationClassList;
		
		typedef sequence < ConfigurationClass >  ConfigurationClassBag;
		
		typedef sequence < ConfigurationClass >  ConfigurationClassSet;
		
		interface Configuration;
		typedef sequence < Configuration >  ConfigurationUList;
		
		typedef sequence < Configuration >  ConfigurationList;
		
		typedef sequence < Configuration >  ConfigurationBag;
		
		typedef sequence < Configuration >  ConfigurationSet;
		

/* 
class proxy::MDE::Deployment::Configuration
*/
		interface ConfigurationClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::ConfigurationSet all_of_type_configuration;
			readonly attribute MDE::Deployment::ConfigurationSet all_of_class_configuration;
			MDE::Deployment::Configuration create_configuration ( ) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::Configuration
*/
		interface Configuration
			: ConfigurationClass
		{
			MDE::Deployment::ConnectionSet conn ( ) raises ( 
					Reflective::MofError);
			void set_conn ( 
				in MDE::Deployment::ConnectionSet new_value) raises ( 
					Reflective::MofError);
			void add_conn ( 
				in MDE::Deployment::Connection new_element) raises ( 
					Reflective::MofError);
			void modify_conn ( 
				in MDE::Deployment::Connection old_element,
				in MDE::Deployment::Connection new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_conn ( 
				in MDE::Deployment::Connection old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::InstallationSet install_dest ( ) raises ( 
					Reflective::MofError);
			void set_install_dest ( 
				in MDE::Deployment::InstallationSet new_value) raises ( 
					Reflective::MofError);
			void add_install_dest ( 
				in MDE::Deployment::Installation new_element) raises ( 
					Reflective::MofError);
			void modify_install_dest ( 
				in MDE::Deployment::Installation old_element,
				in MDE::Deployment::Installation new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_install_dest ( 
				in MDE::Deployment::Installation old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::ProcessCollocationSet colloc ( ) raises ( 
					Reflective::MofError);
			void set_colloc ( 
				in MDE::Deployment::ProcessCollocationSet new_value) raises ( 
					Reflective::MofError);
			void add_colloc ( 
				in MDE::Deployment::ProcessCollocation new_element) raises ( 
					Reflective::MofError);
			void modify_colloc ( 
				in MDE::Deployment::ProcessCollocation old_element,
				in MDE::Deployment::ProcessCollocation new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_colloc ( 
				in MDE::Deployment::ProcessCollocation old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		interface FinderServiceClass;
		typedef sequence < FinderServiceClass >  FinderServiceClassUList;
		
		typedef sequence < FinderServiceClass >  FinderServiceClassList;
		
		typedef sequence < FinderServiceClass >  FinderServiceClassBag;
		
		typedef sequence < FinderServiceClass >  FinderServiceClassSet;
		
		typedef sequence < FinderService >  FinderServiceUList;
		
		typedef sequence < FinderService >  FinderServiceList;
		
		typedef sequence < FinderService >  FinderServiceBag;
		
		typedef sequence < FinderService >  FinderServiceSet;
		

/* 
::MDE::Deployment::FinderServiceKind
*/
		enum FinderServiceKind
			{
			NAMING,
			TRADING,
			HOMEFINDER
			};

/* 
class proxy::MDE::Deployment::FinderService
*/
		interface FinderServiceClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::FinderServiceSet all_of_type_finder_service;
			readonly attribute MDE::Deployment::FinderServiceSet all_of_class_finder_service;
			MDE::Deployment::FinderService create_finder_service ( 
				in MDE::Deployment::FinderServiceKind service,
				in string regname) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::FinderService
*/
		interface FinderService
			: FinderServiceClass
		{
			MDE::Deployment::FinderServiceKind service ( ) raises ( 
					Reflective::MofError);
			void set_service ( 
				in MDE::Deployment::FinderServiceKind new_value) raises ( 
					Reflective::MofError);
			string regname ( ) raises ( 
					Reflective::MofError);
			void set_regname ( 
				in string new_value) raises ( 
					Reflective::MofError);
		};

		interface HomeInstantiationClass;
		typedef sequence < HomeInstantiationClass >  HomeInstantiationClassUList;
		
		typedef sequence < HomeInstantiationClass >  HomeInstantiationClassList;
		
		typedef sequence < HomeInstantiationClass >  HomeInstantiationClassBag;
		
		typedef sequence < HomeInstantiationClass >  HomeInstantiationClassSet;
		
		typedef sequence < HomeInstantiation >  HomeInstantiationUList;
		
		typedef sequence < HomeInstantiation >  HomeInstantiationList;
		
		typedef sequence < HomeInstantiation >  HomeInstantiationBag;
		
		typedef sequence < ComponentInstantiation >  ComponentInstantiationSet;
		
		interface Property;
		typedef sequence < Property >  PropertySet;
		
		interface PropOwner;
		typedef sequence < PropOwner >  PropOwnerSet;
		

/* 
class proxy::MDE::Deployment::PropOwner
*/
		interface PropOwnerClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::PropOwnerSet all_of_type_prop_owner;
		};

		interface RuleOwner;
		typedef sequence < RuleOwner >  RuleOwnerSet;
		

/* 
class proxy::MDE::Deployment::RuleOwner
*/
		interface RuleOwnerClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::RuleOwnerSet all_of_type_rule_owner;
			readonly attribute MDE::Deployment::RuleOwnerSet all_of_class_rule_owner;
			MDE::Deployment::RuleOwner create_rule_owner ( ) raises ( 
					Reflective::MofError);
		};


/* 
class proxy::MDE::Deployment::HomeInstantiation
*/
		interface HomeInstantiationClass
			: PropOwnerClass,
			  RuleOwnerClass
		{
			readonly attribute MDE::Deployment::HomeInstantiationSet all_of_type_home_instantiation;
			readonly attribute MDE::Deployment::HomeInstantiationSet all_of_class_home_instantiation;
			MDE::Deployment::HomeInstantiation create_home_instantiation ( 
				in string name,
				in string destination,
				in unsigned long cardinality,
				in MDE::Deployment::FinderServiceBag registerwith) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::PropOwner
*/
		interface PropOwner
			: PropOwnerClass
		{
			MDE::Deployment::PropertySet prop ( ) raises ( 
					Reflective::MofError);
			void set_prop ( 
				in MDE::Deployment::PropertySet new_value) raises ( 
					Reflective::MofError);
			void add_prop ( 
				in MDE::Deployment::Property new_element) raises ( 
					Reflective::MofError);
			void modify_prop ( 
				in MDE::Deployment::Property old_element,
				in MDE::Deployment::Property new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_prop ( 
				in MDE::Deployment::Property old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		interface Rule;
		typedef sequence < Rule >  RuleSet;
		

/* 
::MDE::Deployment::RuleOwner
*/
		interface RuleOwner
			: RuleOwnerClass
		{
			MDE::Deployment::RuleSet the_rule ( ) raises ( 
					Reflective::MofError);
			void set_the_rule ( 
				in MDE::Deployment::RuleSet new_value) raises ( 
					Reflective::MofError);
			void add_the_rule ( 
				in MDE::Deployment::Rule new_element) raises ( 
					Reflective::MofError);
			void modify_the_rule ( 
				in MDE::Deployment::Rule old_element,
				in MDE::Deployment::Rule new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_the_rule ( 
				in MDE::Deployment::Rule old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};


/* 
::MDE::Deployment::HomeInstantiation
*/
		interface HomeInstantiation
			: HomeInstantiationClass,
			  PropOwner,
			  RuleOwner
		{
			string name ( ) raises ( 
					Reflective::MofError);
			void set_name ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string destination ( ) raises ( 
					Reflective::MofError);
			void set_destination ( 
				in string new_value) raises ( 
					Reflective::MofError);
			unsigned long cardinality ( ) raises ( 
					Reflective::MofError);
			void set_cardinality ( 
				in unsigned long new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::FinderServiceBag registerwith ( ) raises ( 
					Reflective::MofError);
			void set_registerwith ( 
				in MDE::Deployment::FinderServiceBag new_value) raises ( 
					Reflective::MofError);
			void add_registerwith ( 
				in MDE::Deployment::FinderService new_element) raises ( 
					Reflective::MofError);
			void modify_registerwith ( 
				in MDE::Deployment::FinderService old_element,
				in MDE::Deployment::FinderService new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_registerwith ( 
				in MDE::Deployment::FinderService old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::DeploymentUnit unit ( ) raises ( 
					Reflective::MofError);
			void set_unit ( 
				in MDE::Deployment::DeploymentUnit new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::ComponentInstantiationSet comp ( ) raises ( 
					Reflective::MofError);
			void set_comp ( 
				in MDE::Deployment::ComponentInstantiationSet new_value) raises ( 
					Reflective::MofError);
			void add_comp ( 
				in MDE::Deployment::ComponentInstantiation new_element) raises ( 
					Reflective::MofError);
			void modify_comp ( 
				in MDE::Deployment::ComponentInstantiation old_element,
				in MDE::Deployment::ComponentInstantiation new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_comp ( 
				in MDE::Deployment::ComponentInstantiation old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::PropertySet comp_default_prop ( ) raises ( 
					Reflective::MofError);
			void set_comp_default_prop ( 
				in MDE::Deployment::PropertySet new_value) raises ( 
					Reflective::MofError);
			void add_comp_default_prop ( 
				in MDE::Deployment::Property new_element) raises ( 
					Reflective::MofError);
			void modify_comp_default_prop ( 
				in MDE::Deployment::Property old_element,
				in MDE::Deployment::Property new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_comp_default_prop ( 
				in MDE::Deployment::Property old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		typedef sequence < FinderServiceKind >  FinderServiceKindUList;
		
		typedef sequence < FinderServiceKind >  FinderServiceKindList;
		
		typedef sequence < FinderServiceKind >  FinderServiceKindBag;
		
		typedef sequence < FinderServiceKind >  FinderServiceKindSet;
		
		interface RegisterComponentInstanceClass;
		typedef sequence < RegisterComponentInstanceClass >  RegisterComponentInstanceClassUList;
		
		typedef sequence < RegisterComponentInstanceClass >  RegisterComponentInstanceClassList;
		
		typedef sequence < RegisterComponentInstanceClass >  RegisterComponentInstanceClassBag;
		
		typedef sequence < RegisterComponentInstanceClass >  RegisterComponentInstanceClassSet;
		
		interface RegisterComponentInstance;
		typedef sequence < RegisterComponentInstance >  RegisterComponentInstanceUList;
		
		typedef sequence < RegisterComponentInstance >  RegisterComponentInstanceList;
		
		typedef sequence < RegisterComponentInstance >  RegisterComponentInstanceBag;
		
		typedef sequence < RegisterComponentInstance >  RegisterComponentInstanceSet;
		

/* 
class proxy::MDE::Deployment::RegisterComponentInstance
*/
		interface RegisterComponentInstanceClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::RegisterComponentInstanceSet all_of_type_register_component_instance;
			readonly attribute MDE::Deployment::RegisterComponentInstanceSet all_of_class_register_component_instance;
			MDE::Deployment::RegisterComponentInstance create_register_component_instance ( 
				in MDE::Deployment::FinderServiceKind service,
				in string regname) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::RegisterComponentInstance
*/
		interface RegisterComponentInstance
			: RegisterComponentInstanceClass
		{
			MDE::Deployment::FinderServiceKind service ( ) raises ( 
					Reflective::MofError);
			void set_service ( 
				in MDE::Deployment::FinderServiceKind new_value) raises ( 
					Reflective::MofError);
			string regname ( ) raises ( 
					Reflective::MofError);
			void set_regname ( 
				in string new_value) raises ( 
					Reflective::MofError);
		};

		interface ComponentInstantiationClass;
		typedef sequence < ComponentInstantiationClass >  ComponentInstantiationClassUList;
		
		typedef sequence < ComponentInstantiationClass >  ComponentInstantiationClassList;
		
		typedef sequence < ComponentInstantiationClass >  ComponentInstantiationClassBag;
		
		typedef sequence < ComponentInstantiationClass >  ComponentInstantiationClassSet;
		
		typedef sequence < ComponentInstantiation >  ComponentInstantiationUList;
		
		typedef sequence < ComponentInstantiation >  ComponentInstantiationList;
		
		typedef sequence < ComponentInstantiation >  ComponentInstantiationBag;
		

/* 
class proxy::MDE::Deployment::ComponentInstantiation
*/
		interface ComponentInstantiationClass
			: PropOwnerClass,
			  RuleOwnerClass
		{
			readonly attribute MDE::Deployment::ComponentInstantiationSet all_of_type_component_instantiation;
			readonly attribute MDE::Deployment::ComponentInstantiationSet all_of_class_component_instantiation;
			MDE::Deployment::ComponentInstantiation create_component_instantiation ( 
				in string name,
				in unsigned long cardinality,
				in unsigned long startorder) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::ComponentInstantiation
*/
		interface ComponentInstantiation
			: ComponentInstantiationClass,
			  PropOwner,
			  RuleOwner
		{
			string name ( ) raises ( 
					Reflective::MofError);
			void set_name ( 
				in string new_value) raises ( 
					Reflective::MofError);
			unsigned long cardinality ( ) raises ( 
					Reflective::MofError);
			void set_cardinality ( 
				in unsigned long new_value) raises ( 
					Reflective::MofError);
			unsigned long startorder ( ) raises ( 
					Reflective::MofError);
			void set_startorder ( 
				in unsigned long new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::RegisterComponentInstanceSet registration ( ) raises ( 
					Reflective::MofError);
			void set_registration ( 
				in MDE::Deployment::RegisterComponentInstanceSet new_value) raises ( 
					Reflective::MofError);
			void add_registration ( 
				in MDE::Deployment::RegisterComponentInstance new_element) raises ( 
					Reflective::MofError);
			void modify_registration ( 
				in MDE::Deployment::RegisterComponentInstance old_element,
				in MDE::Deployment::RegisterComponentInstance new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_registration ( 
				in MDE::Deployment::RegisterComponentInstance old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::PropertySet conf_prop ( ) raises ( 
					Reflective::MofError);
			void set_conf_prop ( 
				in MDE::Deployment::PropertySet new_value) raises ( 
					Reflective::MofError);
			void add_conf_prop ( 
				in MDE::Deployment::Property new_element) raises ( 
					Reflective::MofError);
			void modify_conf_prop ( 
				in MDE::Deployment::Property old_element,
				in MDE::Deployment::Property new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_conf_prop ( 
				in MDE::Deployment::Property old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		interface AssemblyClass;
		typedef sequence < AssemblyClass >  AssemblyClassUList;
		
		typedef sequence < AssemblyClass >  AssemblyClassList;
		
		typedef sequence < AssemblyClass >  AssemblyClassBag;
		
		typedef sequence < AssemblyClass >  AssemblyClassSet;
		
		typedef sequence < Assembly >  AssemblyUList;
		
		typedef sequence < Assembly >  AssemblyList;
		
		typedef sequence < Assembly >  AssemblyBag;
		
		typedef sequence < Assembly >  AssemblySet;
		
		typedef sequence < DeploymentUnit >  DeploymentUnitSet;
		

/* 
class proxy::MDE::Deployment::Assembly
*/
		interface AssemblyClass
			: RuleOwnerClass,
			  ValidationClass
		{
			readonly attribute MDE::Deployment::AssemblySet all_of_type_assembly;
			readonly attribute MDE::Deployment::AssemblySet all_of_class_assembly;
			MDE::Deployment::Assembly create_assembly ( 
				in boolean valid,
				in string uuid,
				in string descriptor) raises ( 
					Reflective::MofError);

/* 
::MDE::Deployment::Assembly::lookup
*/
			MDE::Deployment::Assembly lookup ( 
				in string uuid);
		};


/* 
::MDE::Deployment::Assembly
*/
		interface Assembly
			: AssemblyClass,
			  RuleOwner,
			  Validation
		{
			string uuid ( ) raises ( 
					Reflective::MofError);
			void set_uuid ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string descriptor ( ) raises ( 
					Reflective::MofError);
			void set_descriptor ( 
				in string new_value) raises ( 
					Reflective::MofError);

/* 
::MDE::Deployment::Assembly::lookup_componentInstantiation
*/
			MDE::Deployment::ComponentInstantiation lookup_component_instantiation ( 
				in string name);

/* 
::MDE::Deployment::Assembly::lookup_homeInstantiation
*/
			MDE::Deployment::HomeInstantiation lookup_home_instantiation ( 
				in string name);

/* 
::MDE::Deployment::Assembly::get_componentInstanceRef
*/
			string get_component_instance_ref ( 
				in string id);

/* 
::MDE::Deployment::Assembly::get_homeInstanceRef
*/
			string get_home_instance_ref ( 
				in string id);
			MDE::Deployment::DeploymentUnitSet impl ( ) raises ( 
					Reflective::MofError);
			void set_impl ( 
				in MDE::Deployment::DeploymentUnitSet new_value) raises ( 
					Reflective::MofError);
			void add_impl ( 
				in MDE::Deployment::DeploymentUnit new_element) raises ( 
					Reflective::MofError);
			void modify_impl ( 
				in MDE::Deployment::DeploymentUnit old_element,
				in MDE::Deployment::DeploymentUnit new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_impl ( 
				in MDE::Deployment::DeploymentUnit old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::Configuration config ( ) raises ( 
					Reflective::NotSet,
					Reflective::MofError);
			void set_config ( 
				in MDE::Deployment::Configuration new_value) raises ( 
					Reflective::MofError);
			void unset_config ( ) raises ( 
					Reflective::MofError);
			MDE::Deployment::RuleSet rule ( ) raises ( 
					Reflective::MofError);
			void set_rule ( 
				in MDE::Deployment::RuleSet new_value) raises ( 
					Reflective::MofError);
			void add_rule ( 
				in MDE::Deployment::Rule new_element) raises ( 
					Reflective::MofError);
			void modify_rule ( 
				in MDE::Deployment::Rule old_element,
				in MDE::Deployment::Rule new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_rule ( 
				in MDE::Deployment::Rule old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::AssemblyInstanceSet ass_inst ( ) raises ( 
					Reflective::MofError);
			void set_ass_inst ( 
				in MDE::Deployment::AssemblyInstanceSet new_value) raises ( 
					Reflective::MofError);
			void add_ass_inst ( 
				in MDE::Deployment::AssemblyInstance new_element) raises ( 
					Reflective::MofError);
			void modify_ass_inst ( 
				in MDE::Deployment::AssemblyInstance old_element,
				in MDE::Deployment::AssemblyInstance new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_ass_inst ( 
				in MDE::Deployment::AssemblyInstance old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		interface RuleClass;
		typedef sequence < RuleClass >  RuleClassUList;
		
		typedef sequence < RuleClass >  RuleClassList;
		
		typedef sequence < RuleClass >  RuleClassBag;
		
		typedef sequence < RuleClass >  RuleClassSet;
		
		typedef sequence < Rule >  RuleUList;
		
		typedef sequence < Rule >  RuleList;
		
		typedef sequence < Rule >  RuleBag;
		

/* 
class proxy::MDE::Deployment::Rule
*/
		interface RuleClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::RuleSet all_of_type_rule;
			readonly attribute MDE::Deployment::RuleSet all_of_class_rule;
			MDE::Deployment::Rule create_rule ( 
				in string name,
				in string condition,
				in string language,
				in string action) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::Rule
*/
		interface Rule
			: RuleClass
		{
			string name ( ) raises ( 
					Reflective::MofError);
			void set_name ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string condition ( ) raises ( 
					Reflective::MofError);
			void set_condition ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string language ( ) raises ( 
					Reflective::MofError);
			void set_language ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string action ( ) raises ( 
					Reflective::MofError);
			void set_action ( 
				in string new_value) raises ( 
					Reflective::MofError);
		};

		typedef sequence < RuleOwnerClass >  RuleOwnerClassUList;
		
		typedef sequence < RuleOwnerClass >  RuleOwnerClassList;
		
		typedef sequence < RuleOwnerClass >  RuleOwnerClassBag;
		
		typedef sequence < RuleOwnerClass >  RuleOwnerClassSet;
		
		typedef sequence < RuleOwner >  RuleOwnerUList;
		
		typedef sequence < RuleOwner >  RuleOwnerList;
		
		typedef sequence < RuleOwner >  RuleOwnerBag;
		
		interface ContainedFileClass;
		typedef sequence < ContainedFileClass >  ContainedFileClassUList;
		
		typedef sequence < ContainedFileClass >  ContainedFileClassList;
		
		typedef sequence < ContainedFileClass >  ContainedFileClassBag;
		
		typedef sequence < ContainedFileClass >  ContainedFileClassSet;
		
		interface ContainedFile;
		typedef sequence < ContainedFile >  ContainedFileUList;
		
		typedef sequence < ContainedFile >  ContainedFileList;
		
		typedef sequence < ContainedFile >  ContainedFileBag;
		
		typedef sequence < ContainedFile >  ContainedFileSet;
		
		interface File;
		typedef sequence < File >  FileSet;
		

/* 
class proxy::MDE::Deployment::File
*/
		interface FileClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::FileSet all_of_type_file;
		};


/* 
class proxy::MDE::Deployment::ContainedFile
*/
		interface ContainedFileClass
			: FileClass
		{
			readonly attribute MDE::Deployment::ContainedFileSet all_of_type_contained_file;
			readonly attribute MDE::Deployment::ContainedFileSet all_of_class_contained_file;
			MDE::Deployment::ContainedFile create_contained_file ( 
				in string filename,
				in string location,
				in unsigned long filesize,
				in string signaturedata,
				in string securityalgorithm,
				in string codetype,
				in string entrypoint,
				in string entrypointusage) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::File
*/
		interface File
			: FileClass
		{
			string filename ( ) raises ( 
					Reflective::MofError);
			void set_filename ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string location ( ) raises ( 
					Reflective::MofError);
			void set_location ( 
				in string new_value) raises ( 
					Reflective::MofError);
			unsigned long filesize ( ) raises ( 
					Reflective::MofError);
			void set_filesize ( 
				in unsigned long new_value) raises ( 
					Reflective::MofError);
			string signaturedata ( ) raises ( 
					Reflective::MofError);
			void set_signaturedata ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string securityalgorithm ( ) raises ( 
					Reflective::MofError);
			void set_securityalgorithm ( 
				in string new_value) raises ( 
					Reflective::MofError);

/* 
::MDE::Deployment::File::get_file
*/
			CorbaIdlTypes::OctetList get_file ( );

/* 
::MDE::Deployment::File::save_file
*/
			void save_file ( 
				in CorbaIdlTypes::OctetList file);
		};


/* 
::MDE::Deployment::ContainedFile
*/
		interface ContainedFile
			: ContainedFileClass,
			  File
		{
			string codetype ( ) raises ( 
					Reflective::MofError);
			void set_codetype ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string entrypoint ( ) raises ( 
					Reflective::MofError);
			void set_entrypoint ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string entrypointusage ( ) raises ( 
					Reflective::MofError);
			void set_entrypointusage ( 
				in string new_value) raises ( 
					Reflective::MofError);
		};

		interface DeploymentRequirementClass;
		typedef sequence < DeploymentRequirementClass >  DeploymentRequirementClassUList;
		
		typedef sequence < DeploymentRequirementClass >  DeploymentRequirementClassList;
		
		typedef sequence < DeploymentRequirementClass >  DeploymentRequirementClassBag;
		
		typedef sequence < DeploymentRequirementClass >  DeploymentRequirementClassSet;
		
		interface DeploymentRequirement;
		typedef sequence < DeploymentRequirement >  DeploymentRequirementUList;
		
		typedef sequence < DeploymentRequirement >  DeploymentRequirementList;
		
		typedef sequence < DeploymentRequirement >  DeploymentRequirementBag;
		
		typedef sequence < DeploymentRequirement >  DeploymentRequirementSet;
		

/* 
class proxy::MDE::Deployment::DeploymentRequirement
*/
		interface DeploymentRequirementClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::DeploymentRequirementSet all_of_type_deployment_requirement;
			readonly attribute MDE::Deployment::DeploymentRequirementSet all_of_class_deployment_requirement;
			MDE::Deployment::DeploymentRequirement create_deployment_requirement ( 
				in string name,
				in string version,
				in string kind) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::DeploymentRequirement
*/
		interface DeploymentRequirement
			: DeploymentRequirementClass
		{
			string name ( ) raises ( 
					Reflective::MofError);
			void set_name ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string version ( ) raises ( 
					Reflective::MofError);
			void set_version ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string kind ( ) raises ( 
					Reflective::MofError);
			void set_kind ( 
				in string new_value) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::ActionKind
*/
		enum ActionKind
			{
			INSTALL,
			ASSERT
			};
		typedef sequence < ActionKind >  ActionKindUList;
		
		typedef sequence < ActionKind >  ActionKindList;
		
		typedef sequence < ActionKind >  ActionKindBag;
		
		typedef sequence < ActionKind >  ActionKindSet;
		
		interface DependentFileClass;
		typedef sequence < DependentFileClass >  DependentFileClassUList;
		
		typedef sequence < DependentFileClass >  DependentFileClassList;
		
		typedef sequence < DependentFileClass >  DependentFileClassBag;
		
		typedef sequence < DependentFileClass >  DependentFileClassSet;
		
		interface DependentFile;
		typedef sequence < DependentFile >  DependentFileUList;
		
		typedef sequence < DependentFile >  DependentFileList;
		
		typedef sequence < DependentFile >  DependentFileBag;
		
		typedef sequence < DependentFile >  DependentFileSet;
		

/* 
class proxy::MDE::Deployment::DependentFile
*/
		interface DependentFileClass
			: FileClass
		{
			readonly attribute MDE::Deployment::DependentFileSet all_of_type_dependent_file;
			readonly attribute MDE::Deployment::DependentFileSet all_of_class_dependent_file;
			MDE::Deployment::DependentFile create_dependent_file ( 
				in string filename,
				in string location,
				in unsigned long filesize,
				in string signaturedata,
				in string securityalgorithm,
				in MDE::Deployment::ActionKind action) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::DependentFile
*/
		interface DependentFile
			: DependentFileClass,
			  File
		{
			MDE::Deployment::ActionKind action ( ) raises ( 
					Reflective::MofError);
			void set_action ( 
				in MDE::Deployment::ActionKind new_value) raises ( 
					Reflective::MofError);
		};

		typedef sequence < FileClass >  FileClassUList;
		
		typedef sequence < FileClass >  FileClassList;
		
		typedef sequence < FileClass >  FileClassBag;
		
		typedef sequence < FileClass >  FileClassSet;
		
		typedef sequence < File >  FileUList;
		
		typedef sequence < File >  FileList;
		
		typedef sequence < File >  FileBag;
		
		interface DeploymentUnitClass;
		typedef sequence < DeploymentUnitClass >  DeploymentUnitClassUList;
		
		typedef sequence < DeploymentUnitClass >  DeploymentUnitClassList;
		
		typedef sequence < DeploymentUnitClass >  DeploymentUnitClassBag;
		
		typedef sequence < DeploymentUnitClass >  DeploymentUnitClassSet;
		
		typedef sequence < DeploymentUnit >  DeploymentUnitUList;
		
		typedef sequence < DeploymentUnit >  DeploymentUnitList;
		
		typedef sequence < DeploymentUnit >  DeploymentUnitBag;
		

/* 
class proxy::MDE::Deployment::DeploymentUnit
*/
		interface DeploymentUnitClass
			: PropOwnerClass,
			  ValidationClass
		{
			readonly attribute MDE::Deployment::DeploymentUnitSet all_of_type_deployment_unit;
			readonly attribute MDE::Deployment::DeploymentUnitSet all_of_class_deployment_unit;
			MDE::Deployment::DeploymentUnit create_deployment_unit ( 
				in boolean valid,
				in string uuid,
				in string softpkgversion,
				in string softpkgname,
				in string licensekey,
				in string licensetextref) raises ( 
					Reflective::MofError);

/* 
::MDE::Deployment::DeploymentUnit::lookup
*/
			MDE::Deployment::DeploymentUnit lookup ( 
				in string uuid);
		};


/* 
::MDE::Deployment::DeploymentUnit
*/
		interface DeploymentUnit
			: DeploymentUnitClass,
			  PropOwner,
			  Validation
		{
			string uuid ( ) raises ( 
					Reflective::MofError);
			void set_uuid ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string softpkgversion ( ) raises ( 
					Reflective::MofError);
			void set_softpkgversion ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string softpkgname ( ) raises ( 
					Reflective::MofError);
			void set_softpkgname ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string licensekey ( ) raises ( 
					Reflective::MofError);
			void set_licensekey ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string licensetextref ( ) raises ( 
					Reflective::MofError);
			void set_licensetextref ( 
				in string new_value) raises ( 
					Reflective::MofError);
			MDE::Deployment::DependentFileSet dependent_file ( ) raises ( 
					Reflective::MofError);
			void set_dependent_file ( 
				in MDE::Deployment::DependentFileSet new_value) raises ( 
					Reflective::MofError);
			void add_dependent_file ( 
				in MDE::Deployment::DependentFile new_element) raises ( 
					Reflective::MofError);
			void modify_dependent_file ( 
				in MDE::Deployment::DependentFile old_element,
				in MDE::Deployment::DependentFile new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_dependent_file ( 
				in MDE::Deployment::DependentFile old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::DeploymentRequirementSet req ( ) raises ( 
					Reflective::MofError);
			void set_req ( 
				in MDE::Deployment::DeploymentRequirementSet new_value) raises ( 
					Reflective::MofError);
			void add_req ( 
				in MDE::Deployment::DeploymentRequirement new_element) raises ( 
					Reflective::MofError);
			void modify_req ( 
				in MDE::Deployment::DeploymentRequirement old_element,
				in MDE::Deployment::DeploymentRequirement new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_req ( 
				in MDE::Deployment::DeploymentRequirement old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::ContainedFileSet contained_file ( ) raises ( 
					Reflective::MofError);
			void set_contained_file ( 
				in MDE::Deployment::ContainedFileSet new_value) raises ( 
					Reflective::MofError);
			void add_contained_file ( 
				in MDE::Deployment::ContainedFile new_element) raises ( 
					Reflective::MofError);
			void modify_contained_file ( 
				in MDE::Deployment::ContainedFile old_element,
				in MDE::Deployment::ContainedFile new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_contained_file ( 
				in MDE::Deployment::ContainedFile old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::Deployment::DeploymentUnitSet dependent_unit ( ) raises ( 
					Reflective::MofError);
			void set_dependent_unit ( 
				in MDE::Deployment::DeploymentUnitSet new_value) raises ( 
					Reflective::MofError);
			void add_dependent_unit ( 
				in MDE::Deployment::DeploymentUnit new_element) raises ( 
					Reflective::MofError);
			void modify_dependent_unit ( 
				in MDE::Deployment::DeploymentUnit old_element,
				in MDE::Deployment::DeploymentUnit new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_dependent_unit ( 
				in MDE::Deployment::DeploymentUnit old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		typedef sequence < ValidationClass >  ValidationClassUList;
		
		typedef sequence < ValidationClass >  ValidationClassList;
		
		typedef sequence < ValidationClass >  ValidationClassBag;
		
		typedef sequence < ValidationClass >  ValidationClassSet;
		
		typedef sequence < Validation >  ValidationUList;
		
		typedef sequence < Validation >  ValidationList;
		
		typedef sequence < Validation >  ValidationBag;
		
		interface PropertyClass;
		typedef sequence < PropertyClass >  PropertyClassUList;
		
		typedef sequence < PropertyClass >  PropertyClassList;
		
		typedef sequence < PropertyClass >  PropertyClassBag;
		
		typedef sequence < PropertyClass >  PropertyClassSet;
		
		typedef sequence < Property >  PropertyUList;
		
		typedef sequence < Property >  PropertyList;
		
		typedef sequence < Property >  PropertyBag;
		

/* 
class proxy::MDE::Deployment::Property
*/
		interface PropertyClass
			: Reflective::RefObject
		{
			readonly attribute MDE::Deployment::PropertySet all_of_type_property;
			readonly attribute MDE::Deployment::PropertySet all_of_class_property;
			MDE::Deployment::Property create_property ( 
				in string name,
				in string value,
				in string type) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::Deployment::Property
*/
		interface Property
			: PropertyClass
		{
			string name ( ) raises ( 
					Reflective::MofError);
			void set_name ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string value ( ) raises ( 
					Reflective::MofError);
			void set_value ( 
				in string new_value) raises ( 
					Reflective::MofError);
			string type ( ) raises ( 
					Reflective::MofError);
			void set_type ( 
				in string new_value) raises ( 
					Reflective::MofError);
		};

		typedef sequence < PropOwnerClass >  PropOwnerClassUList;
		
		typedef sequence < PropOwnerClass >  PropOwnerClassList;
		
		typedef sequence < PropOwnerClass >  PropOwnerClassBag;
		
		typedef sequence < PropOwnerClass >  PropOwnerClassSet;
		
		typedef sequence < PropOwner >  PropOwnerUList;
		
		typedef sequence < PropOwner >  PropOwnerList;
		
		typedef sequence < PropOwner >  PropOwnerBag;
		
		interface DeploymentPackage
			: Reflective::RefPackage
		{
			readonly attribute MDE::Deployment::PropOwnerClass prop_owner_ref;
			readonly attribute MDE::Deployment::PropertyClass property_ref;
			readonly attribute MDE::Deployment::ValidationClass validation_ref;
			readonly attribute MDE::Deployment::DeploymentUnitClass deployment_unit_ref;
			readonly attribute MDE::Deployment::FileClass file_ref;
			readonly attribute MDE::Deployment::DependentFileClass dependent_file_ref;
			readonly attribute MDE::Deployment::DeploymentRequirementClass deployment_requirement_ref;
			readonly attribute MDE::Deployment::ContainedFileClass contained_file_ref;
			readonly attribute MDE::Deployment::RuleOwnerClass rule_owner_ref;
			readonly attribute MDE::Deployment::RuleClass rule_ref;
			readonly attribute MDE::Deployment::AssemblyClass assembly_ref;
			readonly attribute MDE::Deployment::ComponentInstantiationClass component_instantiation_ref;
			readonly attribute MDE::Deployment::RegisterComponentInstanceClass register_component_instance_ref;
			readonly attribute MDE::Deployment::HomeInstantiationClass home_instantiation_ref;
			readonly attribute MDE::Deployment::FinderServiceClass finder_service_ref;
			readonly attribute MDE::Deployment::ConfigurationClass configuration_ref;
			readonly attribute MDE::Deployment::ConnectionClass connection_ref;
			readonly attribute MDE::Deployment::ConnectionEndClass connection_end_ref;
			readonly attribute MDE::Deployment::ExternalInstanceClass external_instance_ref;
			readonly attribute MDE::Deployment::InstallationClass installation_ref;
			readonly attribute MDE::Deployment::ProcessCollocationClass process_collocation_ref;
			readonly attribute MDE::Deployment::RunningInstanceClass running_instance_ref;
			readonly attribute MDE::Deployment::AssemblyInstanceClass assembly_instance_ref;
			readonly attribute MDE::Deployment::ProcessCollocationInstanceClass process_collocation_instance_ref;
			readonly attribute MDE::Deployment::HomeInstanceClass home_instance_ref;
			readonly attribute MDE::Deployment::ComponentInstanceClass component_instance_ref;
			readonly attribute MDE::Deployment::DCIManagerClass dcimanager_ref;
			readonly attribute MDE::Deployment::NodeManagerClass node_manager_ref;
		};

	}; // end module Deployment
}; // end module MDE
#endif