//
// generated by Qedo
//

#include "DCI_RepDCIManagerImpl.h"


// BEGIN USER INSERT SECTION file
// END USER INSERT SECTION file


namespace DCI {


// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl
MDE::Deployment::DeploymentPackage_ptr 
RepDCIManagerSessionImpl::get_rep_root() {

	if ( CORBA::is_nil ( context_ ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::repo_get_ass_class(): context_ nil!");
		throw CORBA::SystemException();
	}
	DCI::RepositoryDeploymentRoot_ptr repo = context_->get_connection_rep_root();
	if ( CORBA::is_nil ( repo ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::repo_get_ass_class(): connection_rep_root nil!");
		throw CORBA::SystemException();
	}
	CORBA::Object_ptr ptr;
	try {
		ptr = repo->get_root_package();
	}
	catch(...) {
		NORMAL_ERR("RepDCIManagerSessionImpl::repo_get_ass_class(): connection_rep_root nil!");
		throw CORBA::SystemException();
	}
    MDE::Deployment::DeploymentPackage_var deployment_pkg_ref;
	try {
		deployment_pkg_ref = MDE::Deployment::DeploymentPackage::_narrow(ptr);
	}
	catch(...) {
		NORMAL_ERR("RepDCIManagerSessionImpl::repo_get_ass_class(): connection_rep_root nil!");
		throw CORBA::SystemException();
	}
	if ( CORBA::is_nil ( deployment_pkg_ref ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::repo_get_ass_class(): deployment_pkg_ref nil!");
		throw CORBA::SystemException();
	}
	return deployment_pkg_ref._retn();
}

MDE::Deployment::Assembly_ptr
RepDCIManagerSessionImpl::get_assembly(const char* assemblyUUID) {
    
	DEBUG_OUT2("RepDCIManagerSessionImpl::get_assembly(): assemblyUUID=", assemblyUUID);
	//lookup Assembly in repository
	MDE::Deployment::AssemblyClass_var ass_ref = this->get_rep_root()->assembly_ref();
	if ( CORBA::is_nil ( ass_ref ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::get_assembly(): AssemblyClass reference nil!");
		throw CORBA::SystemException();
	}
	MDE::Deployment::Assembly_var ass = ass_ref->lookup(assemblyUUID);
	if ( CORBA::is_nil ( ass ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::get_assembly(): Assembly lookup failed!");
		throw CORBA::SystemException();
	}
	return ass._retn();
}


MDE::Deployment::AssemblyInstance_ptr
RepDCIManagerSessionImpl::get_assemblyInstance(const char* instance_id) {
	    
	DEBUG_OUT2("RepDCIManagerSessionImpl::get_assemblyInstance(): instance_id=", instance_id);
	//lookup AssemblyInstance in repository
	MDE::Deployment::AssemblyInstanceClass_var assinst_ref = this->get_rep_root()->assembly_instance_ref();
	if ( CORBA::is_nil ( assinst_ref ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::get_assemblyInstance(): AssemblyInstanceClass reference nil!");
		throw CORBA::SystemException();
	}
	MDE::Deployment::AssemblyInstance_var assinst = assinst_ref->lookup(instance_id);
	if ( CORBA::is_nil ( assinst ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::get_assemblyInstance(): AssemblyInstance lookup failed!");
		throw CORBA::SystemException();
	}
	return assinst._retn();
}


char*
RepDCIManagerSessionImpl::install(MDE::Deployment::Assembly_var ass){

	char * assUUID = ass->uuid();

	MDE::Deployment::Configuration_var cfg = ass->config();
	if ( CORBA::is_nil ( cfg ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::install_with_archive(): assembly reference nil!");
		throw CORBA::SystemException();
	}

	//install on nodes
	DEBUG_OUT( "RepDCIManagerSessionImpl::install_with_archive(): install on nodes...");
    MDE::Deployment::InstallationSet* inst_set =cfg->install_dest();
	for ( unsigned long inst_set_idx = 0; inst_set_idx < inst_set->length(); inst_set_idx++ ) {
		MDE::Deployment::DeploymentUnit_var depl = (*inst_set)[inst_set_idx]->impl();
		string deplUUID = depl->uuid();
		string location("RepRef=");
		location += orb_->object_to_string(depl);
		DEBUG_OUT( "-----------------------------------------------------------------------------------");
		DEBUG_OUT3( deplUUID, " ", location);

		// for all destinations:
		CorbaIdlTypes::StringSet* dests = (*inst_set)[inst_set_idx]->destinations();
		for ( unsigned long dests_idx = 0; dests_idx < dests->length(); dests_idx++ ) {
			string destination((*dests)[dests_idx]);
			DEBUG_OUT2( "   install on node=", destination);
			//get NodeManager
			DCI::NodeManager_var node_manager_;
			try {
				node_manager_ = this->get_node_manager(destination.c_str());
			}
			catch(...) {
				throw (Components::Deployment::InstallationFailure());
			}
			// get ExtComponentInstallation
			::DCI::ExtComponentInstallation_var ext_comp_install;
//			::DCI::NodeInformation_var node_information;
			CORBA::Object_var obj_nm_;
			obj_nm_ = node_manager_->provide_facet("component_installation");	
			ext_comp_install = ::DCI::ExtComponentInstallation::_narrow ( obj_nm_ );
			if (CORBA::is_nil(ext_comp_install))
			{
				NORMAL_ERR("RepDCIManagerSessionImpl::install_with_archive(): ext_comp_install reference nil!");
				throw (Components::Deployment::InstallationFailure());
			};

			//check non-rep-aware-nodemanager
			DCI::RepNodeManager_var rnm = DCI::RepNodeManager::_narrow(node_manager_);
			if (CORBA::is_nil(rnm)) { 
				//non-rep-nodemanager
				DEBUG_OUT("RepDCIManagerSessionImpl::install_with_archive(): NON-REP-AWARE-NODEMANAGER");
				try {
					DEBUG_OUT2("RepDCIManagerSessionImpl::install_with_archive(): try to install without upload uuid=", deplUUID);
					ext_comp_install->install(deplUUID.c_str(), "");
				}
				catch(...) {
					//get component archieve
					string pathname = mda_etc_var_+"\\repo-files\\"+deplUUID+".ZIP";
					DEBUG_OUT2("RepDCIManagerSessionImpl::install_with_archive(): get component package ", pathname);
					DCI::AssemblyArchive archive;
					::RepUtils::get_file(pathname.c_str(), &archive);
					DEBUG_OUT2("RepDCIManagerSessionImpl::install_with_archive(): upload software package with uuid=", deplUUID);
					char * nmlocation = ext_comp_install->upload(deplUUID.c_str(), archive);
					DEBUG_OUT2("RepDCIManagerSessionImpl::install_with_archive(): install with location=", nmlocation);
					ext_comp_install->install(deplUUID.c_str(), nmlocation);
				}
			}
			else
			try 
				{
					//install
					DEBUG_OUT3("RepDCIManagerSessionImpl::install_with_archive(): try to install uuid/location=", deplUUID, location);
					ext_comp_install->install(deplUUID.c_str(), location.c_str());
				}
				catch (::Components::Deployment::InstallationFailure&)
				{
					NORMAL_ERR2("RepDCIManagerSessionImpl::install_with_archive(): InstallationFailure on node", destination);
					throw (Components::Deployment::InstallationFailure());
				}
				catch (::Components::Deployment::InvalidLocation&)
				{
					NORMAL_ERR2("RepDCIManagerSessionImpl::install_with_archive(): InvalidLocation on node", destination);
					throw (Components::Deployment::InvalidLocation());
				}
				catch (...)
				{
					NORMAL_ERR2("RepDCIManagerSessionImpl::install_with_archive(): ERROR on node", destination);
					throw;
				}
		}
	}

	//Assembly is installed ("valid")
	ass->set_valid(true);

	return strdup(assUUID);
}
// END USER INSERT SECTION RepDCIManagerSessionImpl


RepDCIManagerSessionImpl::RepDCIManagerSessionImpl()
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::RepDCIManagerSessionImpl
// END USER INSERT SECTION RepDCIManagerSessionImpl::RepDCIManagerSessionImpl
}


RepDCIManagerSessionImpl::~RepDCIManagerSessionImpl()
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::~RepDCIManagerSessionImpl
// END USER INSERT SECTION RepDCIManagerSessionImpl::~RepDCIManagerSessionImpl

}


void
RepDCIManagerSessionImpl::set_context(::DCI::CCM_RepDCIManager_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::DCI::CCM_RepDCIManager_ContextImpl::_duplicate(context);
}


void
RepDCIManagerSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::configuration_complete
	DEBUG_OUT( "RepDCIManagerSessionImpl::configuration_complete(): start...");

	// TODO: CORBA::ORB_var orb = context_->resolve_service_reference("ORB");
	CORBA::Object_var ref = context_->get_CCM_object();
	int dummy = 0;
	orb_ = CORBA::ORB_init (dummy, 0);

	//TODO - delete (only for testing )---------------------------------------
	mda_etc_var_ = Qedo::getEnvironment ( "MDA_ETC" );
	string file;
	if (!mda_etc_var_.empty())
	{
		file = mda_etc_var_ + "\\repdcimanager.ior";
	} 
	else 
	{
		NORMAL_ERR("RepositorySessionImpl::initialize(): MDA_ETC environment variable not found !");
		throw CORBA::SystemException();
	}
	string ior = orb_->object_to_string(ref);

	ofstream out;
	out.open ( file.c_str(), ios_base::binary | ios_base::out );
	int size = ior.length();
	for (long i=0; i<size;i++) 
	{
		out << ior[i];
	}
	out.close();
	DEBUG_OUT2( "RepDCIManagerSessionImpl::configuration_complete() write ior to ", file );
	//--------------------------------------------------------------------------

	DEBUG_OUT( "RepDCIManagerSessionImpl::configuration_complete(): ...end");
// END USER INSERT SECTION RepDCIManagerSessionImpl::configuration_complete
}


void
RepDCIManagerSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::remove
// END USER INSERT SECTION RepDCIManagerSessionImpl::remove
}


void
RepDCIManagerSessionImpl::dci_name(const char* param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::_dci_name
	dci_name_ = strdup(param);
// END USER INSERT SECTION RepDCIManagerSessionImpl::_dci_name
}


char*
RepDCIManagerSessionImpl::dci_name()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::dci_name
        /*
         * The 'dci_name' attribute is the logical identifier
         * of the dci domain.
         */
        return strdup(dci_name_.c_str());
// END USER INSERT SECTION RepDCIManagerSessionImpl::dci_name
}


char*
RepDCIManagerSessionImpl::install_with_archive(const DCI::AssemblyArchive& archive)
	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure, ::DCI::InvalidArchive, ::DCI::AlreadyInstalled)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::install_with_archive
   /*
    * Transmit implementations to DCIManager (push) and install them.
	*  return assemblyUUID
    */
	DEBUG_OUT( "RepDCIManagerSessionImpl::install_with_archive(): start...");

	//feed repository
	DCI::RepFeeder_ptr repfeeder = context_->get_connection_rep_feeder();
	if ( CORBA::is_nil ( repfeeder ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::install_with_archive(): repfeeder connection nil!");
		throw CORBA::SystemException();
	}
	CORBA::Object_var obj = repfeeder->feed_assembly(archive);
	MDE::Deployment::Assembly_var ass = MDE::Deployment::Assembly::_narrow(obj);
	if ( CORBA::is_nil ( ass ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::install_with_archive(): assembly reference nil!");
		throw CORBA::SystemException();
	}

	//install assembly
	string assUUID = this->install(ass);

	DEBUG_OUT2( "RepDCIManagerSessionImpl::install_with_archive(): ...end return=", assUUID);
	return strdup(assUUID.c_str());
// END USER INSERT SECTION RepDCIManagerSessionImpl::install_with_archive
}


char*
RepDCIManagerSessionImpl::install_with_descriptor(const char* descriptor)
	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure, ::DCI::AlreadyInstalled)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::install_with_descriptor
    /*
    * Transmit only descriptor to DCIManager, 
	* implementation is to be downloaded by DCIManager (pull).
	* return assemblyUUID
    */
	DEBUG_OUT( "RepDCIManagerSessionImpl::install_with_descriptor(): start...");

	//feed repository
	DCI::RepFeeder_ptr repfeeder = context_->get_connection_rep_feeder();
	if ( CORBA::is_nil ( repfeeder ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::install_with_descriptor(): repfeeder connection nil!");
		throw CORBA::SystemException();
	}
	CORBA::Object_var obj = repfeeder->feed_assembly_with_descriptor(descriptor);
	MDE::Deployment::Assembly_var ass = MDE::Deployment::Assembly::_narrow(obj);
	if ( CORBA::is_nil ( ass ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::install_with_descriptor(): assembly reference nil!");
		throw CORBA::SystemException();
	}

	//install assembly
	string assUUID = this->install(ass);

	DEBUG_OUT2( "RepDCIManagerSessionImpl::install_with_descriptor(): ...end return=", assUUID);
	return strdup(assUUID.c_str());
// END USER INSERT SECTION RepDCIManagerSessionImpl::install_with_descriptor
}


char*
RepDCIManagerSessionImpl::update_with_archive(const char* old_assemblyUUID, const DCI::AssemblyArchive& archive)
	throw(CORBA::SystemException, ::DCI::UninstallationFailure, ::DCI::InvalidArchive, ::DCI::AlreadyInstalled, ::Components::Deployment::InstallationFailure, ::DCI::UnknownAssembly)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::update_with_archive
   /*
    * Update an already installed assembly with a new archive.
    */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::update_with_archive(): start... old_uuid=", old_assemblyUUID);
	this->uninstall(old_assemblyUUID);
	return this->install_with_archive(archive);
	DEBUG_OUT( "RepDCIManagerSessionImpl::update_with_archive(): ...end");
// END USER INSERT SECTION RepDCIManagerSessionImpl::update_with_archive
}


char*
RepDCIManagerSessionImpl::update_with_descriptor(const char* old_assemblyUUID, const char* descriptor)
	throw(CORBA::SystemException, ::DCI::UninstallationFailure, ::DCI::AlreadyInstalled, ::Components::Deployment::InstallationFailure, ::DCI::UnknownAssembly)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::update_with_descriptor
    /*
    * Update an already installed assembly with a new descriptor.
    */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::update_with_descriptor(): start... old_uuid=", old_assemblyUUID);
	this->uninstall(old_assemblyUUID);
	return this->install_with_descriptor(descriptor);
	DEBUG_OUT( "RepDCIManagerSessionImpl::update_with_descriptor(): ...end");
// END USER INSERT SECTION RepDCIManagerSessionImpl::update_with_descriptor
}


void
RepDCIManagerSessionImpl::uninstall(const char* assemblyUUID)
	throw(CORBA::SystemException, ::DCI::UninstallationFailure, ::DCI::AssemblyUsed, ::DCI::UnknownAssembly)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::uninstall
    /*
    * Uninstallation of an assembly.
    */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::uninstall(): start... uuid=", assemblyUUID);

	//lookup assembly 
	MDE::Deployment::Assembly_var ass;
	try {
		ass = this->get_assembly(assemblyUUID);
	} catch(...){
		throw ::DCI::UnknownAssembly();
	}
	//deinstall on nodes
	DEBUG_OUT( "RepDCIManagerSessionImpl::uninstall(): deinstall on nodes...");
	MDE::Deployment::Configuration_var cfg = ass->config();
	if ( CORBA::is_nil ( cfg ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::uninstall(): Configuration nil!");
		throw ::DCI::UninstallationFailure();
	}

    MDE::Deployment::InstallationSet* inst_set =cfg->install_dest();
	for ( unsigned long inst_set_idx = 0; inst_set_idx < inst_set->length(); inst_set_idx++ ) {
		MDE::Deployment::DeploymentUnit_var depl = (*inst_set)[inst_set_idx]->impl();
		string deplUUID = depl->uuid();
		DEBUG_OUT("-----------------------------------------------------------------------------------");
		DEBUG_OUT(deplUUID);

		// for all destinations:
		CorbaIdlTypes::StringSet* dests = (*inst_set)[inst_set_idx]->destinations();
		for ( unsigned long dests_idx = 0; dests_idx < dests->length(); dests_idx++ ) {
			string destination((*dests)[dests_idx]);
			DEBUG_OUT2( "   deinstall on node=", destination);
			//get NodeManager
			DCI::NodeManager_ptr node_manager_;
			try {
				node_manager_ = this->get_node_manager(destination.c_str());
			}
			catch(...) {
				throw (Components::Deployment::InstallationFailure());
			}
			// get ExtComponentInstallation
			::DCI::ExtComponentInstallation_var ext_comp_install;
//			::DCI::NodeInformation_var node_information;
			CORBA::Object_var obj_nm_;
			obj_nm_ = node_manager_->provide_facet("component_installation");	
			ext_comp_install = ::DCI::ExtComponentInstallation::_narrow ( obj_nm_ );
			if (CORBA::is_nil(ext_comp_install))
			{
				NORMAL_ERR("RepDCIManagerSessionImpl::uninstall(): ext_comp_install reference nil!");
			}
			else 
				try {
					//deinstall
					DEBUG_OUT2("RepDCIManagerSessionImpl::uninstall(): try to remove uuid=", deplUUID);
					ext_comp_install->remove(deplUUID.c_str());
				}
				catch (::Components::RemoveFailure&)
				{
					NORMAL_ERR2("RepDCIManagerSessionImpl::uninstall(): RemoveFailure on node ", destination);
					throw ::DCI::UninstallationFailure();
				}
				catch (::Components::Deployment::UnknownImplId&)
				{
					NORMAL_ERR2("RepDCIManagerSessionImpl::uninstall(): UnknownImplId on node ", destination);
					throw ::DCI::UninstallationFailure();
				}
				catch (...)
				{
					NORMAL_ERR2("RepDCIManagerSessionImpl::uninstall(): ERROR on node ", destination);
					throw ::DCI::UninstallationFailure();
				}
		}
	}
        
	try {
		ass->set_valid(false); //TODO: ref_delete(); does'nt work yet in repository!
	}
	catch(...) {
		NORMAL_ERR2("RepDCIManagerSessionImpl::uninstall(): error while deleting Assembly! uuid=", assemblyUUID);
		throw ::DCI::UninstallationFailure();
	}
	DEBUG_OUT( "RepDCIManagerSessionImpl::uninstall(): ...end");
// END USER INSERT SECTION RepDCIManagerSessionImpl::uninstall
}


char*
RepDCIManagerSessionImpl::create_assembly_instance(const char* assemblyUUID)
	throw(CORBA::SystemException, ::DCI::CreationFailure)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::create_assembly_instance
    /*
    * Instantiation of an assembly.
    */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::create_assembly_instance(): start... uuid=", assemblyUUID);


	/** the assembly factory to be used */
	DCI::RepAssemblyManagerHome_var					assemblyFactory_;
	/** the assembly manager */
	DCI::AssemblyManager_var						assemblyManager_;

	MDE::Deployment::AssemblyInstance_var assinst;
	string											assinstuuid_;

	//lookup assembly 
	MDE::Deployment::Assembly_var ass;
	try {
		ass = this->get_assembly(assemblyUUID);
	} catch(...){
		throw ::DCI::CreationFailure();
	}

	//get assmgrhome
	assemblyFactory_ = context_->get_connection_rep_ass_home();
	if ( CORBA::is_nil ( assemblyFactory_ ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::create_assembly_instance(): rep_ass_home reference nil!");
		throw ::DCI::CreationFailure();
	}
/*//-------------------------------------

	Components::Deployment::Assembly_var assembly_;
	Components::Cookie* cookie_;
	string	package;


	//get location of assembly package
	package = "file:///"+mda_etc_var_+"\\repo-files\\"+assemblyUUID+".ZIP";

	string::size_type pos = package.find_first_of("\\");
	while ((pos >= 0) && (pos < package.size()))
	{
		package.replace(pos, 1, "/");
		pos = package.find_first_of("\\");
	}
	DEBUG_OUT2( "RepDCIManagerSessionImpl::create_assembly_instance(): using location=", package);

	//
	// create assembly via old AssemblyFactory interface
	//
	try
	{
		cookie_ = assemblyFactory_->create_assembly(package.c_str());
		assembly_ = assemblyFactory_->lookup(cookie_);
	}
	catch( Components::Deployment::InvalidLocation& )
	{
		NORMAL_ERR( "RepDCIManagerSessionImpl::create_assembly_instance(): InvalidLocation during assembly creation" );
		throw ::DCI::CreationFailure();
	}
	catch( Components::CreateFailure& )
	{
		NORMAL_ERR( "RepDCIManagerSessionImpl::create_assembly_instance(): CreateFailure during assembly creation" );
		throw ::DCI::CreationFailure();
	}
	catch( Components::Deployment::InvalidAssembly& )
	{
		NORMAL_ERR( "RepDCIManagerSessionImpl::create_assembly_instance(): InvalidAssembly during assembly creation" );
		throw ::DCI::CreationFailure();
	}
	catch( CORBA::SystemException& ex )
	{
		NORMAL_ERR2( "RepDCIManagerSessionImpl::create_assembly_instance(): CORBA system exception during assembly creation : ", ex );
		throw ::DCI::CreationFailure();
	}

	DEBUG_OUT( "press ENTER to destroy assemblyInstance...");
	getchar();

	try
	{
		assemblyFactory_->destroy(cookie_);
	}
	catch( ... )
	{
		NORMAL_ERR( "RepDCIManagerSessionImpl::create_assembly_instance(): CORBA system exception during destroy assembly");
		throw ::DCI::CreationFailure();
	}
	return strdup("dummy");

//-------------------------------------
*/
	//get AssemblyManager
	CORBA::Object_var obj;
	try
	{
		obj = assemblyFactory_->create_assembly_from_dci(ass);
	}
	catch(...)
	{
		NORMAL_ERR( "RepDCIManagerSessionImpl::create_assembly_instance(): exception during assembly creation" );
		throw;
	}
	assinst = MDE::Deployment::AssemblyInstance::_narrow(obj);
	if ( CORBA::is_nil ( assinst ) ) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::create_assembly_instance(): AssemblyInstance reference nil!");
		throw ::Components::CreateFailure();
	}
	assinstuuid_ = assinst->id();

	//convert reference to assembly-if
	obj = ::RepUtils::convert_strRef(assinst->ref());
	try {
		assemblyManager_ = DCI::AssemblyManager::_narrow(obj);
	}
	catch(...) {
		NORMAL_ERR("RepDCIManagerSessionImpl::create_assembly_instance(): AssemblyManager narrow failed!");
		throw ::DCI::CreationFailure();
	}
	if ( CORBA::is_nil ( assemblyManager_ ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::create_assembly_instance(): AssemblyManager reference nil!");
		throw ::DCI::CreationFailure();
	}

	//get Assembly-if
	Components::Deployment::Assembly_var assembly_;
	assembly_ = Components::Deployment::Assembly::_narrow(assemblyManager_->provide_facet("assembly"));
	if ( CORBA::is_nil ( assembly_ ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::create_assembly_instance(): assembly facet nil!");
		throw ::DCI::CreationFailure();
	}

	//
	// build assembly
	//
	try
	{
		assembly_->build();
	}
	catch( Components::CreateFailure& ex )
	{
		NORMAL_ERR2( "ComponentDeployment: CreateFailure exception during assembly building : ", ex );
		throw ::DCI::CreationFailure();
	}
	catch( CORBA::SystemException& ex )
	{
		NORMAL_ERR2( "ComponentDeployment: CORBA system exception during assembly building : ", ex );
		throw ::DCI::CreationFailure();
	}
	DEBUG_OUT2( "RepDCIManagerSessionImpl::create_assembly_instance(): ... end return=", assinstuuid_);
	return strdup(assinstuuid_.c_str());
// END USER INSERT SECTION RepDCIManagerSessionImpl::create_assembly_instance
}


DCI::InstanceUUIDs*
RepDCIManagerSessionImpl::get_assembly_instances(const char* assemblyUUID)
	throw(CORBA::SystemException, ::DCI::UnknownAssembly)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::get_assembly_instances
    /*
        * Retrieve list of all instances of an assembly.
        */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::get_assembly_instances(): start... assemblyUUID=", assemblyUUID);
	//lookup assembly 
	MDE::Deployment::Assembly_var ass;
	try {
		ass = this->get_assembly(assemblyUUID);
	} catch(...){
		throw ::DCI::CreationFailure();
	}

	DCI::InstanceUUIDs_var ret = new DCI::InstanceUUIDs();

	//get all AssemblyInstances
	MDE::Deployment::AssemblyInstanceSet_var set_ = ass->ass_inst();
	for (unsigned long idx = 0; idx < set_->length(); idx++ ) 
	{
		if((*set_)[idx]->valid()) {
			ret->length(ret->length()+1);
			(*ret)[ret->length()-1] = (*set_)[idx]->id();
			DEBUG_OUT2("	add id=", (*set_)[idx]->id());
		} else
			DEBUG_OUT2("	invalid id=", (*set_)[idx]->id());
	}
	DEBUG_OUT( "RepDCIManagerSessionImpl::get_assembly_instances(): ...end");
	return ret._retn(); 
// END USER INSERT SECTION RepDCIManagerSessionImpl::get_assembly_instances
}


DCI::AssemblyManager_ptr
RepDCIManagerSessionImpl::get_assembly_manager(const char* instance_id)
	throw(CORBA::SystemException, ::DCI::UnknownAssembly)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::get_assembly_manager
        /*
         * Obtain the reference of an AssemblyManager dedicated to the
         * assembly instance with instanceUUID.
         */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::get_assembly_manager(): start... instance_id=", instance_id);

	//lookup AssemblyInstance
	MDE::Deployment::AssemblyInstance_var assinst;
	try {
		assinst = this->get_assemblyInstance(instance_id);
	} catch(...){
		throw ::DCI::UnknownAssembly();
	}

	//convert reference to assembly-if
	CORBA::Object_var obj = ::RepUtils::convert_strRef(assinst->ref());
	DCI::AssemblyManager_var ret;
	try {
		ret = DCI::AssemblyManager::_narrow(obj);
	}
	catch(...) {
		NORMAL_ERR("RepDCIManagerSessionImpl::get_assembly_manager(): AssemblyManager narrow failed!");
		throw CORBA::SystemException();
	}
	if ( CORBA::is_nil ( ret ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::get_assembly_manager(): AssemblyManager reference nil!");
		throw CORBA::SystemException();
	}
	DEBUG_OUT( "RepDCIManagerSessionImpl::get_assembly_manager(): ...end");
	return ret._retn(); 
// END USER INSERT SECTION RepDCIManagerSessionImpl::get_assembly_manager
}


void
RepDCIManagerSessionImpl::destroy_assembly_instance(const char* instance_id)
	throw(CORBA::SystemException, ::DCI::DestroyError)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::destroy_assembly_instance
    /*
    * Destroy an instance of an assembly.
    */

	/** the assembly factory to be used */
	DCI::RepAssemblyManagerHome_var					assemblyFactory_;

	DCI::AssemblyManager_var assmgr;

	/** the assembly */
	Components::Deployment::Assembly_var			assembly_;

	DEBUG_OUT2( "RepDCIManagerSessionImpl::destroy_assembly_instance(): start... uuid=", instance_id);

	//lookup AssemblyInstance
	MDE::Deployment::AssemblyInstance_var assinst;
	try {
		assinst = this->get_assemblyInstance(instance_id);
	} catch(...){
		throw ::DCI::UnknownAssembly();
	}

	//convert reference to assembly-if
	CORBA::Object_var obj = ::RepUtils::convert_strRef(assinst->ref());
	try {
		assmgr = DCI::AssemblyManager::_narrow(obj);
	}
	catch(...) {
		NORMAL_ERR("RepDCIManagerSessionImpl::destroy_assembly_instance(): AssemblyManager narrow failed!");
		throw ::DCI::DestroyError();
	}
	if ( CORBA::is_nil ( assmgr ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::destroy_assembly_instance(): AssemblyManager reference nil!");
		throw ::DCI::DestroyError();
	}

	////get AssemblyManager
	//try {
	//	assmgr = this->get_assembly_manager(instance_id);
	//}
	//catch(...){
	//	throw ::DCI::DestroyError();
	//};

	//get Assembly-if
	assembly_ = Components::Deployment::Assembly::_narrow(assmgr->provide_facet("assembly"));
	if ( CORBA::is_nil ( assembly_ ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::destroy_assembly_instance(): assembly facet nil!");
		throw ::DCI::DestroyError();
	}

	//
	// tear down assembly
	//
	try
	{
		assembly_->tear_down(); //ATTENTION: assinst set to "invalid" !
	}
	catch( Components::Deployment::InvalidAssembly& ex )
	{
		NORMAL_ERR2( "RepDCIManagerSessionImpl::destroy_assembly_instance(): InvalidAssembly exception during destroy assembly : ", ex );
		throw ::DCI::DestroyError();
	}
	catch( Components::RemoveFailure& ex )
	{
		NORMAL_ERR2( "RepDCIManagerSessionImpl::destroy_assembly_instance(): RemoveFailure exception during tear down assembly : ", ex );
		throw ::DCI::DestroyError();
	}
	catch( CORBA::SystemException& ex )
	{
		NORMAL_ERR2( "RepDCIManagerSessionImpl::destroy_assembly_instance(): CORBA system exception during tear down assembly : ", ex );
		throw ::DCI::DestroyError();
	}

	////lookup AssemblyInstance
	//MDE::Deployment::AssemblyInstance_var assinst;
	//try {
	//	assinst = this->get_assemblyInstance(instance_id);
	//} catch(...){
	//	throw ::DCI::UnknownAssembly();
	//}

	//destroy AssemblyManager
	assemblyFactory_ = context_->get_connection_rep_ass_home();
	if ( CORBA::is_nil ( assemblyFactory_ ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::destroy_assembly_instance(): rep_ass_home connection nil!");
		throw ::DCI::DestroyError();
	}
	
	assemblyFactory_->destroy_from_dci(assinst);

	DEBUG_OUT( "RepDCIManagerSessionImpl::destroy_assembly_instance(): ...end");
// END USER INSERT SECTION RepDCIManagerSessionImpl::destroy_assembly_instance
}


DCI::AssemblyUUIDs*
RepDCIManagerSessionImpl::get_assemblies()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::get_assemblies
        /*
         * Retrieve the list of all installed assemblies.
         */

	DEBUG_OUT( "RepDCIManagerSessionImpl::get_assemblies(): start...");
	//get connection to repository
	MDE::Deployment::AssemblyClass_var ass_ref = this->get_rep_root()->assembly_ref();
	if ( CORBA::is_nil ( ass_ref ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::get_assemblies(): AssemblyClass reference nil!");
		throw CORBA::SystemException();
	}
	
	DCI::AssemblyUUIDs_var ret = new DCI::AssemblyUUIDs();

	//get all assemblies
	MDE::Deployment::AssemblySet_var set_ = ass_ref->all_of_class_assembly();
	for (unsigned long idx = 0; idx < set_->length(); idx++ ) 
	{
		if((*set_)[idx]->valid()) {
			ret->length(ret->length()+1);
			(*ret)[ret->length()-1] = (*set_)[idx]->uuid();
			DEBUG_OUT2("	add uuid=", (*set_)[idx]->uuid());
		} else
			DEBUG_OUT2("	invalid uuid=", (*set_)[idx]->uuid());
	}
	DEBUG_OUT( "RepDCIManagerSessionImpl::get_assemblies(): ...end");
	return ret._retn(); 
// END USER INSERT SECTION RepDCIManagerSessionImpl::get_assemblies
}


char*
RepDCIManagerSessionImpl::lookup_assembly(const char* assemblyUUID)
	throw(CORBA::SystemException, ::DCI::UnknownAssembly)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::lookup_assembly
    /*
    * Obtain descriptor of an installed assembly.
    */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::lookup_assembly(): start... uuid=", assemblyUUID);
	//lookup assembly 
	MDE::Deployment::Assembly_var ass;
	try {
		ass = this->get_assembly(assemblyUUID);
	} catch(...){
		throw ::DCI::UnknownAssembly();
	}
	
	string ret = ass->descriptor();
    
	DEBUG_OUT2("RepDCIManagerSessionImpl::lookup_assembly(): ...end return=", ret);
	return strdup(ret.c_str());
// END USER INSERT SECTION RepDCIManagerSessionImpl::lookup_assembly
}


DCI::NodeManager_ptr
RepDCIManagerSessionImpl::get_node_manager(const char* node_name)
	throw(CORBA::SystemException, ::Components::InvalidName)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::get_node_manager
	/*
    * The 'get_node_manager' operation returns
    * a node manager associated to the given node name.
    *
    * @param node_node The node name to search.
    *
    * @return The NodeManager instance associated to the given node name.
    *
    * @throw ::Components::InvalidName
    *        Thrown when the node name is unknown,
    *        i.e. No NodeManager instance for this node name.
    */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::get_node_manager(): start... nodename=", node_name);
	//get connection to repository Runtime Model
	MDE::Deployment::NodeManagerClass_var node_ref = this->get_rep_root()->node_manager_ref();
	if ( CORBA::is_nil ( node_ref ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::get_node_manager(): NodeManagerClass reference nil!");
		throw CORBA::SystemException();
	}
	//get ref nodemanager
	string noderef;
	try {
		noderef = node_ref->get_node_ref(node_name);
	}
	catch(...) {
		NORMAL_ERR2("RepDCIManagerSessionImpl::get_node_manager(): InvalidName=", node_name);
		throw ::Components::InvalidName();
	};

	//convert reference
	DCI::NodeManager_var ret = DCI::NodeManager::_narrow(::RepUtils::convert_strRef(noderef));
	if ( CORBA::is_nil ( ret ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::get_node_manager(): NodeManager reference nil!");
		throw CORBA::SystemException();
	}
	DEBUG_OUT( "RepDCIManagerSessionImpl::get_node_manager(): ...end");
	return ret._retn();
// END USER INSERT SECTION RepDCIManagerSessionImpl::get_node_manager
}


DCI::NodeManagers*
RepDCIManagerSessionImpl::get_node_managers()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::get_node_managers
	/*
	* The 'get_node_managers' operation returns
	* a sequence of all node managers registered with a DCI.
	*/
	DEBUG_OUT( "RepDCIManagerSessionImpl::get_node_managers(): start...");
	//get connection to repository Runtime Model
	MDE::Deployment::NodeManagerClass_var node_ref = this->get_rep_root()->node_manager_ref();
	if ( CORBA::is_nil ( node_ref ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::get_node_managers(): NodeClass reference nil!");
		throw CORBA::SystemException();
	}
	MDE::Deployment::NodeManagerSet_var set_ = node_ref->all_of_class_node_manager();

	DCI::NodeManagers_var ret = new DCI::NodeManagers();
	// TODO: CORBA::ORB_var orb = context_->resolve_service_reference("ORB");
	int dummy = 0;
	CORBA::ORB_var orb = CORBA::ORB_init (dummy, 0);
	CORBA::Object_var obj_;

	unsigned long idx = 0;
	ret->length(set_->length());
	while ( idx < set_->length() ) 
	{
		if ( strcmp ( (*set_)[idx]->ref(), "" ) != 0 )
				obj_ = orb->string_to_object( (*set_)[idx]->ref() );
		else
		{
			NORMAL_ERR("RepDCIManagerSessionImpl::get_node_managers(): rep_node_->ref() empty");
			throw CORBA::SystemException();
		}

		if( CORBA::is_nil ( obj_.in () ) ) 
		{
			NORMAL_ERR("RepDCIManagerSessionImpl::get_node_managers(): String to Object by ORB initialization failed!");
			throw CORBA::SystemException();
		}
		
		DCI::NodeManager_ptr ref_ = DCI::NodeManager::_narrow(obj_);
		(*ret)[idx] = ref_;
		++idx;
	}
	DEBUG_OUT( "RepDCIManagerSessionImpl::get_node_managers(): ...end");
	return ret._retn();
// END USER INSERT SECTION RepDCIManagerSessionImpl::get_node_managers
}


DCI::DCIDescriptors*
RepDCIManagerSessionImpl::get_dci_properties()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::get_dci_properties
        /*
         * The 'get_dci_properties' operation returns
         * a sequence of DCI descriptors containing DCI properties 
         * and node properties in a XML format, together with filename
         * and type of each descriptor.
         *
         * @return sequence of DCI properties in an XML format.
         */
        throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepDCIManagerSessionImpl::get_dci_properties
}


DCI::DCIDescriptors*
RepDCIManagerSessionImpl::get_node_properties(const char* node_name)
	throw(CORBA::SystemException, ::Components::InvalidName)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::get_node_properties
    /*
    * The 'get_node_properties' operation returns a 
    * sequence of DCI descriptors containing the node properties
    * and potentially additional property files the node
	* properties descriptor refers to in an XML format.
    *
    * @return sequence of DCI properties in an XML format.
    */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::get_node_properties(): start... node=", node_name);
	//get NodeManager
	DCI::NodeManager_ptr node_manager_ = this->get_node_manager(node_name);
	CORBA::Object_var obj_;
	obj_ = node_manager_->provide_node_information ();	
	::DCI::NodeInformation_var node_information_ = ::DCI::NodeInformation::_narrow ( obj_);
	if (CORBA::is_nil(node_information_))
	{
		NORMAL_ERR("RepDCIManagerSessionImpl::get_node_properties(): node_information_ nil!");
		throw CORBA::SystemException();
	}
	DEBUG_OUT( "RepDCIManagerSessionImpl::get_node_properties(): ...end");
    return node_information_->get_node_properties();
// END USER INSERT SECTION RepDCIManagerSessionImpl::get_node_properties
}


void
RepDCIManagerSessionImpl::register_node(const char* node_name, DCI::NodeManager_ptr node_manager)
	throw(CORBA::SystemException, ::Components::InvalidName, ::DCI::AlreadyRegistered)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::register_node
	/*
    * Add a node manager.
    *
    * @param node_name The name of the node manager.
    * @param node_manager The reference to the node manager.
    *
    * @return void.
    *
    */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::register_node(): start... node=", node_name);
	//convert reference
	// TODO: CORBA::ORB_var orb = context_->resolve_service_reference("ORB");
	int dummy = 0;
	CORBA::ORB_var orb = CORBA::ORB_init (dummy, 0);
	char * node_manager_ref = orb->object_to_string( node_manager );

	//get connection to repository Runtime Model
	MDE::Deployment::NodeManagerClass_var node_ref = this->get_rep_root()->node_manager_ref();
	if ( CORBA::is_nil ( node_ref ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::register_node(): NodeClass reference nil!");
		throw CORBA::SystemException();
	}
	//lookup node
	MDE::Deployment::NodeManager_var rep_node = node_ref->lookup(node_name);
	if(rep_node) {
		NORMAL_ERR("RepDCIManagerSessionImpl::register_node(): AlreadyRegistered ?!");
		//throw DCI::AlreadyRegistered();
		DEBUG_OUT("RepDCIManagerSessionImpl::register_node(): update reference");
		rep_node->set_ref(node_manager_ref);
	}
	else {
		//add Node
		try {
			rep_node = node_ref->create_node_manager(node_manager_ref, node_name, true);
		}
		catch(...) {
			NORMAL_ERR2("RepDCIManagerSessionImpl::register_node(): error while creating node in repo; node=", node_name);
		}
	}
	DEBUG_OUT( "RepDCIManagerSessionImpl::register_node(): ...end");
// END USER INSERT SECTION RepDCIManagerSessionImpl::register_node
}


void
RepDCIManagerSessionImpl::deregister_node(const char* node_name)
	throw(CORBA::SystemException, ::DCI::UnknownNode)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::deregister_node
   /*
    * Remove a previously added node manager.
    *
    * @param node name
    *
    * @throw ::Components::InvalidName
    *        Thrown when the provided name is invalid.
    */
	DEBUG_OUT2( "RepDCIManagerSessionImpl::deregister_node(): start... node=", node_name);
	//get connection to repository Runtime Model
	MDE::Deployment::NodeManagerClass_var node_ref = this->get_rep_root()->node_manager_ref();
	if ( CORBA::is_nil ( node_ref ) ) {
		NORMAL_ERR("RepDCIManagerSessionImpl::deregister_node(): NodeClass reference nil!");
		throw CORBA::SystemException();
	}
	//lookup node
	MDE::Deployment::NodeManager_var rep_node = node_ref->lookup(node_name);
	if(!rep_node) {
		NORMAL_ERR2("RepDCIManagerSessionImpl::deregister_node(): DCI::UnknownNode() node=", node_name);
		throw DCI::UnknownNode();
	}
	//delete Node
	try {
		rep_node->set_valid(false);//TODO: ref_delete(); does'nt work yet in repository!
	}
	catch(...) {
		NORMAL_ERR2("RepDCIManagerSessionImpl::deregister_node(): error while deleting node in repo; node=", node_name);
	}
	DEBUG_OUT( "RepDCIManagerSessionImpl::deregister_node(): ...end");
// END USER INSERT SECTION RepDCIManagerSessionImpl::deregister_node
}


Components::Cookie*
RepDCIManagerSessionImpl::register_home(Components::CCMHome_ptr home_ref, const char* home_repid, const char* component_repid, const char* name)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::register_home
        /*
         * Register a CCMHome instance.
         *
         * @param home_ref The CCMHome reference.
         * @param home_repid The CCMHome Repository Id.
         * @param component_repid The managed component Repository Id.
         * @param name The INS name associated to the home instance.
         *
         *  @return The cookie associated to this registration.
         */
        throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepDCIManagerSessionImpl::register_home
}


void
RepDCIManagerSessionImpl::unregister_home(Components::Cookie* ck)
	throw(CORBA::SystemException, ::Components::CookieRequired)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::unregister_home
         /*
          * Unregister a CCMHome.
          *
          * @param ck The registration cookie returned by register_home.
          *
          *  @throws ::Components::CookieRequired
          *          Thrown when an invalid cookie is used.
          */
        throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepDCIManagerSessionImpl::unregister_home
}


void
RepDCIManagerSessionImpl::push_event (Components::EventBase* ev)
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::push_event
// END USER INSERT SECTION RepDCIManagerSessionImpl::push_event
}


void
RepDCIManagerSessionImpl::push_NodeChanged(::DCI::NodeChanged* ev)
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl::push_NodeChanged
// END USER INSERT SECTION RepDCIManagerSessionImpl::push_NodeChanged
}


// BEGIN USER INSERT SECTION RepDCIManagerImpl
// END USER INSERT SECTION RepDCIManagerImpl


RepDCIManagerImpl::RepDCIManagerImpl()
:component_(new RepDCIManagerSessionImpl())
{
// BEGIN USER INSERT SECTION RepDCIManagerImpl::RepDCIManagerImpl
// END USER INSERT SECTION RepDCIManagerImpl::RepDCIManagerImpl
}


RepDCIManagerImpl::~RepDCIManagerImpl()
{
// BEGIN USER INSERT SECTION RepDCIManagerImpl::~RepDCIManagerImpl
// END USER INSERT SECTION RepDCIManagerImpl::~RepDCIManagerImpl

    component_->_remove_ref();
}


::CORBA::Object*
RepDCIManagerImpl::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "dci_deployment")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "dci_information")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "node_management")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "home_registration")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
RepDCIManagerImpl::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
RepDCIManagerImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION RepDCIManagerImpl::configuration_complete
// END USER INSERT SECTION RepDCIManagerImpl::configuration_complete
}


void
RepDCIManagerImpl::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::DCI::CCM_RepDCIManager_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::DCI::CCM_RepDCIManager_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::DCI::CCM_RepDCIManager_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::DCI::CCM_RepDCIManager_ContextImpl::_nil();
        
    #else
    context_ = ::DCI::CCM_RepDCIManager_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
RepDCIManagerImpl::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepDCIManagerImpl::ccm_activate
// END USER INSERT SECTION RepDCIManagerImpl::ccm_activate
}


void
RepDCIManagerImpl::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepDCIManagerImpl::ccm_passivate
// END USER INSERT SECTION RepDCIManagerImpl::ccm_passivate
}


void
RepDCIManagerImpl::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepDCIManagerImpl::ccm_remove
// END USER INSERT SECTION RepDCIManagerImpl::ccm_remove
}


// BEGIN USER INSERT SECTION RepDCIManagerHomeImpl
// END USER INSERT SECTION RepDCIManagerHomeImpl


RepDCIManagerHomeImpl::RepDCIManagerHomeImpl()
{
// BEGIN USER INSERT SECTION RepDCIManagerHomeImpl::RepDCIManagerHomeImpl
// END USER INSERT SECTION RepDCIManagerHomeImpl::RepDCIManagerHomeImpl
}


RepDCIManagerHomeImpl::~RepDCIManagerHomeImpl()
{
// BEGIN USER INSERT SECTION RepDCIManagerHomeImpl::~RepDCIManagerHomeImpl
// END USER INSERT SECTION RepDCIManagerHomeImpl::~RepDCIManagerHomeImpl

}


void
RepDCIManagerHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
RepDCIManagerHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION RepDCIManagerHomeImpl::create
// END USER INSERT SECTION RepDCIManagerHomeImpl::create
    return new RepDCIManagerImpl();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_RepDCIManagerHomeE(void)
{
// BEGIN USER INSERT SECTION create_RepDCIManagerHome
// END USER INSERT SECTION create_RepDCIManagerHome

    return new ::DCI::RepDCIManagerHomeImpl();
}

