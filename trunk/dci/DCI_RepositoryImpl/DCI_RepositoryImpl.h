//
// generated by Qedo
//

#ifndef _DCI_RepositoryImpl_H_
#define _DCI_RepositoryImpl_H_


// BEGIN USER INSERT SECTION file_pre
// END USER INSERT SECTION file_pre


#include <CORBA.h>
#include "DCI_RepositoryImpl_BUSINESS.h"
#include "valuetypes.h"
#include "RefCountBase.h"
#include <string>


// BEGIN USER INSERT SECTION file_post
#include "MDE.h"
#include "RepositoryRoot.h"
#include "CADReader.h"
#include "CSDReader.h" 
#include "CPFReader.h"
#include "PlatformBase.h"
#include "qedoutil.h"
#include "Output.h"

#include <xercesc/util/XMLURL.hpp>
#include <xercesc/framework/URLInputSource.hpp>
#include <xercesc/util/BinInputStream.hpp>

#include <iostream>
#include <fstream>

#include "RepUtils.h"
#include "ConvertProperty.h"

using namespace std;
// END USER INSERT SECTION file_post


namespace DCI
{
    
    //
    // executor
    //
    class RepositorySessionImpl
        : public virtual CORBA::LocalObject
        , public virtual ::DCI::CCM_RepositorySessionImpl
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_RepositorySessionImpl
// END USER INSERT SECTION INHERITANCE_RepositorySessionImpl
    {
    
    private:
    
        ::DCI::CCM_Repository_ContextImpl_var context_;
        
    public:
    
        RepositorySessionImpl();
        virtual ~RepositorySessionImpl();
        
        void set_context(::DCI::CCM_Repository_ContextImpl_ptr context)
            throw (CORBA::SystemException, Components::CCMException);
        
        void configuration_complete()
            throw (CORBA::SystemException, Components::InvalidConfiguration);
        
        void remove()
            throw (CORBA::SystemException);
        
        
        //
        // IDL:DCI/RepFeeder/feed_assembly:1.0
        //
        virtual CORBA::Object_ptr feed_assembly(const DCI::AssemblyArchive& archive)
        	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure, ::DCI::InvalidArchive, ::DCI::AlreadyInstalled);
        
        //
        // IDL:DCI/RepFeeder/feed_assembly_with_descriptor:1.0
        //
        virtual CORBA::Object_ptr feed_assembly_with_descriptor(const char* descriptor)
        	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure, ::DCI::InvalidArchive, ::DCI::AlreadyInstalled);
        
        //
        // IDL:DCI/RepFeeder/feed_assembly_with_url:1.0
        //
        virtual CORBA::Object_ptr feed_assembly_with_url(const char* url)
        	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure, ::DCI::InvalidArchive, ::DCI::AlreadyInstalled);
        
        //
        // IDL:DCI/RepFeeder/feed_component:1.0
        //
        virtual CORBA::Object_ptr feed_component(const char* implUUID, const DCI::ComponentArchive& archive)
        	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure, ::DCI::InvalidArchive, ::DCI::AlreadyInstalled);
        
        //
        // IDL:DCI/RepFeeder/feed_component_with_url:1.0
        //
        virtual CORBA::Object_ptr feed_component_with_url(const char* implUUID, const char* url)
        	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure, ::DCI::InvalidArchive, ::DCI::AlreadyInstalled);
        
        //
        // IDL:DCI/RepositoryDeploymentRoot/get_root_package:1.0
        //
        virtual CORBA::Object_ptr get_root_package()
        	throw(CORBA::SystemException);
    
// BEGIN USER INSERT SECTION RepositorySessionImpl
public:
		enum PortType { USER, PROVIDER, CONSUMER, PUBLISHER, EMITTER };

private:
		MDE::Deployment::AssemblyClass_var					_assembly_ref;
		MDE::Deployment::DeploymentUnitClass_var			_deploymentUnit_ref;
		MDE::Deployment::ContainedFileClass_var				_containedFile_ref;
		MDE::Deployment::DependentFileClass_var				_dependentFile_ref;
		MDE::Deployment::ConfigurationClass_var				_configuration_ref;
		MDE::Deployment::InstallationClass_var				_installation_ref;
		MDE::Deployment::ProcessCollocationClass_var		_processCollocation_ref;
		MDE::Deployment::HomeInstantiationClass_var			_homeInstantiation_ref;
		MDE::Deployment::ConnectionClass_var				_connection_ref;
		MDE::Deployment::ComponentInstantiationClass_var	_componentInstantiation_ref;
		MDE::Deployment::ConnectionEndClass_var				_connectionEnd_ref;
		MDE::Deployment::ExternalInstanceClass_var			_externalInstance_ref;
		MDE::Deployment::FinderServiceClass_var				_finderService_ref;

/*		MDE::ComponentIDL::ProvidesDefClass_var				_providesDef_ref;
		MDE::ComponentIDL::UsesDefClass_var					_usesDef_ref;
		MDE::ComponentIDL::ConsumesDefClass_var				_consumesDef_ref;
		MDE::ComponentIDL::PublishesDefClass_var			_publishesDef_ref;
		MDE::ComponentIDL::EmitsDefClass_var				_emitsDef_ref;
*/
		
		MDE::Deployment::PropertyClass_var					_property_ref;
		MDE::Deployment::DeploymentPackage_var				_deployment_pkg_ref;

//M2C::MOFRepository::RepositoryRoot_var				_repositoryRoot_ref;

		string _mda_etc_var;
		string _temppath_ass; 
		string _temppath_comp; 

		MDE::Deployment::Property_ptr 
		convert_prop(const Components::ConfigValue*);

		void
		add_props(MDE::Deployment::PropOwner_ptr, Components::ConfigValues_var);

		void
		add_conf_props(MDE::Deployment::ComponentInstantiation_ptr, Components::ConfigValues_var);

		void
		add_def_props(MDE::Deployment::HomeInstantiation_ptr, Components::ConfigValues_var);

		MDE::Deployment::ContainedFile_ptr 
		create_containedFile(const char* filepath, const char* codetype, const char* entrypoint, const char* entrypointusage);

		typedef std::map < std::string, CorbaIdlTypes::StringSet > dependencyMap;

		MDE::Deployment::DeploymentUnit_ptr 
		get_deploymentUnit(const char* uuid, const char* componentfileid, dependencyMap*);

		MDE::Deployment::ConnectionEnd_ptr 
		create_connectionEnd(PortType porttype, Qedo::PortData* port, const MDE::Deployment::Assembly_ptr ass);

		//MDE::Deployment::ComponentInstantiation_ptr 
		//assembly_lookup_componentInstantiation(const char* name, const MDE::Deployment::Assembly_ptr ass);

		//MDE::Deployment::HomeInstantiation_ptr 
		//assembly_lookup_homeInstantiation(const char* name, const MDE::Deployment::Assembly_ptr ass);

		//MDE::Deployment::Assembly_ptr 
		//assembly_lookup(const char* uuid);

		void
		initialize();

		void
		RepositorySessionImpl::get_archive_from_url(const char* url, DCI::AssemblyArchive* archive);
// END USER INSERT SECTION RepositorySessionImpl

    };
    
    
    //
    // executor locator
    //
    class RepositoryImpl
        : public virtual CORBA::LocalObject
        , public virtual Components::SessionExecutorLocator
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_RepositoryImpl
// END USER INSERT SECTION INHERITANCE_RepositoryImpl
    {
    
    private:
    
        ::DCI::CCM_Repository_ContextImpl_var context_;
        
        RepositorySessionImpl* component_;
        
    public:
    
        RepositoryImpl();
        virtual ~RepositoryImpl();
        
        
        //
        // IDL:Components/ExecutorLocator/obtain_executor:1.0
        //
        virtual CORBA::Object_ptr obtain_executor(const char* name)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/release_executor:1.0
        //
        virtual void release_executor(CORBA::Object_ptr exc)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/configuration_complete:1.0
        //
        virtual void configuration_complete()
        	throw(CORBA::SystemException, ::Components::InvalidConfiguration);
        
        //
        // IDL:Components/SessionComponent/set_session_context:1.0
        //
        virtual void set_session_context(Components::SessionContext_ptr ctx)
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_activate:1.0
        //
        virtual void ccm_activate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_passivate:1.0
        //
        virtual void ccm_passivate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_remove:1.0
        //
        virtual void ccm_remove()
        	throw(CORBA::SystemException, ::Components::CCMException);
    
// BEGIN USER INSERT SECTION RepositoryImpl
// END USER INSERT SECTION RepositoryImpl

    };
    
    
    //
    // home executor
    //
    class RepositoryHomeImpl
        : public virtual CORBA::LocalObject
        , public virtual ::DCI::CCM_RepositoryHome
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_RepositoryHomeImpl
// END USER INSERT SECTION INHERITANCE_RepositoryHomeImpl
    {
    
    private:
    
        Components::HomeContext_var context_;
        
    public:
        RepositoryHomeImpl();
        virtual ~RepositoryHomeImpl();
        
        //
        // IDL:Components/HomeExecutorBase/set_context:1.0
        //
        virtual void set_context (Components::HomeContext_ptr ctx)
            throw (CORBA::SystemException, Components::CCMException);
        
        //
        // IDL:.../create:1.0
        //
        virtual ::Components::EnterpriseComponent_ptr create()
            throw (CORBA::SystemException, Components::CreateFailure);
    
// BEGIN USER INSERT SECTION RepositoryHomeImpl
// END USER INSERT SECTION RepositoryHomeImpl

    };
    
};

//
// entry point
//
extern "C" {
#ifdef _WIN32
__declspec(dllexport)
#else
#endif
::Components::HomeExecutorBase_ptr create_RepositoryHomeE(void);
}

#endif
