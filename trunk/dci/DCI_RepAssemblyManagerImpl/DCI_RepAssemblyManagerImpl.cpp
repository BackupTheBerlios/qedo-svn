//
// generated by Qedo
//

#include "DCI_RepAssemblyManagerImpl.h"


// BEGIN USER INSERT SECTION file
// END USER INSERT SECTION file


namespace DCI {


// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl

Components::ConfigValues* 
get_ConfigValues(const MDE::Deployment::PropertySet* prop_set){
	Components::ConfigValues_var config = new Components::ConfigValues();
	config->length(prop_set->length());
	DEBUG_OUT2("... create property list length=", config->length());
	CORBA::Any any;
	for ( unsigned long prop_set_idx = 0; prop_set_idx < prop_set->length(); prop_set_idx++) {
		DEBUG_OUT2("	... adding prop name=", (*prop_set)[prop_set_idx]->name());
		DEBUG_OUT3((*prop_set)[prop_set_idx]->value(),"<- value / type->", (*prop_set)[prop_set_idx]->type());
		::Property::string2any(any, (*prop_set)[prop_set_idx]->type(), (*prop_set)[prop_set_idx]->value());
		config.inout()[prop_set_idx] = new Qedo::ConfigValue_impl((*prop_set)[prop_set_idx]->name(), any);
	}
	return config._retn();
}

MDE::Deployment::DeploymentPackage_ptr 
RepAssemblyManagerSessionImpl::get_rep_root() {

	if ( CORBA::is_nil ( context_ ) ) {
		NORMAL_ERR("RepAssemblyManagerSessionImpl::get_rep_root(): context_ nil!");
		throw CORBA::SystemException();
	}
	DCI::Repository_var repo = context_->get_connection_repository();
	if ( CORBA::is_nil ( repo ) ) {
		NORMAL_ERR("RepAssemblyManagerSessionImpl::get_rep_root(): get_connection_repository nil!");
		throw CORBA::SystemException();
	}
	CORBA::Object_var ptr;
	try {
		ptr = repo->provide_facet("rep_root_proxy");
	}
	catch(...) {
		NORMAL_ERR("RepAssemblyManagerSessionImpl::get_rep_root(): provide_facet rep_root_proxy failed!");
		throw CORBA::SystemException();
	}
	DCI::RepositoryDeploymentRoot_var reproot;
	try {
		reproot = DCI::RepositoryDeploymentRoot::_narrow(ptr);
	}
	catch(...) {
		NORMAL_ERR("RepAssemblyManagerSessionImpl::get_rep_root(): narrow RepositoryDeploymentRoot failed!");
		throw CORBA::SystemException();
	}
	if ( CORBA::is_nil ( reproot ) ) {
		NORMAL_ERR("RepAssemblyManagerSessionImpl::get_rep_root(): RepositoryDeploymentRoot nil!");
		throw CORBA::SystemException();
	}
	try {
		ptr = reproot->get_root_package();
	}
	catch(...) {
		NORMAL_ERR("RepAssemblyManagerSessionImpl::get_rep_root(): get_root_package failed!");
		throw CORBA::SystemException();
	}
    MDE::Deployment::DeploymentPackage_var deployment_pkg_ref;
	try {
		deployment_pkg_ref = MDE::Deployment::DeploymentPackage::_narrow(ptr);
	}
	catch(...) {
		NORMAL_ERR("RepAssemblyManagerSessionImpl::get_rep_root(): narrow DeploymentPackage failed!");
		throw CORBA::SystemException();
	}
	if ( CORBA::is_nil ( deployment_pkg_ref ) ) {
		NORMAL_ERR("RepAssemblyManagerSessionImpl::get_rep_root(): deployment_pkg_ref nil!");
		throw CORBA::SystemException();
	}
	return deployment_pkg_ref._retn();
}


Components::Deployment::ComponentServer_ptr
RepAssemblyManagerSessionImpl::createComponentServer (std::string dest)
throw( Components::CreateFailure )
{
	DEBUG_OUT2("..... create new component server on ", dest);

    //
	// get server activator for destination
	//
	Components::Deployment::ServerActivator_var serverActivator;
    Components::Deployment::ComponentServer_var component_server;

	CORBA::Object_var obj = resolveName(SERVER_ACTIVATOR_CONTEXT + dest);
    if ( CORBA::is_nil(obj))
    {
        DEBUG_OUT2(".......... no ServerActivator found for ", dest);
        throw Components::CreateFailure();
    }

    serverActivator = Components::Deployment::ServerActivator::_narrow(obj.in());
    if ( CORBA::is_nil(serverActivator.in()))
    {
        DEBUG_OUT(".......... ServerActivator is NIL ");
        throw Components::CreateFailure();
    }

	//
	// create new Component Server
	//
	try
	{
		Components::ConfigValues_var config = new Components::ConfigValues();
        component_server = serverActivator->create_component_server(config);
	}
	catch ( CORBA::SystemException& )
	{
		NORMAL_ERR(".......... CORBA system exception during create_component_server()");
		NORMAL_ERR(".......... is ServerActivator running?");
		throw Components::CreateFailure();
	}
	if (CORBA::is_nil(component_server))
	{
		NORMAL_ERR(".......... Component Server is NIL");
		throw Components::CreateFailure();
	}

    return component_server._retn();
}

void
RepAssemblyManagerSessionImpl::instantiate ()
throw(Components::CreateFailure)
{
	MDE::Deployment::HomeInstance_var home; //Components::CCMHome_var home;
	Components::Deployment::Container_var container;
	Components::Deployment::ComponentServer_var component_server;
	MDE::Deployment::ProcessCollocationInstance_var repcolloc;
    
	MDE::Deployment::Configuration_var cfg = assembly_->config();
	if ( !CORBA::is_nil ( cfg ) ) {
		MDE::Deployment::ProcessCollocationSet* pc_set =cfg->colloc();
		unsigned long pc_set_idx = 0;
		while ( pc_set_idx < pc_set->length()) {
			
			component_server = createComponentServer((*pc_set)[pc_set_idx]->destination());
			//
			// register component_server in Runtime Model of repository
			//
			try {
				MDE::Deployment::ProcessCollocationInstanceClass_var collocinst_ref = this->get_rep_root()->process_collocation_instance_ref();
				repcolloc = collocinst_ref->create_process_collocation_instance(::RepUtils::get_strRef(component_server).c_str());
				assinst_->add_colloc(repcolloc);
				DEBUG_OUT("RepAssemblyManagerSessionImpl::instantiate(): process_collocation_instance created");
				
			}
			catch(...){
				NORMAL_ERR( "RepAssemblyManagerSessionImpl:: instantiate(): exception while adding process_collocation_instance to repository");
				throw Components::CreateFailure();
			}

			MDE::Deployment::HomeInstantiationSet* hi_set =(*pc_set)[pc_set_idx]->thehome();
			unsigned long hi_set_idx = 0;
			while ( hi_set_idx < hi_set->length()) {
				//
				// get config values (e.g. container kind)
                //
				MDE::Deployment::DeploymentUnit_var unit =(*hi_set)[hi_set_idx]->unit();
				Components::ConfigValues_var config = get_ConfigValues(unit->prop());
				container = createContainer( component_server, config );
				home = instantiateHome( container, (*hi_set)[hi_set_idx] );
				
				repcolloc->add_thehome(home);

				MDE::Deployment::ComponentInstantiationSet* ci_set =(*hi_set)[hi_set_idx]->comp();
				unsigned long ci_set_idx = 0;
				while ( ci_set_idx < ci_set->length()) {
					instantiateComponent( home, (*ci_set)[ci_set_idx] );
					ci_set_idx++;
				} // end while ci_set

				hi_set_idx++;
			} // end while hi_set
			pc_set_idx++;
		} // end while pc_set
	}
}

	/**
	* create new container
	*/
Components::Deployment::Container_ptr
RepAssemblyManagerSessionImpl::createContainer
(Components::Deployment::ComponentServer_ptr component_server, const ::Components::ConfigValues& config)
throw( Components::CreateFailure )
{
	DEBUG_OUT( "AssemblyImpl: create new container" );

    //
	// create new Container
	//
    Components::Deployment::Container_var container;
	try
	{
        container =	component_server->create_container( config );
	}
	catch (Components::CreateFailure&)
	{
		NORMAL_ERR( "AssemblyImpl: This Component Server cannot create a container of the requested type" );
		throw Components::CreateFailure();
	}
	catch (CORBA::SystemException& ex)
	{
		NORMAL_ERR2( "AssemblyImpl: CORBA::SystemException during create_container() : ", ex );
		throw Components::CreateFailure();
	}

    return container._retn();
};

	/**
	* instantiate components of a home
	*/
void 
RepAssemblyManagerSessionImpl::instantiateComponent (MDE::Deployment::HomeInstance_ptr homeinst, MDE::Deployment::ComponentInstantiation_ptr data)
    throw(Components::CreateFailure)
{
	DEBUG_OUT2( "AssemblyImpl: create new component ", data->name() );

	Components::CCMHome_var home;
	Components::ConfigValues_var config;
	Components::CCMObject_var comp;
	
	// get home
	home = Components::CCMHome::_narrow(::RepUtils::convert_strRef(homeinst->ref()));

	//
	// !! get initial configuration (COACH extension)
	//
	config = get_ConfigValues(data->conf_prop());

	//
	// create with config (COACH extension)
	//
	if( config->length() )
	{
		try
		{
			comp = Components::KeylessCCMHome::_narrow(home)->create_component_with_config(config);
		}
		catch( ... )
		{
			NORMAL_ERR3( "AssemblyImpl: cannot create component ", data->name(), " with config" );
			
			try
			{
				comp = Components::KeylessCCMHome::_narrow(home)->create_component();
			}
			catch( ... )
			{
				NORMAL_ERR2( "AssemblyImpl: cannot create component ", data->name() );
				throw Components::CreateFailure();
			}
		}
	}
	//
	// normal create
	//
	else
	{
		try
		{
			comp = Components::KeylessCCMHome::_narrow(home)->create_component();
		}
		catch( ... )
		{
			NORMAL_ERR2( "AssemblyImpl: cannot create component ", data->name() );
			throw Components::CreateFailure();
		}
	}

	//
	// register component in Runtime Model of repository
	//
	try {
		MDE::Deployment::ComponentInstanceClass_var compInstance_ref= this->get_rep_root()->component_instance_ref();
		MDE::Deployment::ComponentInstance_var repcomp = compInstance_ref->create_component_instance(::RepUtils::get_strRef(comp).c_str(), data->name());
		repcomp->set_instantiation(data);
		homeinst->add_comp(repcomp);
	}
	catch(...){
		NORMAL_ERR2( "RepAssemblyManagerSessionImpl: exception while adding instance to repository id=", data->name());
		throw Components::CreateFailure();
	}

	//
	// property configuration
	//
	config = get_ConfigValues(data->prop());
	if( config->length() )
	{
		DEBUG_OUT2( "AssemblyImpl: configure component ", data->name() );
		//
		// configure with standard configurator
		//
		Qedo::StandardConfiguratorImpl* configurator = new Qedo::StandardConfiguratorImpl();
		try
		{
			configurator->_this()->set_configuration(config);
			configurator->_this()->configure(comp);
		}
		catch( ... )
		{
			NORMAL_ERR2( "AssemblyImpl: cannot configure Component ", data->name() );
			throw Components::CreateFailure();
		}
	}
	//
	// register component
	//
	MDE::Deployment::RegisterComponentInstanceSet* rci_set =data->registration();
	unsigned long rci_set_idx = 0;
	while ( rci_set_idx < rci_set->length()) {
		switch ((*rci_set)[rci_set_idx]->service()) {
			case MDE::Deployment::NAMING :
				DEBUG_OUT2( "RepAssemblyManagerSessionImpl::instantiateComponent(): register name=", (*rci_set)[rci_set_idx]->regname());
				if( !registerName( (*rci_set)[rci_set_idx]->regname(), comp, true ) )
				{
					NORMAL_ERR2( "RepAssemblyManagerSessionImpl::instantiateComponent(): cannot register Component ", data->name() );
				}
				break;
			case MDE::Deployment::TRADING :
				//TODO
				break;
		}
	}	
	
	//// TODO! check with above ?!

	//// register in nameservice
	////
	//if( !(*iter).registration.naming.empty() )
	//{
	//	if( !(*iter).registration.emitter.empty() ) // register ???
	//	{
	//		// TODO
	//	}
	//	else if( !(*iter).registration.provider.empty() ) // register facet
	//	{
	//		// TODO
	//	}
	//	else if( !(*iter).registration.publisher.empty() ) // register publisher
	//	{
	//		// TODO
	//	}
	//	else // register component
	//	{
	//		if( !registerName( (*iter).registration.naming, comp, true ) )
	//		{
	//			NORMAL_ERR2( "AssemblyImpl: cannot register Component", data->name() );
	//		}
	//	}
	//}
}

	/**
	* instantiate home
	*/
MDE::Deployment::HomeInstance_ptr
RepAssemblyManagerSessionImpl::instantiateHome (Components::Deployment::Container_ptr container, MDE::Deployment::HomeInstantiation_ptr data)
    throw(Components::CreateFailure){
    Components::CCMHome_var home;
	MDE::Deployment::HomeInstance_var rephome;

	//// extension, existing home can be referenced
	//if(data.file.length())
	//{
		//
		// create home
		//
		DEBUG_OUT2( "RepAssemblyManagerSessionImpl: create new home ", data->name() );
		try
		{
			Components::ConfigValues_var config = new Components::ConfigValues();
			//MDE::Deployment::DeploymentUnit_ptr deplUnit = data->unit();
			home = container->install_home(data->unit()->uuid(), "", config);
		}
		catch (Components::Deployment::UnknownImplId&)
		{
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl: unknown impl id during install_home() for ", data->name() );
			throw Components::CreateFailure();
		}
		catch (Components::Deployment::ImplEntryPointNotFound&)
		{
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl: entry point not found during install_home() for ", data->name() );
			throw Components::CreateFailure();
		}
		catch (Components::Deployment::InstallationFailure&)
		{
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl: installation failure during install_home() for ", data->name() );
			throw Components::CreateFailure();
		}
		catch (Components::Deployment::InvalidConfiguration&)
		{
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl: invalid configuration during install_home() for ", data->name() );
			throw Components::CreateFailure();
		}
		catch (CORBA::SystemException&)
		{
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl: CORBA system exception during install_home() for ", data->name() );
			throw Components::CreateFailure();
		}

		if (CORBA::is_nil(home))
		{
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl: Component Home is NIL for ", data->name() );
			throw Components::CreateFailure();
		}

		//
		// register created home in Runtime Model of repository
		//
		try {
			MDE::Deployment::HomeInstanceClass_var homeInstance_ref = this->get_rep_root()->home_instance_ref();
			rephome = homeInstance_ref->create_home_instance(::RepUtils::get_strRef(home).c_str(), data->name(), ::RepUtils::get_strRef(container).c_str());
			rephome->set_instantiation(data);
		}
		catch(...){
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl: exception while adding instance to repository id=", data->name());
			throw Components::CreateFailure();
		}

//TODO Check=!
	//}
	//else
 //   {
	//	//
	//	// extension, use referenced home
	//	//
	//	DEBUG_OUT2( "RepAssemblyManagerSessionImpl: resolve home ", data.impl_id );
 //       home = Components::CCMHome::_narrow( resolveName(data.impl_id) );
	//}


	MDE::Deployment::FinderServiceBag* reg_set =data->registerwith();
	unsigned long reg_set_idx = 0;
	while ( reg_set_idx < reg_set->length()) {
		switch ((*reg_set)[reg_set_idx]->service()) {
			case MDE::Deployment::NAMING :
				//
				// registerwithnaming
				//
				DEBUG_OUT2( "RepAssemblyManagerSessionImpl: register home with naming ", (*reg_set)[reg_set_idx]->regname());
				registerName( (*reg_set)[reg_set_idx]->regname(), home, true );
				break;
			case MDE::Deployment::TRADING :
				break;
			case MDE::Deployment::HOMEFINDER :
				break;
		}
		reg_set_idx++;
	};

    return rephome._retn();
}

CORBA::Object_ptr
RepAssemblyManagerSessionImpl::getRef (ReferenceType reftype, const char * name)
throw(Components::CreateFailure)
{
    CORBA::Object_var obj;

	switch(reftype)
	{
	case COMPONENTID:
		try {
			obj = ::RepUtils::convert_strRef(assinst_->get_component_instance_ref(name));
		}
		catch(...){
		}
		break;
	case HOMEID:
		try {
			obj = ::RepUtils::convert_strRef(assinst_->get_home_instance_ref(name));
		}
		catch(...){
		}
		break;
	case NAMING:
		obj = resolveName(name);
		break;
	case OBJECTREF:
		// TODO
		break;
	case TRADER:
		// TODO
		break;
	case FINDER:
		// TODO
		break;
	default:
		break;
	}
    if ( CORBA::is_nil(obj))
    {
		throw Components::CreateFailure();
    }
	return obj._retn();
}

CORBA::Object_ptr
RepAssemblyManagerSessionImpl::getConnRef (MDE::Deployment::ConnectionEnd_ptr connend)
throw(Components::CreateFailure)
{
	ReferenceType reftype;
	string name;

	switch(connend->kind()){
		case MDE::Deployment::COMPONENTINTERFACE:
		case MDE::Deployment::EVENTPORT:
		case MDE::Deployment::EVENTCHANNELPORT:
		//TODO: ?? case MDE::Deployment::COMPONENTSUPPORTEDINTERFACE:
			{ 
//				MDE::Deployment::ComponentInstantiation_var ref = targetconn->int_comp_inst();
				reftype = COMPONENTID;
				name =  connend->int_comp_inst()->name();
				break;
			}
		case MDE::Deployment::HOMEINTERFACE:
			{
				//MDE::Deployment::HomeInstantiation_var ref = targetconn->int_home_inst();
				reftype = HOMEID;
				name =  connend->int_home_inst()->name();
				break;
			}
		case MDE::Deployment::SIMPLEINTERFACE:
			{
				//MDE::Deployment::ExternalInstance_var ref = targetconn->ext_inst();
				reftype = NAMING;
				name =  connend->ext_inst()->objectref();
				break;
			}
	}
	DEBUG_OUT2( "     ref name=", name);
	return getRef(reftype, name.c_str());
}


void
RepAssemblyManagerSessionImpl::connect()
throw(Components::CreateFailure)
{
	MDE::Deployment::Configuration_var cfg = assembly_->config();
	if ( !CORBA::is_nil ( cfg ) ) {
		MDE::Deployment::ConnectionSet* co_set =cfg->conn();
		unsigned long co_set_idx = 0;
		while ( co_set_idx < co_set->length()) {
			DEBUG_OUT2( "RepAssemblyManagerSessionImpl: make connection name=", (*co_set)[co_set_idx]->name());
			if(strcmp((*co_set)[co_set_idx]->name(), "INTERFACECONN") == 0) {
				connectinterface((*co_set)[co_set_idx]);
			}
			else
			if(strcmp((*co_set)[co_set_idx]->name(), "EVENTCONN") == 0) {
				connectevent((*co_set)[co_set_idx]);
			}
			co_set_idx++;
		} // end while co_set
	}
}


void
RepAssemblyManagerSessionImpl::connectinterface (const MDE::Deployment::Connection_ptr conn)
throw(Components::CreateFailure)
{
	std::string receptacle;
	std::string facet;
	Components::CCMObject_var user;
	CORBA::Object_var provider;

	DEBUG_OUT( "RepAssemblyManagerSessionImpl::connectinterface(): make interface connection" );

	MDE::Deployment::ConnectionEnd_var target = conn->target_end(); //.use
	MDE::Deployment::ConnectionEnd_var source = conn->source_end(); //.provide
	//
	// the receptacle port
	//
	receptacle = target->name();
	DEBUG_OUT2( "..... receptacle is ", receptacle );
	DEBUG_OUT( "..... user is "); //, (*iter).use.ref.name );
	user = Components::CCMObject::_narrow( getConnRef(target) );
	
	//
	// the interface to be connected
	//
	DEBUG_OUT( "..... provider is "); //, (*iter).provide.ref.name );
	provider = getConnRef( source );

	//
	// in case of facet get the facet ref
	//
	facet = source->name();
	if( !facet.empty() )
	{
		DEBUG_OUT2( "..... facet is ", facet );
		try
		{
			provider = Components::CCMObject::_narrow(provider)->provide_facet(facet.c_str());
		}
		catch( Components::InvalidName& )
		{
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl::connectinterface(): invalid facet name ", facet );
			throw Components::CreateFailure();
		}
	}

	//
	// make the connection
	//
	Components::Cookie_var cookie;
	try
	{
		cookie = user->connect(receptacle.c_str(), provider);
	}
	catch(Components::InvalidName&)
	{
		NORMAL_ERR2( "RepAssemblyManagerSessionImpl::connectinterface(): invalid receptacle name ", receptacle );
		throw Components::CreateFailure();
	}
	catch( Components::InvalidConnection& )
	{
		NORMAL_ERR2( "RepAssemblyManagerSessionImpl::connectinterface(): invalid connection for ", receptacle );
		throw Components::CreateFailure();
	}
	catch( Components::AlreadyConnected& )
	{
		NORMAL_ERR2( "RepAssemblyManagerSessionImpl::connectinterface(): already connected for ", receptacle );
		throw Components::CreateFailure();
	}
	catch( Components::ExceededConnectionLimit& )
	{
		NORMAL_ERR2( "RepAssemblyManagerSessionImpl::connectinterface(): exceeded connection limit for ", receptacle );
		throw Components::CreateFailure();
	}
}

void
RepAssemblyManagerSessionImpl::connectevent(const MDE::Deployment::Connection_ptr conn)
throw(Components::CreateFailure)
{
	std::string consume;
	std::string emit;
	Components::CCMObject_var consumer;
	Components::EventConsumerBase_var consumer_port;
	Components::CCMObject_var source;

	MDE::Deployment::ConnectionEnd_var targetEnd = conn->target_end(); //.consumer
	MDE::Deployment::ConnectionEnd_var sourceEnd = conn->source_end(); //.emitter

	DEBUG_OUT( "RepAssemblyManagerSessionImpl::connectevent(): make event connection" );
	
	//
	// consumer
	//
	consume = targetEnd->name();
	DEBUG_OUT2( "..... port is ", consume );
	DEBUG_OUT( "..... consumer is "); //, (*iter).consumer.ref.name );
	consumer = Components::CCMObject::_narrow(getConnRef( targetEnd )); //Components::CCMObject::_narrow(getRef((*iter).consumer.ref));
    
	try
	{
		consumer_port = consumer->get_consumer(consume.c_str());
	}
	catch(Components::InvalidName&)
	{
		NORMAL_ERR2( "RepAssemblyManagerSessionImpl::connectevent(): invalid sink name ", consume );
		throw Components::CreateFailure();
	}

	if(sourceEnd->kind() == MDE::Deployment::EVENTPORT)
	{
		//
		// emitter
		//
        source = Components::CCMObject::_narrow(getConnRef( sourceEnd )); //Components::CCMObject::_narrow( getRef((*iter).emitter.ref) );
        emit = sourceEnd->name(); //(*iter).emitter.name;
        DEBUG_OUT( "..... emitter is ");//, (*iter).emitter.ref.name );
		DEBUG_OUT2( "..... port is ", emit );
                
        //
        // connect
        //
      	try
      	{
       		source->connect_consumer( emit.c_str(), consumer_port );
       	}
       	catch(Components::InvalidName&)
       	{
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl::connectevent(): invalid emits name ", emit );
       		throw Components::CreateFailure();
       	}
       	catch(Components::AlreadyConnected&)
        {
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl::connectevent(): already connected with ", emit );
       		throw Components::CreateFailure();
       	}
    }
	else //MDE::Deployment::EVENTCHANNELPORT
	{
		//
		// publishesport
		//
		source = Components::CCMObject::_narrow(getConnRef( sourceEnd )); //Components::CCMObject::_narrow( getRef((*iter).emitter.ref) );
        emit = sourceEnd->name(); //(*iter).emitter.name;
        DEBUG_OUT( "..... publisher is "); //, (*iter).emitter.ref.name );
		DEBUG_OUT2( "..... port is ", emit );

        //
        // connect
        //
        try
       	{
            // returns Cookie TODO
	   		source->subscribe( emit.c_str(), consumer_port );
	   	}
	   	catch( Components::InvalidName& )
	   	{
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl::connectevent(): invalid publishes name ", emit );
	   		throw Components::CreateFailure();
	   	}
    }
}

void
RepAssemblyManagerSessionImpl::configurationComplete()
throw(Components::CreateFailure)
{
	if(CORBA::is_nil(assinst_)) {
		NORMAL_ERR( "RepAssemblyManagerSessionImpl::configurationComplete(): AssemblyInstance reference nil / not set!");
		throw ::Components::CreateFailure();
	}

	DEBUG_OUT2( "RepAssemblyManagerSessionImpl::configurationComplete(): start the application ", assinst_->id() );

	typedef map<unsigned long, MDE::Deployment::ComponentInstance_var, less<unsigned long> > INT2COMP;

	INT2COMP instanceMap;
	INT2COMP::iterator instanceMapIterator;

	//insert to map -> sorting automatically
	MDE::Deployment::ProcessCollocationInstanceSet* coli_set = assinst_->colloc();
	unsigned long rev_idx = 1000;
	for ( unsigned long coli_set_idx = 0; coli_set_idx < coli_set->length(); coli_set_idx++) {
		MDE::Deployment::HomeInstanceSet* hi_set = (*coli_set)[coli_set_idx]->thehome();
		for ( unsigned long hi_set_idx = 0; hi_set_idx < hi_set->length(); hi_set_idx++) {
			MDE::Deployment::ComponentInstanceSet* ci_set = (*hi_set)[hi_set_idx]->comp();
			for ( unsigned long ci_set_idx = 0; ci_set_idx < ci_set->length(); ci_set_idx++) {
				unsigned long idx = (*ci_set)[ci_set_idx]->instantiation()->startorder();
				if (idx == 0 ) idx = rev_idx++;
				DEBUG_OUT3( "addtomap order/id=", idx, (*ci_set)[ci_set_idx]->id() );
				instanceMap.insert(INT2COMP::value_type(idx,(*ci_set)[ci_set_idx]));
			} //while ci_set_idx
		} //while hi_set_idx
	} //while coli_set_idx
	//
    // call configuration complete according to startorder
    //
	DEBUG_OUT( "AssemblyImpl: instanceMap=");
	for ( instanceMapIterator = instanceMap.begin( ) ; instanceMapIterator!= instanceMap.end( ) ; instanceMapIterator++ ) {
		Components::CCMObject_var comp = Components::CCMObject::_narrow(::RepUtils::convert_strRef(instanceMapIterator->second->ref()));
		if( comp )
		{
			try
			{
				DEBUG_OUT2( "..... configuration_complete for ", instanceMapIterator->second->id() );
				comp->configuration_complete();
			}
			catch (CORBA::Exception& ex)
			{
				NORMAL_ERR2( "AssemblyImpl: EXCEPTION during configuration_complete: ", ex );
                throw Components::CreateFailure();
			}
			catch ( ... )
			{
				NORMAL_ERR( "AssemblyImpl: UNKNOWN EXCEPTION during configuration_complete" );
                throw Components::CreateFailure();
			}
		}
	}
	instanceMap.clear();

	// set assembly state to active
	state_ = Components::Deployment::INSERVICE;
}

// END USER INSERT SECTION RepAssemblyManagerSessionImpl


RepAssemblyManagerSessionImpl::RepAssemblyManagerSessionImpl()
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::RepAssemblyManagerSessionImpl
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::RepAssemblyManagerSessionImpl
}


RepAssemblyManagerSessionImpl::~RepAssemblyManagerSessionImpl()
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::~RepAssemblyManagerSessionImpl
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::~RepAssemblyManagerSessionImpl

}


void
RepAssemblyManagerSessionImpl::set_context(::DCI::CCM_RepAssemblyManager_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::DCI::CCM_RepAssemblyManager_ContextImpl::_duplicate(context);
}


void
RepAssemblyManagerSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::configuration_complete
	// TODO: CORBA::ORB_var orb = context_->resolve_service_reference("ORB");
	int dummy = 0;
	orb_ = CORBA::ORB_init (dummy, 0);
	initNameService(orb_);
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::configuration_complete
}


void
RepAssemblyManagerSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::remove
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::remove
}


void
RepAssemblyManagerSessionImpl::assembly_loc(const char* param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::_assembly_loc
	/*
    * Attribute for location of assembly package.
    * 
    * Must be set before the AssemblyManager instance can be used.
	*/
	DEBUG_OUT2("RepAssemblyManagerSessionImpl::assembly_loc(): param=", param);
	assinst_ = MDE::Deployment::AssemblyInstance::_narrow(::RepUtils::get_repRef(param));
	if ( CORBA::is_nil ( assinst_ ) ) {
		NORMAL_ERR( "RepAssemblyManagerSessionImpl::assembly_loc(): AssemblyInstance reference nil!");
		throw CORBA::SystemException();
	}
	assembly_ = assinst_->ass();  //navigate to Assembly
	if ( CORBA::is_nil ( assembly_ ) ) {
		NORMAL_ERR( "RepAssemblyManagerSessionImpl::assembly_loc(): Assembly reference nil!");
		throw CORBA::SystemException();
	}
	DEBUG_OUT("RepAssemblyManagerSessionImpl::assembly_loc(): ...end");
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::_assembly_loc
}


char*
RepAssemblyManagerSessionImpl::assembly_loc()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::assembly_loc
    /*
    * Attribute for location of assembly package.
	*/
	string ret;
	DEBUG_OUT( "RepAssemblyManagerSessionImpl::assembly_loc(): start...");
	if(CORBA::is_nil(assinst_)) {
		NORMAL_ERR( "RepAssemblyManagerSessionImpl::assembly_loc(): AssemblyInstance reference nil / not set!");
		throw CORBA::SystemException();
	}
	ret = ::RepUtils::get_strRefRep(assinst_);
	DEBUG_OUT2( "RepAssemblyManagerSessionImpl::assembly_loc(): ...end return=", ret);
	return strdup(ret.c_str());
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::assembly_loc
}


char*
RepAssemblyManagerSessionImpl::ass_id()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::ass_id
	/*
    * The unique Identifier for this AssemblyManager instance.
    */
	string ret;
	DEBUG_OUT("RepAssemblyManagerSessionImpl::ass_id(): start...");
	if(CORBA::is_nil(assinst_)) {
		NORMAL_ERR( "RepAssemblyManagerSessionImpl::ass_id(): AssemblyInstance reference nil / not set!");
		throw CORBA::SystemException();
	}
	ret = assinst_->id();
	DEBUG_OUT2("RepAssemblyManagerSessionImpl::ass_id(): ...end return=", ret);
	return strdup(ret.c_str());
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::ass_id
}


void
RepAssemblyManagerSessionImpl::build()
	throw(CORBA::SystemException, ::Components::CreateFailure)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::build
	DEBUG_OUT( "RepAssemblyManagerSessionImpl::build(): start...");

////	QedoLock lock (assembly_mutex_);

	if(CORBA::is_nil(assembly_)) {
		NORMAL_ERR( "RepAssemblyManagerSessionImpl::build(): Assembly reference nil / not set!");
		throw ::Components::CreateFailure();
	}
	//
	// instantiate components
	//
	instantiate();

	//
	// make connections
	//
	connect();

	//
	// start components
	//
	configurationComplete();
    
	if(CORBA::is_nil(assinst_)) {
		NORMAL_ERR( "RepAssemblyManagerSessionImpl::build(): AssemblyInstance reference nil / not set!");
		throw ::Components::CreateFailure();
	}
	//AssemblyInstance is "valid"
	assinst_->set_valid(true);

	DEBUG_OUT( "RepAssemblyManagerSessionImpl::build(): ...end -> assembly is running" );
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::build
}


void
RepAssemblyManagerSessionImpl::tear_down()
	throw(CORBA::SystemException, ::Components::RemoveFailure)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::tear_down
	DEBUG_OUT("RepAssemblyManagerSessionImpl::tear_down(): start...");

	if(CORBA::is_nil(assinst_)) {
		NORMAL_ERR( "RepAssemblyManagerSessionImpl::tear_down(): AssemblyInstance reference nil / not set!");
		throw CORBA::SystemException();
	}
	DEBUG_OUT2( "RepAssemblyManagerSessionImpl::tear_down(): tear down the application ", assinst_->id() );

	//QedoLock lock (assembly_mutex_);

	//
	// use reverse start order to remove components
	//
	typedef map<unsigned long, MDE::Deployment::ComponentInstance_var, greater<unsigned long> > INT2COMP;

	INT2COMP instanceMap;
	INT2COMP::iterator instanceMapIterator;

	//insert to map -> sorting automatically
	MDE::Deployment::ProcessCollocationInstanceSet* coli_set = assinst_->colloc();
	unsigned long rev_idx = 1000;
	for ( unsigned long coli_set_idx = 0; coli_set_idx < coli_set->length(); coli_set_idx++) {
		MDE::Deployment::HomeInstanceSet* hi_set = (*coli_set)[coli_set_idx]->thehome();
		for ( unsigned long hi_set_idx = 0; hi_set_idx < hi_set->length(); hi_set_idx++) {
			MDE::Deployment::ComponentInstanceSet* ci_set = (*hi_set)[hi_set_idx]->comp();
			for ( unsigned long ci_set_idx = 0; ci_set_idx < ci_set->length(); ci_set_idx++) {
				unsigned long idx = (*ci_set)[ci_set_idx]->instantiation()->startorder();
				if (idx == 0 ) idx = rev_idx++;
				DEBUG_OUT3( "addtomap order/id=", idx, (*ci_set)[ci_set_idx]->id() );
				instanceMap.insert(INT2COMP::value_type(idx,(*ci_set)[ci_set_idx]));
			} //while ci_set_idx
		} //while hi_set_idx
	} //while coli_set_idx
	//
	// call remove for all components
	//
	for ( instanceMapIterator = instanceMap.begin( ) ; instanceMapIterator!= instanceMap.end( ) ; instanceMapIterator++ ) {
		Components::CCMObject_var comp = Components::CCMObject::_narrow(::RepUtils::convert_strRef(instanceMapIterator->second->ref()));
		try
		{
			DEBUG_OUT2("..... remove ", instanceMapIterator->second->id() );
			//comp = Components::CCMObject::_duplicate( instanceIter->second );
			comp->remove();
		}
		catch (CORBA::Exception&)
		{
			NORMAL_ERR2( "RepAssemblyManagerSessionImpl::tear_down(): EXCEPTION during removal of ", instanceMapIterator->second->id() );
		}
	}

	instanceMap.clear();

	// 
	// remove homes/containers/servers
	//

//	MDE::Deployment::ProcessCollocationInstanceSet* coli_set = assinst_->colloc();
	for ( unsigned long coli_set_idx = 0; coli_set_idx < coli_set->length(); coli_set_idx++) {
		MDE::Deployment::HomeInstanceSet* hi_set = (*coli_set)[coli_set_idx]->thehome();
		for ( unsigned long hi_set_idx = 0; hi_set_idx < hi_set->length(); hi_set_idx++) {
			//
			// remove home
			//

			Components::Deployment::Container_var container = Components::Deployment::Container::_narrow(::RepUtils::convert_strRef((*hi_set)[hi_set_idx]->container_ref()));
			try
			{
				DEBUG_OUT2( "..... remove home ", (*hi_set)[hi_set_idx]->id() );
				Components::CCMHome_var home = Components::CCMHome::_narrow(::RepUtils::convert_strRef((*hi_set)[hi_set_idx]->ref()));
				container->remove_home(home);
			}
			catch (Components::RemoveFailure)
			{
				NORMAL_ERR2( "RepAssemblyManagerSessionImpl::tear_down(): remove home failure for ", (*hi_set)[hi_set_idx]->id() );
			}
			catch (CORBA::Exception)
			{
				NORMAL_ERR2( "RepAssemblyManagerSessionImpl::tear_down(): EXCEPTION during removal of home ", (*hi_set)[hi_set_idx]->id() );
			}

			//
			// remove container
			//
			try
			{
				DEBUG_OUT( "..... remove container" );
				container->remove();
			}
			catch (Components::RemoveFailure)
			{
				NORMAL_ERR( "RepAssemblyManagerSessionImpl::tear_down(): remove container failure" );
			}
			catch (CORBA::Exception)
			{
				NORMAL_ERR( "RepAssemblyManagerSessionImpl::tear_down(): EXCEPTION during removal of container" );
			}
		} //while hi_set_idx

		//
		// remove component server
		//
		try
		{
			DEBUG_OUT( "..... remove component server" );
			Components::Deployment::ComponentServer_var server = Components::Deployment::ComponentServer::_narrow(::RepUtils::convert_strRef((*coli_set)[coli_set_idx]->server_ref()));
			server->remove();
		}
		catch (Components::RemoveFailure)
		{
			NORMAL_ERR( "RepAssemblyManagerSessionImpl::tear_down(): remove component server failure");
		}
		catch (CORBA::Exception)
		{
			NORMAL_ERR( "RepAssemblyManagerSessionImpl::tear_down(): EXCEPTION during removal of container" );
		}
	} //while coli_set_idx

	////
	//// uninstall
	////
	//uninstall();

	assinst_->set_valid(false);

	DEBUG_OUT3( "RepAssemblyManagerSessionImpl::tear_down(): application ",  assinst_->id(), " is teared down");

	DEBUG_OUT("RepAssemblyManagerSessionImpl::tear_down(): ...end");
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::tear_down
}


Components::Deployment::AssemblyState
RepAssemblyManagerSessionImpl::get_state()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::get_state
	DEBUG_OUT("RepAssemblyManagerSessionImpl::get_state(): start...");
	DEBUG_OUT2("RepAssemblyManagerSessionImpl::get_state(): ...end return=", state_);
    return state_;
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::get_state
}


CORBA::Boolean
RepAssemblyManagerSessionImpl::is_dynamic_information()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::is_dynamic_information
	DEBUG_OUT("RepAssemblyManagerSessionImpl::is_dynamic_information(): start...");
	DEBUG_OUT("RepAssemblyManagerSessionImpl::is_dynamic_information(): ...end");
    throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::is_dynamic_information
}


DCI::DeploymentDescriptors*
RepAssemblyManagerSessionImpl::descriptors()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::descriptors
	DEBUG_OUT("RepAssemblyManagerSessionImpl::descriptors(): start...");
	DEBUG_OUT("RepAssemblyManagerSessionImpl::descriptors(): ...end");
    throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::descriptors
}


char*
RepAssemblyManagerSessionImpl::get_assembly_descriptor()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::get_assembly_descriptor
	string ret;
	DEBUG_OUT("RepAssemblyManagerSessionImpl::get_assembly_descriptor(): start...");
	if(CORBA::is_nil(assembly_)) {
		NORMAL_ERR( "RepAssemblyManagerSessionImpl::get_assembly_descriptor(): Assembly reference nil / not set!");
		throw CORBA::SystemException();
	}
	ret = assembly_->descriptor();
	DEBUG_OUT2("RepAssemblyManagerSessionImpl::get_assembly_descriptor(): ...end return=", ret);
	return strdup(ret.c_str());
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::get_assembly_descriptor
}


DCI::InstalledHomes*
RepAssemblyManagerSessionImpl::get_homes()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::get_homes
	DEBUG_OUT("RepAssemblyManagerSessionImpl::get_homes(): start...");
	DEBUG_OUT("RepAssemblyManagerSessionImpl::get_homes(): ...end");
    throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::get_homes
}


DCI::RunningComponents*
RepAssemblyManagerSessionImpl::get_components()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl::get_components
	DEBUG_OUT("RepAssemblyManagerSessionImpl::get_components(): start...");
	DEBUG_OUT("RepAssemblyManagerSessionImpl::get_components(): ...end");
    throw CORBA::NO_IMPLEMENT();
// END USER INSERT SECTION RepAssemblyManagerSessionImpl::get_components
}


// BEGIN USER INSERT SECTION RepAssemblyManagerImpl
// END USER INSERT SECTION RepAssemblyManagerImpl


RepAssemblyManagerImpl::RepAssemblyManagerImpl()
:component_(new RepAssemblyManagerSessionImpl())
{
// BEGIN USER INSERT SECTION RepAssemblyManagerImpl::RepAssemblyManagerImpl
// END USER INSERT SECTION RepAssemblyManagerImpl::RepAssemblyManagerImpl
}


RepAssemblyManagerImpl::~RepAssemblyManagerImpl()
{
// BEGIN USER INSERT SECTION RepAssemblyManagerImpl::~RepAssemblyManagerImpl
// END USER INSERT SECTION RepAssemblyManagerImpl::~RepAssemblyManagerImpl

    component_->_remove_ref();
}


::CORBA::Object*
RepAssemblyManagerImpl::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "assembly")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "assembly_information")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
RepAssemblyManagerImpl::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
RepAssemblyManagerImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION RepAssemblyManagerImpl::configuration_complete
// END USER INSERT SECTION RepAssemblyManagerImpl::configuration_complete
}


void
RepAssemblyManagerImpl::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::DCI::CCM_RepAssemblyManager_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::DCI::CCM_RepAssemblyManager_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::DCI::CCM_RepAssemblyManager_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::DCI::CCM_RepAssemblyManager_ContextImpl::_nil();
        
    #else
    context_ = ::DCI::CCM_RepAssemblyManager_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
RepAssemblyManagerImpl::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerImpl::ccm_activate
// END USER INSERT SECTION RepAssemblyManagerImpl::ccm_activate
}


void
RepAssemblyManagerImpl::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerImpl::ccm_passivate
// END USER INSERT SECTION RepAssemblyManagerImpl::ccm_passivate
}


void
RepAssemblyManagerImpl::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerImpl::ccm_remove
// END USER INSERT SECTION RepAssemblyManagerImpl::ccm_remove
}


// BEGIN USER INSERT SECTION RepAssemblyManagerHomeImpl
MDE::Deployment::AssemblyInstance_ptr
RepAssemblyManagerHomeImpl::get_assemblyInstance(Components::Cookie* c) {
	
	//extract assinstuuid from cookie
	Qedo::Cookie_impl* cookie = dynamic_cast<Qedo::Cookie_impl*>(c);
	if (! cookie) {
		NORMAL_ERR( "RepAssemblyManagerHomeImpl::get_assemblyInstance(): could not cast cookie!");
		throw CORBA::SystemException();
	}
	DEBUG_OUT2( "RepAssemblyManagerHomeImpl::get_assemblyInstance(): extract from cookie assinstuuid=", cookie->to_string());
	string assinstuuid = ::RepUtils::get_String(cookie->cookieValue());

	//lookup assinst
	MDE::Deployment::DeploymentPackage_var deployment_pkg_ref;
	deployment_pkg_ref = MDE::Deployment::DeploymentPackage::_narrow(get_rep_facet("rep_root_proxy"));

	MDE::Deployment::AssemblyInstanceClass_var assinst_ref = deployment_pkg_ref->assembly_instance_ref();
	if ( CORBA::is_nil ( assinst_ref ) ) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::get_assemblyInstance(): AssemblyInstanceClass reference nil!");
		throw CORBA::SystemException();
	}
	MDE::Deployment::AssemblyInstance_var assinst;
	try {
		assinst = assinst_ref->lookup(assinstuuid.c_str());
	}
	catch(...){
		NORMAL_ERR("RepAssemblyManagerHomeImpl::get_assemblyInstance(): lookup AssemblyInstance failed!");
		throw CORBA::SystemException();
	}
	if ( CORBA::is_nil ( assinst ) ) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::get_assemblyInstance(): AssemblyInstance reference nil!");
		throw CORBA::SystemException();
	}
	return assinst._retn();
}

CORBA::Object_ptr
RepAssemblyManagerHomeImpl::get_rep_facet(const char* facetname) {

	CORBA::Object_var obj;
	
	DEBUG_OUT2("RepAssemblyManagerHomeImpl::get_rep_facet(): start... facetname=", facetname);
	
	//get connection to repository via naming-service
	obj = resolveName(DCI_REPOSITORY_ENTRY);
    if ( CORBA::is_nil(obj))
    {
		NORMAL_ERR2("RepAssemblyManagerHomeImpl::get_rep_facet(): repository reference not found in nameservice! entry=", DCI_REPOSITORY_ENTRY);
		throw CORBA::SystemException();
    }
	DCI::Repository_var repo = DCI::Repository::_narrow(obj);
    if ( CORBA::is_nil(repo))
    {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::get_rep_facet(): repository reference nil!");
		throw CORBA::SystemException();
    }
	if(strcmp(facetname, "")) {
		try {
			obj = repo->provide_facet(facetname);
		}
		catch(...){
			NORMAL_ERR("RepAssemblyManagerHomeImpl::get_rep_facet(): provide_facet() failed!");
			throw CORBA::SystemException();
		}
		if ( CORBA::is_nil(obj))
		{
			NORMAL_ERR("RepAssemblyManagerHomeImpl::get_rep_facet(): facet nil!");
			throw CORBA::SystemException();
		}

		if(!strcmp(facetname, "rep_root_proxy")) {
			DCI::RepositoryDeploymentRoot_var reproot = DCI::RepositoryDeploymentRoot::_narrow(obj);
			if ( CORBA::is_nil(reproot))
			{
				NORMAL_ERR("RepAssemblyManagerHomeImpl::get_rep_facet(): RepositoryDeploymentRoot nil!");
				throw CORBA::SystemException();
			}
			try {
				obj = reproot->get_root_package();
			}
			catch(...) {
				NORMAL_ERR("RepAssemblyManagerHomeImpl::get_rep_facet(): get_root_package failed!");
				throw CORBA::SystemException();
			}
			MDE::Deployment::DeploymentPackage_var deployment_pkg_ref;
			try {
				deployment_pkg_ref = MDE::Deployment::DeploymentPackage::_narrow(obj);
			}
			catch(...) {
				NORMAL_ERR("RepAssemblyManagerHomeImpl::get_rep_facet(): DeploymentPackage narrow failed!");
				throw CORBA::SystemException();
			}
			if ( CORBA::is_nil ( deployment_pkg_ref ) ) {
				NORMAL_ERR("RepAssemblyManagerHomeImpl::get_rep_facet(): DeploymentPackage nil!");
				throw CORBA::SystemException();
			}
		}
		else
		if(!strcmp(facetname, "rep_feeder")) {
			DCI::RepFeeder_var repfeeder = DCI::RepFeeder::_narrow(obj);
			if ( CORBA::is_nil(repfeeder))
			{
				NORMAL_ERR("RepAssemblyManagerHomeImpl::get_rep_facet(): RepFeeder nil!");
				throw CORBA::SystemException();
			}
		}
		else {
			NORMAL_ERR2("RepAssemblyManagerHomeImpl::get_rep_facet(): unknown facet=", facetname);
			throw CORBA::SystemException();
		};
	}; //strcmp
	DEBUG_OUT("RepAssemblyManagerHomeImpl::get_rep_facet(): ...end");
	return obj._retn();
}
// END USER INSERT SECTION RepAssemblyManagerHomeImpl


RepAssemblyManagerHomeImpl::RepAssemblyManagerHomeImpl()
{
// BEGIN USER INSERT SECTION RepAssemblyManagerHomeImpl::RepAssemblyManagerHomeImpl
	// TODO: CORBA::ORB_var orb = context_->resolve_service_reference("ORB");
	int dummy = 0;
	orb_ = CORBA::ORB_init (dummy, 0);
	initNameService(orb_);
// END USER INSERT SECTION RepAssemblyManagerHomeImpl::RepAssemblyManagerHomeImpl
}


RepAssemblyManagerHomeImpl::~RepAssemblyManagerHomeImpl()
{
// BEGIN USER INSERT SECTION RepAssemblyManagerHomeImpl::~RepAssemblyManagerHomeImpl
// END USER INSERT SECTION RepAssemblyManagerHomeImpl::~RepAssemblyManagerHomeImpl

}


void
RepAssemblyManagerHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
RepAssemblyManagerHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerHomeImpl::create
// END USER INSERT SECTION RepAssemblyManagerHomeImpl::create
    return new RepAssemblyManagerImpl();
}


Components::Cookie*
RepAssemblyManagerHomeImpl::create_assembly(const char* assembly_loc)
	throw(CORBA::SystemException, ::Components::Deployment::InvalidLocation, ::Components::CreateFailure)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerHomeImpl::create_assembly
	DEBUG_OUT2( "RepAssemblyManagerHomeImpl::create_assembly(): start... assembly_loc=", assembly_loc );

	CORBA::Object_var obj;
	DCI::RepFeeder_var repfeeder;
	MDE::Deployment::Assembly_var ass;
	string assinstuuid_;
	Qedo::Cookie_impl* new_cookie;

	//
	// exclusive
	//
	//	Qedo::QedoLock lock(&mutex_);

	//get connection to repository
	try {
		repfeeder = DCI::RepFeeder::_narrow(get_rep_facet("rep_feeder"));
	}
	catch(...) {
		throw Components::CreateFailure();
	}

	//transfer assembly to repository
	try {
		obj = repfeeder->feed_assembly_with_url(assembly_loc);
	}
	catch(...) {
		throw Components::CreateFailure();
	}
	ass = MDE::Deployment::Assembly::_narrow(obj);
	if ( CORBA::is_nil ( ass ) ) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::create_assembly(): assembly reference nil!");
		throw ::Components::CreateFailure();
	}

	//create assembly using the (standard) DCI-create method ...
	try {
		obj = this->create_assembly_from_dci(ass);
	}
	catch(...) {
		throw ::Components::CreateFailure();
	}
	MDE::Deployment::AssemblyInstance_var assinst = MDE::Deployment::AssemblyInstance::_narrow(obj);
	if ( CORBA::is_nil ( assinst ) ) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::create_assembly(): AssemblyInstance reference nil!");
		throw ::Components::CreateFailure();
	}
	assinstuuid_ = assinst->id();

	// create new cookie with assinstuuid
	new_cookie = new Qedo::Cookie_impl();
	CORBA::OctetSeq_var os = ::RepUtils::get_OctetSeq(assinstuuid_.c_str());
	new_cookie->cookieValue(os);

	const char * s =  new_cookie->to_string();
	std::string uuid = s;
	CORBA::string_free(const_cast<char*>(s));

	DEBUG_OUT( "RepAssemblyManagerHomeImpl::create_assembly(): ..... done" );
	return new_cookie;
// END USER INSERT SECTION RepAssemblyManagerHomeImpl::create_assembly
}


Components::Deployment::Assembly_ptr
RepAssemblyManagerHomeImpl::lookup(Components::Cookie* c)
	throw(CORBA::SystemException, ::Components::Deployment::InvalidAssembly)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerHomeImpl::lookup
	////
	//// exclusive
	////
	//Qedo::QedoLock lock(&mutex_);
	Components::Deployment::Assembly_var assemblyif_;

	DEBUG_OUT( "RepAssemblyManagerHomeImpl::lookup(): start ..." );
	
	//get AssemblyInstance
	MDE::Deployment::AssemblyInstance_var assinst;
	try {
		assinst = get_assemblyInstance(c);
	}
	catch(...) {
		throw ::Components::Deployment::InvalidAssembly();
	}

	//get assembly interface
	DCI::RepAssemblyManager_var assmgr = DCI::RepAssemblyManager::_narrow(::RepUtils::convert_strRef(assinst->ref()));
	assemblyif_ = Components::Deployment::Assembly::_narrow(assmgr->provide_facet("assembly"));

	DEBUG_OUT( "RepAssemblyManagerHomeImpl::lookup(): .....end" );
	return assemblyif_._retn();
// END USER INSERT SECTION RepAssemblyManagerHomeImpl::lookup
}


void
RepAssemblyManagerHomeImpl::destroy(Components::Cookie* c)
	throw(CORBA::SystemException, ::Components::Deployment::InvalidAssembly, ::Components::RemoveFailure)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerHomeImpl::destroy
	DEBUG_OUT( "RepAssemblyManagerHomeImpl::destroy(): start ..." );
	////
	//// exclusive
	////
	//QedoLock lock(&mutex_);

	//get AssemblyInstance
	MDE::Deployment::AssemblyInstance_var assinst;
	try {
		assinst = get_assemblyInstance(c);
	}
	catch(...) {
		throw ::Components::Deployment::InvalidAssembly();
	}

	//destroy assembly using the (standard) DCI-destroy method ...
	try {
		this->destroy_from_dci(assinst);
	}
	catch(...){
		throw ::Components::RemoveFailure();
	}
	DEBUG_OUT( "RepAssemblyManagerHomeImpl::destroy(): ...end");
// END USER INSERT SECTION RepAssemblyManagerHomeImpl::destroy
}


CORBA::Object_ptr
RepAssemblyManagerHomeImpl::create_assembly_from_dci(CORBA::Object_ptr assemblyRef)
	throw(CORBA::SystemException, ::DCI::CreationFailure)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerHomeImpl::create_assembly_from_dci
	string assinstuuid;

	DEBUG_OUT( "RepAssemblyManagerHomeImpl::create_assembly_from_dci(): start ..." );
	//
	// check assembly location
	//
	MDE::Deployment::Assembly_var ass = MDE::Deployment::Assembly::_narrow(assemblyRef);
	if( CORBA::is_nil ( ass ) ) 
	{
		NORMAL_ERR("RepAssemblyManagerHomeImpl::create_assembly_from_dci(): assembly reference nil!");
		throw ::DCI::CreationFailure();
	}

	//
	// create new assembly manager
	//
	DCI::RepAssemblyManagerHome_var assmgrhome = DCI::RepAssemblyManagerHome::_narrow(context_->get_CCM_home());
	DCI::RepAssemblyManager_var assmgrsession = DCI::RepAssemblyManager::_narrow(assmgrhome->create_component());


	MDE::Deployment::DeploymentPackage_var deployment_pkg_ref;
	try {
		deployment_pkg_ref = MDE::Deployment::DeploymentPackage::_narrow(get_rep_facet("rep_root_proxy"));
	}
	catch(...) {
		throw ::DCI::CreationFailure();
	}
	//set connection to repository
	try {
		assmgrsession->connect("repository", get_rep_facet("")); //connect with DCI::Repository
	}
	catch(...) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::create_assembly_from_dci(): error while connecting with repository!");
		throw ::DCI::CreationFailure();
	}

	MDE::Deployment::AssemblyInstanceClass_var assinst_ref = deployment_pkg_ref->assembly_instance_ref();
	if ( CORBA::is_nil ( assinst_ref ) ) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::create_assembly_from_dci(): AssemblyInstanceClass reference nil!");
		throw ::DCI::CreationFailure();
	}

	//generate assembly instance uuid
	assinstuuid = Qedo::createUUID();

	//create AssemblyInstance (reference to AssemblyManager)
	string assref(::RepUtils::get_strRef(assmgrsession));
	DEBUG_OUT3("RepAssemblyManagerHomeImpl::create_assembly_from_dci(): create AssemblyInstance uuid/ref=", assinstuuid, assref.c_str());
	MDE::Deployment::AssemblyInstance_var assinst;
	try {
		//set to "invalid", until complete repository-transaction after build()
		assinst = assinst_ref->create_assembly_instance(assref.c_str(), assinstuuid.c_str(), false);
	}
	catch(...) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::create_assembly_from_dci(): error while creating AssemblyInstance!");
		throw ::DCI::CreationFailure();
	}
	//set connections between AssemblyInstance and Assembly
    try {
		ass->add_ass_inst(assinst);
		assinst->set_ass(ass);
	}
	catch(...) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::create_assembly_from_dci(): error while connecting AssemblyInstance and Assembly!");
		throw ::DCI::CreationFailure();
	}

	//reference to AssemblyInstance 
	assmgrsession->assembly_loc(::RepUtils::get_strRefRep(assinst).c_str());
	assmgrsession->configuration_complete();

	DEBUG_OUT( "RepAssemblyManagerHomeImpl::create_assembly_from_dci(): ... end");
	return assinst._retn();
// END USER INSERT SECTION RepAssemblyManagerHomeImpl::create_assembly_from_dci
}


void
RepAssemblyManagerHomeImpl::destroy_from_dci(CORBA::Object_ptr assemblyInstanceRef)
	throw(CORBA::SystemException, ::DCI::DestroyError)
{
// BEGIN USER INSERT SECTION RepAssemblyManagerHomeImpl::destroy_from_dci
	DEBUG_OUT( "RepAssemblyManagerHomeImpl::destroy_from_dci(): start ..." );
	
	//get assembly manager
	MDE::Deployment::AssemblyInstance_var assinst = MDE::Deployment::AssemblyInstance::_narrow(assemblyInstanceRef);
	if ( CORBA::is_nil ( assinst ) ) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::destroy_from_dci(): assemblyInstanceRef nil!");
		throw ::DCI::DestroyError();
	}
	DCI::RepAssemblyManager_var assmgrsession = DCI::RepAssemblyManager::_narrow(::RepUtils::convert_strRef(assinst->ref()));
	if ( CORBA::is_nil ( assmgrsession ) ) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::destroy_from_dci(): RepAssemblyManager nil!");
		throw ::DCI::DestroyError();
	}

	//
	// destroy
	//
	DCI::RepAssemblyManagerHome_var assmgrhome = DCI::RepAssemblyManagerHome::_narrow(context_->get_CCM_home());
	if ( CORBA::is_nil ( assmgrhome ) ) {
		NORMAL_ERR("RepAssemblyManagerHomeImpl::destroy_from_dci(): RepAssemblyManagerHome nil!");
		throw ::DCI::DestroyError();
	}
	assmgrhome->remove_component(assmgrsession);

	//TODO: delete assinst in repo

	DEBUG_OUT( "RepAssemblyManagerHomeImpl::destroy_from_dci(): ... end" );
// END USER INSERT SECTION RepAssemblyManagerHomeImpl::destroy_from_dci
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_RepAssemblyManagerHomeE(void)
{
// BEGIN USER INSERT SECTION create_RepAssemblyManagerHome
// END USER INSERT SECTION create_RepAssemblyManagerHome

    return new ::DCI::RepAssemblyManagerHomeImpl();
}

