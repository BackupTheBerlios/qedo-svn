//
// generated by Qedo
//

#include "SimpleStream_SinkCompo.h"


// BEGIN USER INSERT SECTION file
// END USER INSERT SECTION file


namespace SimpleStream {


// BEGIN USER INSERT SECTION SinkImpl
// END USER INSERT SECTION SinkImpl


SinkImpl::SinkImpl()
{
// BEGIN USER INSERT SECTION SinkImpl::SinkImpl
// END USER INSERT SECTION SinkImpl::SinkImpl
}


SinkImpl::~SinkImpl()
{
// BEGIN USER INSERT SECTION SinkImpl::~SinkImpl
// END USER INSERT SECTION SinkImpl::~SinkImpl

}


void
SinkImpl::set_context(::SimpleStream::CCM_StreamSink_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::SimpleStream::CCM_StreamSink_ContextImpl::_duplicate(context);
}


void
SinkImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION SinkImpl::configuration_complete
// END USER INSERT SECTION SinkImpl::configuration_complete
}


void
SinkImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SinkImpl::remove
// END USER INSERT SECTION SinkImpl::remove
}


void
SinkImpl::begin_stream_input (const char* repos_id, const ::Components::ConfigValues& meta_data)
{
// BEGIN USER INSERT SECTION SinkImpl::begin_stream_input
// END USER INSERT SECTION SinkImpl::begin_stream_input
}


void
SinkImpl::end_stream_input()
{
// BEGIN USER INSERT SECTION SinkImpl::end_stream_input
// END USER INSERT SECTION SinkImpl::end_stream_input
}


void
SinkImpl::failed_stream_input()
{
// BEGIN USER INSERT SECTION SinkImpl::failed_stream_input
// END USER INSERT SECTION SinkImpl::failed_stream_input
}


void
SinkImpl::receive_stream_input (StreamComponents::StreamingBuffer_ptr buffer)
{
// BEGIN USER INSERT SECTION SinkImpl::receive_stream_input
		std::cout << (char*) buffer->get_buffer() << std::endl;
// END USER INSERT SECTION SinkImpl::receive_stream_input
}


// BEGIN USER INSERT SECTION SinkCompo
// END USER INSERT SECTION SinkCompo


SinkCompo::SinkCompo()
:component_(new SinkImpl())
{
// BEGIN USER INSERT SECTION SinkCompo::SinkCompo
// END USER INSERT SECTION SinkCompo::SinkCompo
}


SinkCompo::~SinkCompo()
{
// BEGIN USER INSERT SECTION SinkCompo::~SinkCompo
// END USER INSERT SECTION SinkCompo::~SinkCompo

    component_->_remove_ref();
}


::CORBA::Object*
SinkCompo::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "input")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
SinkCompo::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
SinkCompo::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION SinkCompo::configuration_complete
// END USER INSERT SECTION SinkCompo::configuration_complete
}


void
SinkCompo::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::SimpleStream::CCM_StreamSink_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::SimpleStream::CCM_StreamSink_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::SimpleStream::CCM_StreamSink_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::SimpleStream::CCM_StreamSink_ContextImpl::_nil();
        
    #else
    context_ = ::SimpleStream::CCM_StreamSink_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
SinkCompo::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SinkCompo::ccm_activate
// END USER INSERT SECTION SinkCompo::ccm_activate
}


void
SinkCompo::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SinkCompo::ccm_passivate
// END USER INSERT SECTION SinkCompo::ccm_passivate
}


void
SinkCompo::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SinkCompo::ccm_remove
// END USER INSERT SECTION SinkCompo::ccm_remove
}


// BEGIN USER INSERT SECTION SinkHomeImpl
// END USER INSERT SECTION SinkHomeImpl


SinkHomeImpl::SinkHomeImpl()
{
// BEGIN USER INSERT SECTION SinkHomeImpl::SinkHomeImpl
// END USER INSERT SECTION SinkHomeImpl::SinkHomeImpl
}


SinkHomeImpl::~SinkHomeImpl()
{
// BEGIN USER INSERT SECTION SinkHomeImpl::~SinkHomeImpl
// END USER INSERT SECTION SinkHomeImpl::~SinkHomeImpl

}


void
SinkHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
    
}


::Components::EnterpriseComponent_ptr
SinkHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION SinkHomeImpl::create
// END USER INSERT SECTION SinkHomeImpl::create
    return new SinkCompo();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_StreamSinkHomeE(void)
{
// BEGIN USER INSERT SECTION create_StreamSinkHome
// END USER INSERT SECTION create_StreamSinkHome

    return new ::SimpleStream::SinkHomeImpl();
}

