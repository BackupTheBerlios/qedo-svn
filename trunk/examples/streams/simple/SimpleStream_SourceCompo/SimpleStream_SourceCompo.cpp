//
// generated by Qedo
//

#include "SimpleStream_SourceCompo.h"


// BEGIN USER INSERT SECTION file
// END USER INSERT SECTION file


namespace SimpleStream {


// BEGIN USER INSERT SECTION SourceImpl
void*
SourceImpl::sender_thread_initiator (void* data)
{
	SourceImpl* this_ptr = static_cast<SourceImpl*>(data);
	this_ptr->sender_thread();

	return data;
}


void
SourceImpl::sender_thread()
{
	Components::ConfigValues meta_data;

	try
	{
		context_->begin_stream_output ("IDL:SimpleStream/LongStream:1.0", meta_data);
	}
	catch (StreamComponents::UnsupportedStreamtype&)
	{
		std::cerr << "MODAStreamServerSessionImpl: Unexpected exception UnsupportedStreamtype" << std::endl;
		return;
	}
	catch (StreamComponents::DuplicateStream&)
	{
		std::cerr << "MODAStreamServerSessionImpl: Unexpected exception DuplicateStream?" << std::endl;
		return;
	}

	while (!stopped_)
	{
		StreamComponents::StreamingBuffer_var buffer = context_->get_streaming_buffer (28);

		strcpy((char*)buffer->get_buffer(), "This is a streaming message");
		context_->send_stream_output (buffer);
	}
}

// END USER INSERT SECTION SourceImpl


SourceImpl::SourceImpl()
{
// BEGIN USER INSERT SECTION SourceImpl::SourceImpl
	stopped_ = false;
	thread_ = Components::Thread::_nil();
// END USER INSERT SECTION SourceImpl::SourceImpl
}


SourceImpl::~SourceImpl()
{
// BEGIN USER INSERT SECTION SourceImpl::~SourceImpl
// END USER INSERT SECTION SourceImpl::~SourceImpl

}


void
SourceImpl::set_context(::SimpleStream::CCM_StreamSource_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::SimpleStream::CCM_StreamSource_ContextImpl::_duplicate(context);
}


void
SourceImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION SourceImpl::configuration_complete
	stopped_ = false;
	thread_ = context_->start_thread (sender_thread_initiator, this);
// END USER INSERT SECTION SourceImpl::configuration_complete
}


void
SourceImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SourceImpl::remove
	stopped_ = true;

	if (! CORBA::is_nil (thread_))
		thread_->join();
// END USER INSERT SECTION SourceImpl::remove
}


// BEGIN USER INSERT SECTION SourceCompo
// END USER INSERT SECTION SourceCompo


SourceCompo::SourceCompo()
:component_(new SourceImpl())
{
// BEGIN USER INSERT SECTION SourceCompo::SourceCompo
// END USER INSERT SECTION SourceCompo::SourceCompo
}


SourceCompo::~SourceCompo()
{
// BEGIN USER INSERT SECTION SourceCompo::~SourceCompo
// END USER INSERT SECTION SourceCompo::~SourceCompo

    component_->_remove_ref();
}


::CORBA::Object*
SourceCompo::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
SourceCompo::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
SourceCompo::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION SourceCompo::configuration_complete
// END USER INSERT SECTION SourceCompo::configuration_complete
}


void
SourceCompo::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::SimpleStream::CCM_StreamSource_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::SimpleStream::CCM_StreamSource_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::SimpleStream::CCM_StreamSource_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::SimpleStream::CCM_StreamSource_ContextImpl::_nil();
        
    #else
    context_ = ::SimpleStream::CCM_StreamSource_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
SourceCompo::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SourceCompo::ccm_activate
// END USER INSERT SECTION SourceCompo::ccm_activate
}


void
SourceCompo::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SourceCompo::ccm_passivate
// END USER INSERT SECTION SourceCompo::ccm_passivate
}


void
SourceCompo::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SourceCompo::ccm_remove
	component_->remove();
// END USER INSERT SECTION SourceCompo::ccm_remove
}


// BEGIN USER INSERT SECTION SourceHomeImpl
// END USER INSERT SECTION SourceHomeImpl


SourceHomeImpl::SourceHomeImpl()
{
// BEGIN USER INSERT SECTION SourceHomeImpl::SourceHomeImpl
// END USER INSERT SECTION SourceHomeImpl::SourceHomeImpl
}


SourceHomeImpl::~SourceHomeImpl()
{
// BEGIN USER INSERT SECTION SourceHomeImpl::~SourceHomeImpl
// END USER INSERT SECTION SourceHomeImpl::~SourceHomeImpl

}


void
SourceHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
    
}


::Components::EnterpriseComponent_ptr
SourceHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION SourceHomeImpl::create
// END USER INSERT SECTION SourceHomeImpl::create
    return new SourceCompo();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_StreamSourceHomeE(void)
{
// BEGIN USER INSERT SECTION create_StreamSourceHome
// END USER INSERT SECTION create_StreamSourceHome

    return new ::SimpleStream::SourceHomeImpl();
}

