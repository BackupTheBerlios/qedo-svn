//
// generated by Qedo
//

#ifndef _dinner_PhilosopherImpl_H_
#define _dinner_PhilosopherImpl_H_


// BEGIN USER INSERT SECTION file_pre
namespace dinner {
	class PhilosopherSessionImpl;
}

#ifdef WIN32
#include "PhilosophersExecutors.h"
#include "PhilosopherGUI.h"
#else
#include "philo_gui.h"
#endif
// END USER INSERT SECTION file_pre


#include <OB/CORBA.h>
#include "dinner_BUSINESS.h"
#include <string>


// BEGIN USER INSERT SECTION file_post
#include <string>
#include <vector>
#include <sstream>
#include "Output.h"
#include "Cookie.h"


using namespace std;


namespace dinner {

//
// A Thread class with interruptable sleep()
//
class ThreadWithTimer : 
#if defined (HAVE_JTC) || defined (WIN32)
public virtual JTCThread, public virtual JTCMonitor
#else
#ifdef HAVE_PTHREAD_H
public virtual MICOMT::Thread
#else
#error No threads configured
#endif
#endif
{
protected:
	void timer_sleep ( long millis );

public:
	ThreadWithTimer();
	~ThreadWithTimer();
	void wake_up ();
#if !defined(HAVE_JTC) &&  defined(HAVE_PTHREAD_H)
	virtual void run() = 0;
	void _run(void *);
#endif
};


#ifdef WIN32
//
// thread for the win32 gui
//
class GUIThread : public virtual JTCThread, public virtual JTCMonitor
{

public:
	PhilosopherGUI* gui_;
	dinner::PhilosopherSessionImpl* philo;
	bool stopped_;

public:
	GUIThread ();
	~GUIThread ();

	void run ();
};
#endif

}
// END USER INSERT SECTION file_post


namespace dinner
{
    
    //
    // executor
    //
    class PhilosopherSessionImpl
        : public virtual CORBA::LocalObject
        , public virtual ::dinner::CCM_PhilosopherSessionImpl
// BEGIN USER INSERT SECTION INHERITANCE_PhilosopherSessionImpl
, public virtual ThreadWithTimer
// END USER INSERT SECTION INHERITANCE_PhilosopherSessionImpl
    {
    
    private:
    
        ::DiningPhilosophers::CCM_Philosopher_Context_var context_;
        
    public:
    
        PhilosopherSessionImpl();
        ~PhilosopherSessionImpl();
        
        void set_context(::DiningPhilosophers::CCM_Philosopher_Context_ptr context);
        void configuration_complete();
        void stop();
        void remove();
        
        //
        // IDL:DiningPhilosophers/Philosopher/name:1.0
        //
        void name(const char* param)
        	throw(CORBA::SystemException);
        char* name()
        	throw(CORBA::SystemException);
    
// BEGIN USER INSERT SECTION PhilosopherSessionImpl
private :
       bool right_hander_;
       string id_;
       bool stopped_;
       int tickTime_;

#ifdef WIN32
       GUIThread* gui_thread;
#else
       int philosopher_gui;
#endif

public:
       DiningPhilosophers::PhilosopherState status;

       PhilosopherSessionImpl (string name, int tick, bool right_hander);
       void run ();
// END USER INSERT SECTION PhilosopherSessionImpl

    };
    
    
    //
    // executor locator
    //
    class PhilosopherImpl
        : public virtual CORBA::LocalObject
        , public virtual Components::SessionExecutorLocator
// BEGIN USER INSERT SECTION INHERITANCE_PhilosopherImpl
// END USER INSERT SECTION INHERITANCE_PhilosopherImpl
    {
    
    private:
    
        ::DiningPhilosophers::CCM_Philosopher_Context_var context_;
        
        PhilosopherSessionImpl* component_;
        
    public:
    
        PhilosopherImpl();
        ~PhilosopherImpl();
        
        //
        // IDL:Components/ExecutorLocator/obtain_executor:1.0
        //
        virtual CORBA::Object_ptr obtain_executor(const char* name)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/release_executor:1.0
        //
        virtual void release_executor(CORBA::Object_ptr exc)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/configuration_complete:1.0
        //
        virtual void configuration_complete()
        	throw(CORBA::SystemException, ::Components::InvalidConfiguration);
        
        //
        // IDL:Components/SessionComponent/set_session_context:1.0
        //
        virtual void set_session_context(Components::SessionContext_ptr ctx)
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_activate:1.0
        //
        virtual void ccm_activate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_passivate:1.0
        //
        virtual void ccm_passivate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_remove:1.0
        //
        virtual void ccm_remove()
        	throw(CORBA::SystemException, ::Components::CCMException);
    
// BEGIN USER INSERT SECTION PhilosopherImpl
private:
       Components::EnterpriseComponent_var component_executor_;

       bool right_hander_;
       string my_name_;
       int tickTime_;
       HU_CCM_Container::Monitor monitor_;

public:
       PhilosopherImpl (const char* my_name, int tick, bool right_hander);
// END USER INSERT SECTION PhilosopherImpl

    };
    
    
    //
    // home executor
    //
    class PhilosopherHomeImpl
        : public virtual CORBA::LocalObject
        , public virtual ::DiningPhilosophers::CCM_PhilosopherHome
// BEGIN USER INSERT SECTION INHERITANCE_PhilosopherHomeImpl
// END USER INSERT SECTION INHERITANCE_PhilosopherHomeImpl
    {
    
    private:
    
        Components::CCMContext_ptr context_;
        
    public:
        PhilosopherHomeImpl();
        ~PhilosopherHomeImpl();
        
        //
        // IDL:Components/HomeExecutorBase/set_context:1.0
        //
        virtual void set_context (Components::CCMContext_ptr ctx);
        
        //
        // IDL:.../create:1.0
        //
        virtual ::Components::EnterpriseComponent_ptr create();
        
        //
        // IDL:DiningPhilosophers/PhilosopherHome/new:1.0
        //
        virtual ::Components::EnterpriseComponent_ptr _cxx_new(const char* name)
        	throw(CORBA::SystemException);
    
// BEGIN USER INSERT SECTION PhilosopherHomeImpl
// END USER INSERT SECTION PhilosopherHomeImpl

    };
    
};

//
// entry point
//
extern "C" {
#ifdef _WIN32
__declspec(dllexport)
#else
#endif
::Components::HomeExecutorBase_ptr create_PhilosopherHomeE(void);
}

#endif