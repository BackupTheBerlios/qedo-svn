//
// generated by Qedo
//

#ifndef _dinner_CutleryImpl_H_
#define _dinner_CutleryImpl_H_


// BEGIN USER INSERT SECTION file_pre
#ifdef WIN32
#include "CutleryExecutor.h"
#include "CutleryGUI.h"
#else
#include <unix_gui.h>
#endif
#include <string>
#include <vector>
#include "ComponentOutput.h"
#include "Cookie.h"
#include "RefCountLocalObject.h"

// END USER INSERT SECTION file_pre


#include <CORBA.h>
#include "dinner_BUSINESS.h"
#include <string>


// BEGIN USER INSERT SECTION file_post
#ifdef HAVE_FSTREAM
#   include <fstream>
#else
#   include <fstream.h>
#endif

#ifdef HAVE_STD_IOSTREAM
using namespace std;
#endif
// END USER INSERT SECTION file_post


namespace dinner
{
    
    //
    // executor
    //
    class CutlerySessionImpl
        : public virtual CORBA::LocalObject
        , public virtual ::dinner::CCM_CutlerySessionImpl
// BEGIN USER INSERT SECTION INHERITANCE_CutlerySessionImpl
// END USER INSERT SECTION INHERITANCE_CutlerySessionImpl
    {
    
    private:
    
        ::DiningPhilosophers::CCM_ForkManager_Context_var context_;
        
    public:
    
        CutlerySessionImpl();
        ~CutlerySessionImpl();
        
        void set_context(::DiningPhilosophers::CCM_ForkManager_Context_ptr context)
            throw (CORBA::SystemException, Components::CCMException);
        
        void configuration_complete()
            throw (CORBA::SystemException, Components::InvalidConfiguration);
        
        void remove()
            throw (CORBA::SystemException);
        
    
// BEGIN USER INSERT SECTION CutlerySessionImpl
private:
	string id_;
// END USER INSERT SECTION CutlerySessionImpl

    };
    
    
    //
    // segment
    //
    class Seg
        : public virtual CORBA::LocalObject
        , public virtual ::dinner::CCM_Seg
// BEGIN USER INSERT SECTION INHERITANCE_Seg
#ifdef WIN32
, public JTCThread
#endif
, public JTCMonitor
// END USER INSERT SECTION INHERITANCE_Seg
    {
    
    private:
    
        ::DiningPhilosophers::CCM_ForkManager_Context_var context_;
        
    public:
    
        Seg();
        ~Seg();
        
        void set_context(::DiningPhilosophers::CCM_ForkManager_Context_ptr context)
            throw (CORBA::SystemException, Components::CCMException);
        
        void configuration_complete()
            throw (CORBA::SystemException, Components::InvalidConfiguration);
        
        
        //
        // IDL:DiningPhilosophers/Fork/get:1.0
        //
        virtual void get()
        	throw(CORBA::SystemException, ::DiningPhilosophers::InUse);
        
        //
        // IDL:DiningPhilosophers/Fork/release:1.0
        //
        virtual void release()
        	throw(CORBA::SystemException);
    
// BEGIN USER INSERT SECTION Seg
private:
	static int last_fork;
	string _id;
    CORBA::Boolean owner;
	bool running_;
#ifdef WIN32
	CCutleryGUI *fork_gui;
	JTCInitialize *initialize_;
#else
    int gui_handle;
#endif

public:
	void finish();
#ifdef WIN32
	void run();
#else
	void start();
#endif
// END USER INSERT SECTION Seg

    };
    
    
    //
    // executor locator
    //
    class CutleryImpl
        : public virtual CORBA::LocalObject
        , public virtual Components::SessionExecutorLocator
// BEGIN USER INSERT SECTION INHERITANCE_CutleryImpl
// END USER INSERT SECTION INHERITANCE_CutleryImpl
    {
    
    private:
    
        ::DiningPhilosophers::CCM_ForkManager_Context_var context_;
        
        CutlerySessionImpl* component_;
        
        Seg* Seg_;
        
    public:
    
        CutleryImpl();
        ~CutleryImpl();
        
        //
        // IDL:Components/ExecutorLocator/obtain_executor:1.0
        //
        virtual CORBA::Object_ptr obtain_executor(const char* name)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/release_executor:1.0
        //
        virtual void release_executor(CORBA::Object_ptr exc)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/configuration_complete:1.0
        //
        virtual void configuration_complete()
        	throw(CORBA::SystemException, ::Components::InvalidConfiguration);
        
        //
        // IDL:Components/SessionComponent/set_session_context:1.0
        //
        virtual void set_session_context(Components::SessionContext_ptr ctx)
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_activate:1.0
        //
        virtual void ccm_activate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_passivate:1.0
        //
        virtual void ccm_passivate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_remove:1.0
        //
        virtual void ccm_remove()
        	throw(CORBA::SystemException, ::Components::CCMException);
    
// BEGIN USER INSERT SECTION CutleryImpl
private:
	Components::EnterpriseComponent_var component_executor_;
	Components::EnterpriseComponent_var fork_executor_;

	JTCMonitor monitor_;
// END USER INSERT SECTION CutleryImpl

    };
    
    
    //
    // home executor
    //
    class CutleryHomeImpl
        : public virtual CORBA::LocalObject
        , public virtual ::DiningPhilosophers::CCM_ForkHome
// BEGIN USER INSERT SECTION INHERITANCE_CutleryHomeImpl
// END USER INSERT SECTION INHERITANCE_CutleryHomeImpl
    {
    
    private:
    
        Components::CCMContext_ptr context_;
        
    public:
        CutleryHomeImpl();
        ~CutleryHomeImpl();
        
        //
        // IDL:Components/HomeExecutorBase/set_context:1.0
        //
        virtual void set_context (Components::CCMContext_ptr ctx)
            throw (CORBA::SystemException, Components::CCMException);
        
        //
        // IDL:.../create:1.0
        //
        virtual ::Components::EnterpriseComponent_ptr create()
            throw (CORBA::SystemException, Components::CreateFailure);
    
// BEGIN USER INSERT SECTION CutleryHomeImpl
// END USER INSERT SECTION CutleryHomeImpl

    };
    
};

//
// entry point
//
extern "C" {
#ifdef _WIN32
__declspec(dllexport)
#else
#endif
::Components::HomeExecutorBase_ptr create_ForkHomeE(void);
}

#endif
