//
// generated by Qedo
//

#include "auction_BidderImpl.h"


// BEGIN USER INSERT SECTION file
// END USER INSERT SECTION file


namespace auction {


// BEGIN USER INSERT SECTION BidderSessionImpl
// END USER INSERT SECTION BidderSessionImpl


BidderSessionImpl::BidderSessionImpl()
{
// BEGIN USER INSERT SECTION BidderSessionImpl::BidderSessionImpl
// END USER INSERT SECTION BidderSessionImpl::BidderSessionImpl
}


BidderSessionImpl::~BidderSessionImpl()
{
// BEGIN USER INSERT SECTION BidderSessionImpl::~BidderSessionImpl
// END USER INSERT SECTION BidderSessionImpl::~BidderSessionImpl

}


void
BidderSessionImpl::set_context(::auction::CCM_Bidder_Context_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::auction::CCM_Bidder_Context::_duplicate(context);
}


void
BidderSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION BidderSessionImpl::configuration_complete
// END USER INSERT SECTION BidderSessionImpl::configuration_complete
}


void
BidderSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION BidderSessionImpl::remove
// END USER INSERT SECTION BidderSessionImpl::remove
}


void
BidderSessionImpl::amount(CORBA::Long param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION BidderSessionImpl::_amount
// END USER INSERT SECTION BidderSessionImpl::_amount
}


CORBA::Long
BidderSessionImpl::amount()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION BidderSessionImpl::amount
// END USER INSERT SECTION BidderSessionImpl::amount
}


void
BidderSessionImpl::item(const char* param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION BidderSessionImpl::_item
// END USER INSERT SECTION BidderSessionImpl::_item
}


char*
BidderSessionImpl::item()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION BidderSessionImpl::item
// END USER INSERT SECTION BidderSessionImpl::item
}


void
BidderSessionImpl::sold(CORBA::Long amount)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION BidderSessionImpl::sold
// END USER INSERT SECTION BidderSessionImpl::sold
}


void
BidderSessionImpl::push_event (Components::EventBase* ev)
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION BidderSessionImpl::push_event
// END USER INSERT SECTION BidderSessionImpl::push_event
}


void
BidderSessionImpl::push_GiveBid(::auction::GiveBid* ev)
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION BidderSessionImpl::push_GiveBid
// END USER INSERT SECTION BidderSessionImpl::push_GiveBid
}


// BEGIN USER INSERT SECTION BidderImpl
// END USER INSERT SECTION BidderImpl


BidderImpl::BidderImpl()
:component_(new BidderSessionImpl())
{
// BEGIN USER INSERT SECTION BidderImpl::BidderImpl
// END USER INSERT SECTION BidderImpl::BidderImpl
}


BidderImpl::~BidderImpl()
{
// BEGIN USER INSERT SECTION BidderImpl::~BidderImpl
// END USER INSERT SECTION BidderImpl::~BidderImpl

    component_->_remove_ref();
}


::CORBA::Object*
BidderImpl::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "for_auctioneer")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
BidderImpl::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
BidderImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION BidderImpl::configuration_complete
// END USER INSERT SECTION BidderImpl::configuration_complete
}


void
BidderImpl::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::auction::CCM_Bidder_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::auction::CCM_Bidder_Context*>(context);
    
    if (tmp_context)
        context_ = ::auction::CCM_Bidder_Context::_duplicate(tmp_context);
    else
        context_ = ::auction::CCM_Bidder_Context::_nil();
        
    #else
    context_ = ::auction::CCM_Bidder_Context::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
BidderImpl::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION BidderImpl::ccm_activate
// END USER INSERT SECTION BidderImpl::ccm_activate
}


void
BidderImpl::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION BidderImpl::ccm_passivate
// END USER INSERT SECTION BidderImpl::ccm_passivate
}


void
BidderImpl::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION BidderImpl::ccm_remove
// END USER INSERT SECTION BidderImpl::ccm_remove
}


// BEGIN USER INSERT SECTION BidderHomeImpl
// END USER INSERT SECTION BidderHomeImpl


BidderHomeImpl::BidderHomeImpl()
{
// BEGIN USER INSERT SECTION BidderHomeImpl::BidderHomeImpl
// END USER INSERT SECTION BidderHomeImpl::BidderHomeImpl
}


BidderHomeImpl::~BidderHomeImpl()
{
// BEGIN USER INSERT SECTION BidderHomeImpl::~BidderHomeImpl
// END USER INSERT SECTION BidderHomeImpl::~BidderHomeImpl

}


void
BidderHomeImpl::set_context(Components::CCMContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::CCMContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
BidderHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION BidderHomeImpl::create
// END USER INSERT SECTION BidderHomeImpl::create
    return new BidderImpl();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_BiddersE(void)
{
// BEGIN USER INSERT SECTION create_Bidders
// END USER INSERT SECTION create_Bidders

    return new ::auction::BidderHomeImpl();
}

