//
// generated by Qedo
//

#include "auction_SellerImpl.h"


// BEGIN USER INSERT SECTION file
// END USER INSERT SECTION file


namespace auction {


// BEGIN USER INSERT SECTION SellerSessionImpl
// END USER INSERT SECTION SellerSessionImpl


SellerSessionImpl::SellerSessionImpl()
{
// BEGIN USER INSERT SECTION SellerSessionImpl::SellerSessionImpl
// END USER INSERT SECTION SellerSessionImpl::SellerSessionImpl
}


SellerSessionImpl::~SellerSessionImpl()
{
// BEGIN USER INSERT SECTION SellerSessionImpl::~SellerSessionImpl
// END USER INSERT SECTION SellerSessionImpl::~SellerSessionImpl

}


void
SellerSessionImpl::set_context(::auction::CCM_Seller_Context_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::auction::CCM_Seller_Context::_duplicate(context);
}


void
SellerSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION SellerSessionImpl::configuration_complete
// END USER INSERT SECTION SellerSessionImpl::configuration_complete
}


void
SellerSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SellerSessionImpl::remove
// END USER INSERT SECTION SellerSessionImpl::remove
}


void
SellerSessionImpl::item(const char* param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SellerSessionImpl::_item
// END USER INSERT SECTION SellerSessionImpl::_item
}


char*
SellerSessionImpl::item()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SellerSessionImpl::item
// END USER INSERT SECTION SellerSessionImpl::item
}


void
SellerSessionImpl::minimum(CORBA::Long param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SellerSessionImpl::_minimum
// END USER INSERT SECTION SellerSessionImpl::_minimum
}


CORBA::Long
SellerSessionImpl::minimum()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SellerSessionImpl::minimum
// END USER INSERT SECTION SellerSessionImpl::minimum
}


void
SellerSessionImpl::amount(CORBA::Long param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SellerSessionImpl::_amount
// END USER INSERT SECTION SellerSessionImpl::_amount
}


CORBA::Long
SellerSessionImpl::amount()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SellerSessionImpl::amount
// END USER INSERT SECTION SellerSessionImpl::amount
}


void
SellerSessionImpl::pay(CORBA::Long cnt, CORBA::Long amount)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SellerSessionImpl::pay
// END USER INSERT SECTION SellerSessionImpl::pay
}


// BEGIN USER INSERT SECTION SellerImpl
// END USER INSERT SECTION SellerImpl


SellerImpl::SellerImpl()
:component_(new SellerSessionImpl())
{
// BEGIN USER INSERT SECTION SellerImpl::SellerImpl
// END USER INSERT SECTION SellerImpl::SellerImpl
}


SellerImpl::~SellerImpl()
{
// BEGIN USER INSERT SECTION SellerImpl::~SellerImpl
// END USER INSERT SECTION SellerImpl::~SellerImpl

    component_->_remove_ref();
}


::CORBA::Object*
SellerImpl::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "for_auctioneer")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
SellerImpl::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
SellerImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION SellerImpl::configuration_complete
// END USER INSERT SECTION SellerImpl::configuration_complete
}


void
SellerImpl::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::auction::CCM_Seller_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::auction::CCM_Seller_Context*>(context);
    
    if (tmp_context)
        context_ = ::auction::CCM_Seller_Context::_duplicate(tmp_context);
    else
        context_ = ::auction::CCM_Seller_Context::_nil();
        
    #else
    context_ = ::auction::CCM_Seller_Context::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
SellerImpl::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SellerImpl::ccm_activate
// END USER INSERT SECTION SellerImpl::ccm_activate
}


void
SellerImpl::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SellerImpl::ccm_passivate
// END USER INSERT SECTION SellerImpl::ccm_passivate
}


void
SellerImpl::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SellerImpl::ccm_remove
// END USER INSERT SECTION SellerImpl::ccm_remove
}


// BEGIN USER INSERT SECTION SellerHomeImpl
// END USER INSERT SECTION SellerHomeImpl


SellerHomeImpl::SellerHomeImpl()
{
// BEGIN USER INSERT SECTION SellerHomeImpl::SellerHomeImpl
// END USER INSERT SECTION SellerHomeImpl::SellerHomeImpl
}


SellerHomeImpl::~SellerHomeImpl()
{
// BEGIN USER INSERT SECTION SellerHomeImpl::~SellerHomeImpl
// END USER INSERT SECTION SellerHomeImpl::~SellerHomeImpl

}


void
SellerHomeImpl::set_context(Components::CCMContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::CCMContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
SellerHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION SellerHomeImpl::create
// END USER INSERT SECTION SellerHomeImpl::create
    return new SellerImpl();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_SellersE(void)
{
// BEGIN USER INSERT SECTION create_Sellers
// END USER INSERT SECTION create_Sellers

    return new ::auction::SellerHomeImpl();
}

