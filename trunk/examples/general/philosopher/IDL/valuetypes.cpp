//
// generated by Qedo
//

#include "valuetypes.h"
#include "Output.h"


// BEGIN USER INSERT SECTION file
namespace dinner {

CORBA::LongLong Cookie_impl::cookie_key_ = 0;

//
// Cookie
//
Cookie_impl::Cookie_impl()
{
	CORBA::OctetSeq_var octet_key = new CORBA::OctetSeq();

	octet_key->length (8);

	for (unsigned int i = 0; i < 8; i++)
	{
		(*octet_key)[i] = ((char*)(&cookie_key_))[i];
	}

	cookieValue (octet_key.in());

    ++cookie_key_;
}


Cookie_impl::~Cookie_impl
()
{
}


CORBA::Boolean 
Cookie_impl::equal (Components::Cookie* cook)
{
	Cookie_impl* foreign_cook = dynamic_cast<Cookie_impl*>(cook);

	if (! foreign_cook)
		return false;

	CORBA::OctetSeq x = cookieValue();
	CORBA::OctetSeq y = foreign_cook->cookieValue();

	for (unsigned int i = 0; i < x.length(); i++)
	{
		if (x[i] != y[i])
			return false;
    }
    
	return true;
}


CORBA::ValueBase*
CookieFactory_impl::create_for_unmarshal()
{
	return new Cookie_impl();
}

};
// END USER INSERT SECTION file


namespace dinner {
    void
    PhilosopherStateImpl::operator= (const PhilosopherStateImpl& v)
    {
        status( v.status() );
        name( v.name() );
        ref( v.ref() );
// BEGIN USER INSERT SECTION PhilosopherStateImpl::operator=
// END USER INSERT SECTION PhilosopherStateImpl::operator=
    }
    
    
    PhilosopherStateImpl::PhilosopherStateImpl(const PhilosopherStateImpl& v)
    {
        status( v.status() );
        name( v.name() );
        ref( v.ref() );
// BEGIN USER INSERT SECTION PhilosopherStateImpl::PhilosopherStateImpl1
// END USER INSERT SECTION PhilosopherStateImpl::PhilosopherStateImpl1
    }
    
    
    PhilosopherStateImpl::PhilosopherStateImpl(dinner::PhilosopherStatus status, const char* name, dinner::Philosopher_ptr ref)
    : ::OBV_dinner::PhilosopherState(status, name, ref)
    {
// BEGIN USER INSERT SECTION PhilosopherStateImpl::PhilosopherStateImpl2
// END USER INSERT SECTION PhilosopherStateImpl::PhilosopherStateImpl2
    }
    
    
    PhilosopherStateImpl::PhilosopherStateImpl()
    {
// BEGIN USER INSERT SECTION PhilosopherStateImpl::PhilosopherStateImpl3
// END USER INSERT SECTION PhilosopherStateImpl::PhilosopherStateImpl3
    }
    
    
    PhilosopherStateImpl::~PhilosopherStateImpl()
    {
// BEGIN USER INSERT SECTION PhilosopherStateImpl::~PhilosopherStateImpl
// END USER INSERT SECTION PhilosopherStateImpl::~PhilosopherStateImpl
    }
    
    
    CORBA::ValueBase*
    PhilosopherStateImpl::_copy_value()
    {
        PhilosopherStateImpl *val = new PhilosopherStateImpl(* this);
// BEGIN USER INSERT SECTION PhilosopherStateImpl::_copy_value
// END USER INSERT SECTION PhilosopherStateImpl::_copy_value
        return val;
    }
    
    
    CORBA::ValueBase *
    PhilosopherStateFactoryImpl::create_for_unmarshal ()
    {
        return new ::dinner::PhilosopherStateImpl();
    }
    
    
    PhilosopherStateFactoryImpl::PhilosopherStateFactoryImpl()
    {
        int dummy = 0;
        CORBA::ORB_var orb = CORBA::ORB_init (dummy, 0);
        CORBA::ValueFactoryBase* oldFact;
        oldFact = orb->register_value_factory ("IDL:dinner/PhilosopherState:1.0", this);
        if (oldFact) DEBUG_OUT("factory for IDL:dinner/PhilosopherState:1.0 already registered");
    }
    
    
    static PhilosopherStateFactoryImpl PhilosopherStateFactory_instance;
};
