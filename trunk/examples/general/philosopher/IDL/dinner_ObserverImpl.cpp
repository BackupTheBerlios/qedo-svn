//
// generated by Qedo
//

#include "dinner_ObserverImpl.h"


// BEGIN USER INSERT SECTION file
#include "ExecutorValuetypes.h"

#include <iostream>
#include "Output.h"

using namespace std;
// END USER INSERT SECTION file


namespace dinner {


// BEGIN USER INSERT SECTION ObserverSessionImpl
// END USER INSERT SECTION ObserverSessionImpl


ObserverSessionImpl::ObserverSessionImpl()
: ref_count_ (1)
{
// BEGIN USER INSERT SECTION ObserverSessionImpl::ObserverSessionImpl
// END USER INSERT SECTION ObserverSessionImpl::ObserverSessionImpl
}


ObserverSessionImpl::~ObserverSessionImpl()
{
// BEGIN USER INSERT SECTION ObserverSessionImpl::~ObserverSessionImpl
	cout << "ObserverSessionImpl: Destructor called" << endl;
// END USER INSERT SECTION ObserverSessionImpl::~ObserverSessionImpl
assert (ref_count_ == 0);
}


void
ObserverSessionImpl::_add_ref()
{
    ++ref_count_;
}


void
ObserverSessionImpl::_remove_ref()
{
    if (--ref_count_ == 0)
    {
        delete this;
    }
}


unsigned long
ObserverSessionImpl::_get_refcount()
{
    return ref_count_;
}


void
ObserverSessionImpl::set_context(::dinner::CCM_Observer_Context_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::dinner::CCM_Observer_Context::_duplicate(context);
}


void
ObserverSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION ObserverSessionImpl::configuration_complete
// END USER INSERT SECTION ObserverSessionImpl::configuration_complete
}


void
ObserverSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION ObserverSessionImpl::remove
// END USER INSERT SECTION ObserverSessionImpl::remove
}


void
ObserverSessionImpl::push_event (Components::EventBase* ev)
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION ObserverSessionImpl::push_event
	dinner::PhilosopherState* e = dinner::PhilosopherState::_downcast (ev);
	
	if (!e) 
	{
		// handle error
    }

    this->push_PhilosopherState (e);
// END USER INSERT SECTION ObserverSessionImpl::push_event
}


void
ObserverSessionImpl::push_PhilosopherState(::dinner::PhilosopherState* ev)
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION ObserverSessionImpl::push_PhilosopherState
	cout << "ObserverSessionImpl: EVENT: Philosoph " << ev->name() << " is ";

	switch (ev->status())
	{
	case dinner::THINKING:
		cout << "thinking";
		break;
	case dinner::HUNGRY:
		cout << "hungry";
		break;
	case dinner::EATING:
		cout << "eating";
		break;
	case dinner::SLEEPING:
		cout << "sleeping";
		break;
	case dinner::DEAD:
		cout << "dead" << endl;
		break;
	}

	cout << endl;
// END USER INSERT SECTION ObserverSessionImpl::push_PhilosopherState
}


// BEGIN USER INSERT SECTION ObserverImpl
// END USER INSERT SECTION ObserverImpl


ObserverImpl::ObserverImpl()
: ref_count_ (1)
, component_(new ObserverSessionImpl())
{
// BEGIN USER INSERT SECTION ObserverImpl::ObserverImpl
// END USER INSERT SECTION ObserverImpl::ObserverImpl
}


ObserverImpl::~ObserverImpl()
{
    component_->_remove_ref();

// BEGIN USER INSERT SECTION ObserverImpl::~ObserverImpl
	cout << "ObserverImpl: Destructor called" << endl;
// END USER INSERT SECTION ObserverImpl::~ObserverImpl
assert (ref_count_ == 0);
}


void
ObserverImpl::_add_ref()
{
    ++ref_count_;
}


void
ObserverImpl::_remove_ref()
{
    if (--ref_count_ == 0)
    {
        delete this;
    }
}


unsigned long
ObserverImpl::_get_refcount()
{
    return ref_count_;
}


::CORBA::Object*
ObserverImpl::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
ObserverImpl::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
ObserverImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION ObserverImpl::configuration_complete
// END USER INSERT SECTION ObserverImpl::configuration_complete
}


void
ObserverImpl::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = dynamic_cast<::dinner::CCM_Observer_Context*>(context);
    
    component_->set_context(context_);
}


void
ObserverImpl::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION ObserverImpl::ccm_activate
	cout << "ObserverImpl: ccm_activate() called" << endl;
// END USER INSERT SECTION ObserverImpl::ccm_activate
}


void
ObserverImpl::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION ObserverImpl::ccm_passivate
	cout << "ObserverImpl: ccm_passivate() called" << endl;
// END USER INSERT SECTION ObserverImpl::ccm_passivate
}


void
ObserverImpl::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION ObserverImpl::ccm_remove
	cout << "ObserverImpl: ccm_remove() called" << endl;
// END USER INSERT SECTION ObserverImpl::ccm_remove
}


// BEGIN USER INSERT SECTION ObserverHomeImpl
// END USER INSERT SECTION ObserverHomeImpl


ObserverHomeImpl::ObserverHomeImpl()
: ref_count_ (1)
{
// BEGIN USER INSERT SECTION ObserverHomeImpl::ObserverHomeImpl
// END USER INSERT SECTION ObserverHomeImpl::ObserverHomeImpl
}


ObserverHomeImpl::~ObserverHomeImpl()
{
// BEGIN USER INSERT SECTION ObserverHomeImpl::~ObserverHomeImpl
	cout << "ObserverHomeImpl: Destructor called" << endl;
// END USER INSERT SECTION ObserverHomeImpl::~ObserverHomeImpl
assert (ref_count_ == 0);
}


void
ObserverHomeImpl::_add_ref()
{
    ++ref_count_;
}


void
ObserverHomeImpl::_remove_ref()
{
    if (--ref_count_ == 0)
    {
        delete this;
    }
}


unsigned long
ObserverHomeImpl::_get_refcount()
{
    return ref_count_;
}


void
ObserverHomeImpl::set_context(Components::CCMContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::CCMContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
ObserverHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION ObserverHomeImpl::create
	cout << "ObserverHomeImpl: create() called" << endl;
// END USER INSERT SECTION ObserverHomeImpl::create
    return new ObserverImpl();
}


dinner::PhilosopherState*
ObserverHomeImpl::my_name()
{
// BEGIN USER INSERT SECTION ObserverHomeImpl::my_name
	return 0;
// END USER INSERT SECTION ObserverHomeImpl::my_name
}


void
ObserverHomeImpl::muell(CORBA::Long l)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION ObserverHomeImpl::muell
// END USER INSERT SECTION ObserverHomeImpl::muell
}


::Components::EnterpriseComponent_ptr
ObserverHomeImpl::do_it(const char* name, dinner::PhilosopherState* state)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION ObserverHomeImpl::do_it
	return 0;
// END USER INSERT SECTION ObserverHomeImpl::do_it
}


::Components::EnterpriseComponent_ptr
ObserverHomeImpl::find_it(const char* name)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION ObserverHomeImpl::find_it
	return 0;
// END USER INSERT SECTION ObserverHomeImpl::find_it
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_ObserverHomeE(void)
{
// BEGIN USER INSERT SECTION create_ObserverHome
	// This is a preliminary hack to register the valuetype factories
	int dummy = 0;
	CORBA::ORB_var orb = CORBA::ORB_init (dummy, 0);

	CORBA::ValueFactoryBase* oldFact;
	oldFact = orb->register_value_factory ("IDL:dinner/PhilosopherState:1.0", new dinner::PhilosopherStateFactory_impl() );
// END USER INSERT SECTION create_ObserverHome

    return new ::dinner::ObserverHomeImpl();
}

