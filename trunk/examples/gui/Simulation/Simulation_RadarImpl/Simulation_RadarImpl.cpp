//
// generated by Qedo
//

#include "Simulation_RadarImpl.h"


// BEGIN USER INSERT SECTION file
#include <FL/fl_draw.H>

#ifdef _WIN32
#define sleep(X) Sleep(X*1000)
#endif

void
RadarDisplay::draw() {
 Fl_Window::draw();
    fl_color(FL_BLACK);
//	fl_rectf(10,10,w()-20,h()-20);
	fl_pie(10,10,w()-20, h()-20, 0, 360);

	int inner = impl_->pixel_radius_ / 3;

    fl_color(FL_GREEN);
	fl_arc((impl_->pixel_radius_ + 10) - inner,
		(impl_->pixel_radius_ + 10) - inner,
		(2 * inner),
		(2 * inner), 0, 360);
	//fl_arc(75,75,w()-150, h()-150, 0, 360);

	fl_line(impl_ -> pixel_radius_ + 10 ,10 ,impl_ -> pixel_radius_ +10 ,(2 * impl_ -> pixel_radius_) +10 );
	fl_line(10, impl_ -> pixel_radius_ + 10 ,(2 * impl_ -> pixel_radius_) + 10 , impl_ -> pixel_radius_ + 10 );

	fl_color(FL_RED);
	if (impl_->current_data_set_)
	{
		try 
		{
			// draw planes
			impl_->current_data_mutex_->lock();

			CORBA::ULong index ;
			for (index=0;index < impl_->current_data->length(); index++)
			{
				Simulation::RadarData *temp_data = impl_->current_data;
//				std::cout << "cur " << ((*temp_data)[index].position.longitude) << std::endl;
		//		fl_rectf((*temp_data)[index].position.longitude,impl_->current_data[index].position.latitude,5,5);
				int x_pix = (((((*temp_data)[index].position.longitude)-(impl_->longitude_) )* impl_->scale_ ) + impl_->pixel_radius_) + 10;
				int y_pix = (((((*temp_data)[index].position.latitude)-(impl_->latitude_) )* (impl_->scale_ * -1)) + impl_->pixel_radius_) + 10;
				std::cout << "x: " << x_pix << " y: " << y_pix << std::endl;
				fl_rectf(x_pix,y_pix,5,5);
			}
		} catch (...) {};
		impl_->current_data_mutex_->unlock();
		
	}
	//test 
};
 
// END USER INSERT SECTION file


namespace Simulation {


// BEGIN USER INSERT SECTION RadarSessionImpl

void
RadarSessionImpl::scan()
{
	data_stopped = false;
	while (!data_stopped) 
	{

		// get_data
		std::cout << "get_data" << std::endl;
//		x_pos_plane_test++;
//		y_pos_plane_test++;
		Simulation::Position own_pos;
		own_pos.longitude=longitude_;
		own_pos.latitude=latitude_;
		own_pos.altitude=0;
		current_data_mutex_->lock();
		try {
			current_data = context_ ->get_connection_sim_server()->get_data(own_pos, radius_);
			current_data_set_ = true;
			RadarEventImpl *current_event = new RadarEventImpl(id_.c_str(), own_pos, *current_data, radius_);
			context_ -> push_to_tac_display(current_event);
		} catch (...) {};
		current_data_mutex_->unlock();
		window->redraw();
		sleep(1);
	}

}
void*
RadarSessionImpl::run(void *p)
{

	RadarSessionImpl* impl;
	impl = static_cast<RadarSessionImpl*>(p);
	impl->scan();

	return 0;
}

void
RadarSessionImpl::stop()
{
	data_stopped = true;
	data_thread->join();

}

void*
RadarSessionImpl::start_gui(void *p)
{
	RadarSessionImpl* impl;
	impl = static_cast<RadarSessionImpl*>(p);

	impl->gui_stopped = false;

	impl->window = //new Fl_Double_Window(300,180, "Radar1");
		new RadarDisplay((2 * impl->pixel_radius_) + 20 ,(2 * impl->pixel_radius_ ) + 20 , impl, impl->id_.c_str());

	  impl->window->end();
	  impl->window->show();

	while (Fl::check()) 
	{
		if ( impl->gui_stopped) 
		{
			break;
		}
		sleep(1);

	};


	return 0;
}

void
RadarSessionImpl::stop_gui()
{
	gui_stopped = true;
	delete window;
//	gui_thread->join();

}

// END USER INSERT SECTION RadarSessionImpl


RadarSessionImpl::RadarSessionImpl()
{
// BEGIN USER INSERT SECTION RadarSessionImpl::RadarSessionImpl
	data_stopped = true;
	gui_stopped = true;
	current_data_set_ = false;
// END USER INSERT SECTION RadarSessionImpl::RadarSessionImpl
}


RadarSessionImpl::~RadarSessionImpl()
{
// BEGIN USER INSERT SECTION RadarSessionImpl::~RadarSessionImpl
// END USER INSERT SECTION RadarSessionImpl::~RadarSessionImpl

}


void
RadarSessionImpl::set_context(::Simulation::CCM_Radar_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::Simulation::CCM_Radar_ContextImpl::_duplicate(context);
}


void
RadarSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::configuration_complete
	current_data_mutex_ = context_-> create_mutex();
	data_thread = context_->start_thread(run,this);
	gui_thread = context_->start_thread(start_gui,this);

	scale_ = pixel_radius_ / radius_;

// END USER INSERT SECTION RadarSessionImpl::configuration_complete
}


void
RadarSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::remove
//	current_data_mutex_ -> destroy();

// END USER INSERT SECTION RadarSessionImpl::remove
}


void
RadarSessionImpl::radar_identifier(const char* param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::_radar_identifier
	id_ = strdup(param);
// END USER INSERT SECTION RadarSessionImpl::_radar_identifier
}


char*
RadarSessionImpl::radar_identifier()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::radar_identifier
	return strdup(id_.c_str());
// END USER INSERT SECTION RadarSessionImpl::radar_identifier
}


void
RadarSessionImpl::longitude(CORBA::Double param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::_longitude
	longitude_ = param;
// END USER INSERT SECTION RadarSessionImpl::_longitude
}


CORBA::Double
RadarSessionImpl::longitude()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::longitude
	return longitude_;
// END USER INSERT SECTION RadarSessionImpl::longitude
}


void
RadarSessionImpl::latitude(CORBA::Double param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::_latitude
	latitude_ = param;
// END USER INSERT SECTION RadarSessionImpl::_latitude
}


CORBA::Double
RadarSessionImpl::latitude()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::latitude
	return latitude_;
// END USER INSERT SECTION RadarSessionImpl::latitude
}


void
RadarSessionImpl::radius(CORBA::Double param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::_radius
	radius_ = param;
// END USER INSERT SECTION RadarSessionImpl::_radius
}


CORBA::Double
RadarSessionImpl::radius()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::radius
	return radius_;
// END USER INSERT SECTION RadarSessionImpl::radius
}


void
RadarSessionImpl::pixel_radius(CORBA::Double param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::_pixel_radius
	pixel_radius_ = param;
// END USER INSERT SECTION RadarSessionImpl::_pixel_radius
}


CORBA::Double
RadarSessionImpl::pixel_radius()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION RadarSessionImpl::pixel_radius
	return pixel_radius_;
// END USER INSERT SECTION RadarSessionImpl::pixel_radius
}


// BEGIN USER INSERT SECTION RadarImpl
// END USER INSERT SECTION RadarImpl


RadarImpl::RadarImpl()
:component_(new RadarSessionImpl())
{
// BEGIN USER INSERT SECTION RadarImpl::RadarImpl
// END USER INSERT SECTION RadarImpl::RadarImpl
}


RadarImpl::~RadarImpl()
{
// BEGIN USER INSERT SECTION RadarImpl::~RadarImpl
// END USER INSERT SECTION RadarImpl::~RadarImpl

    component_->_remove_ref();
}


::CORBA::Object*
RadarImpl::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
RadarImpl::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
RadarImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION RadarImpl::configuration_complete
// END USER INSERT SECTION RadarImpl::configuration_complete
}


void
RadarImpl::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::Simulation::CCM_Radar_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::Simulation::CCM_Radar_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::Simulation::CCM_Radar_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::Simulation::CCM_Radar_ContextImpl::_nil();
        
    #else
    context_ = ::Simulation::CCM_Radar_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
RadarImpl::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RadarImpl::ccm_activate
// END USER INSERT SECTION RadarImpl::ccm_activate
}


void
RadarImpl::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RadarImpl::ccm_passivate
// END USER INSERT SECTION RadarImpl::ccm_passivate
}


void
RadarImpl::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION RadarImpl::ccm_remove
		component_->stop();
		component_->stop_gui();
// END USER INSERT SECTION RadarImpl::ccm_remove
}


// BEGIN USER INSERT SECTION RadarHomeImpl
// END USER INSERT SECTION RadarHomeImpl


RadarHomeImpl::RadarHomeImpl()
{
// BEGIN USER INSERT SECTION RadarHomeImpl::RadarHomeImpl
// END USER INSERT SECTION RadarHomeImpl::RadarHomeImpl
}


RadarHomeImpl::~RadarHomeImpl()
{
// BEGIN USER INSERT SECTION RadarHomeImpl::~RadarHomeImpl
// END USER INSERT SECTION RadarHomeImpl::~RadarHomeImpl

}


void
RadarHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
RadarHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION RadarHomeImpl::create
// END USER INSERT SECTION RadarHomeImpl::create
    return new RadarImpl();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_RadarHomeE(void)
{
// BEGIN USER INSERT SECTION create_RadarHome
// END USER INSERT SECTION create_RadarHome

    return new ::Simulation::RadarHomeImpl();
}

