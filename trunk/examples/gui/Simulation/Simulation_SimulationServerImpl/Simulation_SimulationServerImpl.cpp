//
// generated by Qedo
//

#include "Simulation_SimulationServerImpl.h"


// BEGIN USER INSERT SECTION file
// END USER INSERT SECTION file


namespace Simulation {


// BEGIN USER INSERT SECTION SimulationServerSessionImpl
// END USER INSERT SECTION SimulationServerSessionImpl


SimulationServerSessionImpl::SimulationServerSessionImpl()
{
// BEGIN USER INSERT SECTION SimulationServerSessionImpl::SimulationServerSessionImpl
// END USER INSERT SECTION SimulationServerSessionImpl::SimulationServerSessionImpl
}


SimulationServerSessionImpl::~SimulationServerSessionImpl()
{
// BEGIN USER INSERT SECTION SimulationServerSessionImpl::~SimulationServerSessionImpl
// END USER INSERT SECTION SimulationServerSessionImpl::~SimulationServerSessionImpl

}


void
SimulationServerSessionImpl::set_context(::Simulation::CCM_SimulationServer_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::Simulation::CCM_SimulationServer_ContextImpl::_duplicate(context);
}


void
SimulationServerSessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION SimulationServerSessionImpl::configuration_complete
		list_mutex_ = context_-> create_mutex();
// END USER INSERT SECTION SimulationServerSessionImpl::configuration_complete
}


void
SimulationServerSessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SimulationServerSessionImpl::remove
		list_mutex_ -> destroy();

// END USER INSERT SECTION SimulationServerSessionImpl::remove
}


void
SimulationServerSessionImpl::set_position(const char* identifier, const Simulation::Position& current_position)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SimulationServerSessionImpl::set_position
	list_mutex_->lock();

	// debug
	std::cout << "got position: id:" << identifier << " " << current_position.longitude << std::endl;
	try {
		std::string temp_str = identifier;

		position_map::iterator plane_itr;

		//look for identifier in map
		plane_itr = plane_position_map_.find(temp_str);
		if ( plane_itr !=  plane_position_map_.end())
		{
			// update pos
			(*plane_itr).second = current_position;

		} else
		{
			// insert new one
			plane_position_map_.insert (position_map::value_type(temp_str, current_position));
		}
	} catch (...) {};
	list_mutex_ -> unlock();
// END USER INSERT SECTION SimulationServerSessionImpl::set_position
}


Simulation::RadarData*
SimulationServerSessionImpl::get_data(const Simulation::Position& radar_position)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION SimulationServerSessionImpl::get_data
	list_mutex_->lock();

	// return List
	Simulation::RadarData * ret_list = new Simulation::RadarData;
	// get_number of entries
	ret_list->length(0);

	position_map::iterator plane_itr;
	
	CORBA::ULong index = 0;
	for ( plane_itr = plane_position_map_.begin(); plane_itr != plane_position_map_.end(); plane_itr++ )
	{
		// test wheter it is in range
		// current range is 90
		CORBA::Double a, b, c;
		a = radar_position.longitude - (*plane_itr).second.longitude;
		b = radar_position.latitude - (*plane_itr).second.latitude;

		c = sqrt((a * a) + ((b * b) ));
		if (c < 85)
		{
			ret_list->length(ret_list->length()+1);

			Simulation::RadarObject temp_object; // = new Simulation::RadarObject;	
			temp_object.identifier = strdup((*plane_itr).first.c_str());
			temp_object.position = (*plane_itr).second;

			(*ret_list)[index] = temp_object;
			index++;
		};
	}	

	list_mutex_->unlock();
	return ret_list;

// END USER INSERT SECTION SimulationServerSessionImpl::get_data
}


// BEGIN USER INSERT SECTION SimulationServerImpl
// END USER INSERT SECTION SimulationServerImpl


SimulationServerImpl::SimulationServerImpl()
:component_(new SimulationServerSessionImpl())
{
// BEGIN USER INSERT SECTION SimulationServerImpl::SimulationServerImpl
// END USER INSERT SECTION SimulationServerImpl::SimulationServerImpl
}


SimulationServerImpl::~SimulationServerImpl()
{
// BEGIN USER INSERT SECTION SimulationServerImpl::~SimulationServerImpl
// END USER INSERT SECTION SimulationServerImpl::~SimulationServerImpl

    component_->_remove_ref();
}


::CORBA::Object*
SimulationServerImpl::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "the_input")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "radar_output")) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
SimulationServerImpl::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
SimulationServerImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION SimulationServerImpl::configuration_complete
// END USER INSERT SECTION SimulationServerImpl::configuration_complete
}


void
SimulationServerImpl::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::Simulation::CCM_SimulationServer_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::Simulation::CCM_SimulationServer_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::Simulation::CCM_SimulationServer_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::Simulation::CCM_SimulationServer_ContextImpl::_nil();
        
    #else
    context_ = ::Simulation::CCM_SimulationServer_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
SimulationServerImpl::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SimulationServerImpl::ccm_activate
// END USER INSERT SECTION SimulationServerImpl::ccm_activate
}


void
SimulationServerImpl::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SimulationServerImpl::ccm_passivate
// END USER INSERT SECTION SimulationServerImpl::ccm_passivate
}


void
SimulationServerImpl::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION SimulationServerImpl::ccm_remove
// END USER INSERT SECTION SimulationServerImpl::ccm_remove
}


// BEGIN USER INSERT SECTION SimulationServerHomeImpl
// END USER INSERT SECTION SimulationServerHomeImpl


SimulationServerHomeImpl::SimulationServerHomeImpl()
{
// BEGIN USER INSERT SECTION SimulationServerHomeImpl::SimulationServerHomeImpl
// END USER INSERT SECTION SimulationServerHomeImpl::SimulationServerHomeImpl
}


SimulationServerHomeImpl::~SimulationServerHomeImpl()
{
// BEGIN USER INSERT SECTION SimulationServerHomeImpl::~SimulationServerHomeImpl
// END USER INSERT SECTION SimulationServerHomeImpl::~SimulationServerHomeImpl

}


void
SimulationServerHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
SimulationServerHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION SimulationServerHomeImpl::create
// END USER INSERT SECTION SimulationServerHomeImpl::create
    return new SimulationServerImpl();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_SimulationServerHomeE(void)
{
// BEGIN USER INSERT SECTION create_SimulationServerHome
// END USER INSERT SECTION create_SimulationServerHome

    return new ::Simulation::SimulationServerHomeImpl();
}

