//
// generated by Qedo
//

#ifndef _Simulation_TAPDisplayImpl_H_
#define _Simulation_TAPDisplayImpl_H_


// BEGIN USER INSERT SECTION file_pre
// END USER INSERT SECTION file_pre


#include <CORBA.h>
#include "Simulation_TAPDisplayImpl_BUSINESS.h"
#include "valuetypes.h"
#include "RefCountBase.h"
#include <string>


// BEGIN USER INSERT SECTION file_post
#include <map>
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>

namespace Simulation {
	class TAPDisplaySessionImpl;
};

class Display : public Fl_Window  {
	void draw();
	Simulation::TAPDisplaySessionImpl* impl_;

public:
	
	Display(int W,int H, Simulation::TAPDisplaySessionImpl* impl, const char *l=0) : Fl_Window(W,H,l), impl_(impl) {};
};

// END USER INSERT SECTION file_post


namespace Simulation
{
    
    //
    // executor
    //
    class TAPDisplaySessionImpl
        : public virtual CORBA::LocalObject
        , public virtual ::Simulation::CCM_TAPDisplaySessionImpl
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_TAPDisplaySessionImpl
// END USER INSERT SECTION INHERITANCE_TAPDisplaySessionImpl
    {
    
    private:
    
        ::Simulation::CCM_TAPDisplay_ContextImpl_var context_;
        
    public:
    
        TAPDisplaySessionImpl();
        virtual ~TAPDisplaySessionImpl();
        
        void set_context(::Simulation::CCM_TAPDisplay_ContextImpl_ptr context)
            throw (CORBA::SystemException, Components::CCMException);
        
        void configuration_complete()
            throw (CORBA::SystemException, Components::InvalidConfiguration);
        
        void remove()
            throw (CORBA::SystemException);
        
        
        //
        // IDL:Simulation/TAPDisplay/identifier:1.0
        //
        void identifier(const char* param)
        	throw(CORBA::SystemException);
        char* identifier()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Simulation/TAPDisplay/longitude:1.0
        //
        void longitude(CORBA::Double param)
        	throw(CORBA::SystemException);
        CORBA::Double longitude()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Simulation/TAPDisplay/latitude:1.0
        //
        void latitude(CORBA::Double param)
        	throw(CORBA::SystemException);
        CORBA::Double latitude()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Simulation/TAPDisplay/horizontal_range:1.0
        //
        void horizontal_range(CORBA::Double param)
        	throw(CORBA::SystemException);
        CORBA::Double horizontal_range()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Simulation/TAPDisplay/vertical_range:1.0
        //
        void vertical_range(CORBA::Double param)
        	throw(CORBA::SystemException);
        CORBA::Double vertical_range()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/EventConsumerBase/push_event:1.0
        //
        virtual void push_event (Components::EventBase* ev)
            throw (CORBA::SystemException);
        
        
        //
        // IDL:Simulation/TAPDisplay/from_radar:1.0
        //
        void push_RadarEvent(::Simulation::RadarEvent* ev)
            throw (CORBA::SystemException);
        
    
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl
		bool gui_stopped;
        Components::Thread_var gui_thread;
		Fl_Window *window;
	public:
		std::string id_;
		CORBA::Double longitude_;
		CORBA::Double latitude_;
		CORBA::Double horizontal_range_;
		CORBA::Double vertical_range_;
		Components::Mutex_ptr current_data_mutex_;

		//DataStructure for different Radar Data
		// should be similar to Simulation Server


		static void* start_gui(void*);
		void stop_gui();

		Components::Mutex_ptr radar_data_mutex_;

		// map element
		// at this time only position
		//map
		typedef std::map<std::string, Simulation::RadarData> radar_data_map;
		radar_data_map radar_map_;
		typedef std::map<std::string, Simulation::Position> position_map;
		position_map radar_position_map_;

// END USER INSERT SECTION TAPDisplaySessionImpl

    };
    
    
    //
    // executor locator
    //
    class TAPDisplayImpl
        : public virtual CORBA::LocalObject
        , public virtual Components::SessionExecutorLocator
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_TAPDisplayImpl
// END USER INSERT SECTION INHERITANCE_TAPDisplayImpl
    {
    
    private:
    
        ::Simulation::CCM_TAPDisplay_ContextImpl_var context_;
        
        TAPDisplaySessionImpl* component_;
        
    public:
    
        TAPDisplayImpl();
        virtual ~TAPDisplayImpl();
        
        
        //
        // IDL:Components/ExecutorLocator/obtain_executor:1.0
        //
        virtual CORBA::Object_ptr obtain_executor(const char* name)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/release_executor:1.0
        //
        virtual void release_executor(CORBA::Object_ptr exc)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/configuration_complete:1.0
        //
        virtual void configuration_complete()
        	throw(CORBA::SystemException, ::Components::InvalidConfiguration);
        
        //
        // IDL:Components/SessionComponent/set_session_context:1.0
        //
        virtual void set_session_context(Components::SessionContext_ptr ctx)
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_activate:1.0
        //
        virtual void ccm_activate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_passivate:1.0
        //
        virtual void ccm_passivate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_remove:1.0
        //
        virtual void ccm_remove()
        	throw(CORBA::SystemException, ::Components::CCMException);
    
// BEGIN USER INSERT SECTION TAPDisplayImpl
// END USER INSERT SECTION TAPDisplayImpl

    };
    
    
    //
    // home executor
    //
    class TAPDisplayHomeImpl
        : public virtual CORBA::LocalObject
        , public virtual ::Simulation::CCM_TAPDisplayHome
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_TAPDisplayHomeImpl
// END USER INSERT SECTION INHERITANCE_TAPDisplayHomeImpl
    {
    
    private:
    
        Components::HomeContext_var context_;
        
    public:
        TAPDisplayHomeImpl();
        virtual ~TAPDisplayHomeImpl();
        
        //
        // IDL:Components/HomeExecutorBase/set_context:1.0
        //
        virtual void set_context (Components::HomeContext_ptr ctx)
            throw (CORBA::SystemException, Components::CCMException);
        
        //
        // IDL:.../create:1.0
        //
        virtual ::Components::EnterpriseComponent_ptr create()
            throw (CORBA::SystemException, Components::CreateFailure);
    
// BEGIN USER INSERT SECTION TAPDisplayHomeImpl
// END USER INSERT SECTION TAPDisplayHomeImpl

    };
    
};

//
// entry point
//
extern "C" {
#ifdef _WIN32
__declspec(dllexport)
#else
#endif
::Components::HomeExecutorBase_ptr create_TAPDisplayHomeE(void);
}

#endif
