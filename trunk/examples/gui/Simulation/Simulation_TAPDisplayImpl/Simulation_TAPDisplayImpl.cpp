//
// generated by Qedo
//

#include "Simulation_TAPDisplayImpl.h"


// BEGIN USER INSERT SECTION file
#include <FL/fl_draw.H>

#ifdef _WIN32
#define sleep(X) Sleep(X*1000)
#endif


void
Display::draw() {
 Fl_Window::draw();
 

    fl_color(FL_BLACK);
	fl_rectf(0,0,impl_->horizontal_pixel_,impl_->vertical_pixel_);

	impl_->radar_data_mutex_->lock();
	// display radar circles
    fl_color(FL_DARK_GREEN);

	try
	{
		Simulation::TAPDisplaySessionImpl::radar_data_map::iterator radar_itr;
		
		CORBA::ULong radar_index = 0;
		for ( radar_itr = impl_->radar_map_.begin(); radar_itr != impl_->radar_map_.end(); radar_itr++ )
		{
			fl_arc((((*radar_itr).second.pos.longitude - impl_ -> longitude_)* impl_ -> x_scale_ ) - ((*radar_itr).second.radius * impl_-> x_scale_ ),
				((((*radar_itr).second.pos.latitude - impl_ -> latitude_ )* (impl_ -> y_scale_ *-1))
				- ((*radar_itr).second.radius ) * (impl_-> y_scale_  -1 )) + impl_ -> vertical_pixel_,
				((*radar_itr).second.radius * impl_ -> x_scale_) * 2 ,
				(((*radar_itr).second.radius * (impl_ -> y_scale_ ) * 2) ), 0, 360);

		}
	} catch( ... ) {};

	// display radarobjects
    fl_color(FL_RED);
	try
	{
		Simulation::TAPDisplaySessionImpl::radar_data_map::iterator radar_itr;
		
		CORBA::ULong radar_index = 0;
		for ( radar_itr = impl_->radar_map_.begin(); radar_itr != impl_->radar_map_.end(); radar_itr++ )
		{
			CORBA::ULong object_index = 0;
			for (object_index = 0; object_index < (*radar_itr).second.data.length(); object_index++)
			{
				fl_rectf((((*radar_itr).second.data[object_index].position.longitude - impl_->longitude_) * impl_ -> x_scale_) ,(((*radar_itr).second.data[object_index].position.latitude - impl_->latitude_)  * (impl_ -> y_scale_ * -1)) + impl_ -> vertical_pixel_ ,5,5);
			}
		
		}
	} catch(...) {};

	impl_->radar_data_mutex_->unlock();

/*
    fl_color(FL_GREEN);
	fl_arc(50,50,w()-100, h()-100, 0, 360);
	fl_arc(75,75,w()-150, h()-150, 0, 360);

	fl_line(100,100,100,10);
	fl_line(100,100,100,190);
	fl_line(100,100,10,100);
	fl_line(100,100,190,100);

	fl_color(FL_RED);
	if (impl_->current_data_set_)
	{

		try 
		{
			// draw planes
			impl_->current_data_mutex_->lock();

			CORBA::ULong index ;
			for (index=0;index < impl_->current_data->length(); index++)
			{
				Simulation::RadarData *temp_data = impl_->current_data;
		//		fl_rectf((*temp_data)[index].position.longitude,impl_->current_data[index].position.latitude,5,5);
				fl_rectf((((*temp_data)[index].position.longitude)-(impl_->longitude_))+100,(((*temp_data)[index].position.latitude)-(impl_->latitude_))+100,5,5);
			}
		} catch (...) {};
		impl_->current_data_mutex_->unlock();
		
	}
*/
};


// END USER INSERT SECTION file


namespace Simulation {


// BEGIN USER INSERT SECTION TAPDisplaySessionImpl

void*
TAPDisplaySessionImpl::start_gui(void *p)
{
	TAPDisplaySessionImpl* impl;
	impl = static_cast<TAPDisplaySessionImpl*>(p);

	impl->gui_stopped = false;

	impl->window = //new Fl_Double_Window(300,180, "Radar1");
		new Display((impl->horizontal_pixel_ ) ,(impl -> vertical_pixel_ ), impl, impl->id_.c_str());

	  impl->window->end();
	  impl->window->show();

	while (Fl::check()) 
	{
		if ( impl->gui_stopped) 
		{
			break;
		}
		sleep(1);

	};


	return 0;
}

void
TAPDisplaySessionImpl::stop_gui()
{
	gui_stopped = true;
	delete window;
//	gui_thread->join();

}

// END USER INSERT SECTION TAPDisplaySessionImpl


TAPDisplaySessionImpl::TAPDisplaySessionImpl()
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::TAPDisplaySessionImpl
// END USER INSERT SECTION TAPDisplaySessionImpl::TAPDisplaySessionImpl
}


TAPDisplaySessionImpl::~TAPDisplaySessionImpl()
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::~TAPDisplaySessionImpl
// END USER INSERT SECTION TAPDisplaySessionImpl::~TAPDisplaySessionImpl

}


void
TAPDisplaySessionImpl::set_context(::Simulation::CCM_TAPDisplay_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::Simulation::CCM_TAPDisplay_ContextImpl::_duplicate(context);
}


void
TAPDisplaySessionImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::configuration_complete
	gui_thread = context_->start_thread(start_gui,this);
	radar_data_mutex_ = context_ -> create_mutex();
	x_scale_ = horizontal_pixel_ / horizontal_range_;
	y_scale_ = vertical_pixel_ / vertical_range_;
// END USER INSERT SECTION TAPDisplaySessionImpl::configuration_complete
}


void
TAPDisplaySessionImpl::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::remove

	//radar_data_mutex_ -> destroy();
// END USER INSERT SECTION TAPDisplaySessionImpl::remove
}


void
TAPDisplaySessionImpl::identifier(const char* param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::_identifier
	id_ = strdup(param);
// END USER INSERT SECTION TAPDisplaySessionImpl::_identifier
}


char*
TAPDisplaySessionImpl::identifier()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::identifier
	return  strdup(id_.c_str());
// END USER INSERT SECTION TAPDisplaySessionImpl::identifier
}


void
TAPDisplaySessionImpl::longitude(CORBA::Double param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::_longitude
	longitude_ = param;
// END USER INSERT SECTION TAPDisplaySessionImpl::_longitude
}


CORBA::Double
TAPDisplaySessionImpl::longitude()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::longitude
	return longitude_;
// END USER INSERT SECTION TAPDisplaySessionImpl::longitude
}


void
TAPDisplaySessionImpl::latitude(CORBA::Double param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::_latitude
	latitude_ = param;
// END USER INSERT SECTION TAPDisplaySessionImpl::_latitude
}


CORBA::Double
TAPDisplaySessionImpl::latitude()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::latitude
	return latitude_;
// END USER INSERT SECTION TAPDisplaySessionImpl::latitude
}


void
TAPDisplaySessionImpl::horizontal_range(CORBA::Double param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::_horizontal_range
	horizontal_range_ = param;
// END USER INSERT SECTION TAPDisplaySessionImpl::_horizontal_range
}


CORBA::Double
TAPDisplaySessionImpl::horizontal_range()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::horizontal_range
	return horizontal_range_;
// END USER INSERT SECTION TAPDisplaySessionImpl::horizontal_range
}


void
TAPDisplaySessionImpl::vertical_range(CORBA::Double param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::_vertical_range
	vertical_range_ = param;
// END USER INSERT SECTION TAPDisplaySessionImpl::_vertical_range
}


CORBA::Double
TAPDisplaySessionImpl::vertical_range()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::vertical_range
	return vertical_range_;
// END USER INSERT SECTION TAPDisplaySessionImpl::vertical_range
}


void
TAPDisplaySessionImpl::horizontal_pixels(CORBA::Double param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::_horizontal_pixels
	horizontal_pixel_ = param;
// END USER INSERT SECTION TAPDisplaySessionImpl::_horizontal_pixels
}


CORBA::Double
TAPDisplaySessionImpl::horizontal_pixels()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::horizontal_pixels
	return horizontal_pixel_;
// END USER INSERT SECTION TAPDisplaySessionImpl::horizontal_pixels
}


void
TAPDisplaySessionImpl::vertical_pixels(CORBA::Double param)
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::_vertical_pixels
	vertical_pixel_ = param;
// END USER INSERT SECTION TAPDisplaySessionImpl::_vertical_pixels
}


CORBA::Double
TAPDisplaySessionImpl::vertical_pixels()
	throw(CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::vertical_pixels
	return vertical_pixel_;
// END USER INSERT SECTION TAPDisplaySessionImpl::vertical_pixels
}


void
TAPDisplaySessionImpl::push_event (Components::EventBase* ev)
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::push_event
// END USER INSERT SECTION TAPDisplaySessionImpl::push_event
}


void
TAPDisplaySessionImpl::push_RadarEvent(::Simulation::RadarEvent* ev)
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION TAPDisplaySessionImpl::push_RadarEvent
	radar_data_mutex_->lock();

	// debug
	std::cout << "got information from:" << ev->radar_identifier() << std::endl;

	RadarMapEntry entry;
	entry.pos = ev->radar_position();
	entry.radius = ev -> radius();
	entry.data = ev -> radardata();

	try {
		
		std::string temp_str = ev->radar_identifier();

		radar_data_map::iterator radar_itr;

		//look for identifier in map
		radar_itr = radar_map_.find(temp_str);
		if ( radar_itr !=  radar_map_.end())
		{
			// update pos
			(*radar_itr).second = entry;

		} else
		{
			// insert new one
			radar_map_.insert (radar_data_map::value_type(temp_str, entry));
		}

/*
		position_map::iterator radar_position_itr;

		//look for identifier in map
		radar_position_itr = radar_position_map_.find(temp_str);
		if ( radar_position_itr !=  radar_position_map_.end())
		{
			// update pos
			(*radar_position_itr).second = ev->radar_position();

		} else
		{
			// insert new one
			radar_position_map_.insert (position_map::value_type(temp_str, ev->radar_position()));
		}
		*/
	} catch (...) {};

	radar_data_mutex_ -> unlock();
	window->redraw();

// END USER INSERT SECTION TAPDisplaySessionImpl::push_RadarEvent
}


// BEGIN USER INSERT SECTION TAPDisplayImpl
// END USER INSERT SECTION TAPDisplayImpl


TAPDisplayImpl::TAPDisplayImpl()
:component_(new TAPDisplaySessionImpl())
{
// BEGIN USER INSERT SECTION TAPDisplayImpl::TAPDisplayImpl
// END USER INSERT SECTION TAPDisplayImpl::TAPDisplayImpl
}


TAPDisplayImpl::~TAPDisplayImpl()
{
// BEGIN USER INSERT SECTION TAPDisplayImpl::~TAPDisplayImpl
// END USER INSERT SECTION TAPDisplayImpl::~TAPDisplayImpl

    component_->_remove_ref();
}


::CORBA::Object*
TAPDisplayImpl::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
TAPDisplayImpl::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
TAPDisplayImpl::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION TAPDisplayImpl::configuration_complete
// END USER INSERT SECTION TAPDisplayImpl::configuration_complete
}


void
TAPDisplayImpl::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::Simulation::CCM_TAPDisplay_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::Simulation::CCM_TAPDisplay_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::Simulation::CCM_TAPDisplay_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::Simulation::CCM_TAPDisplay_ContextImpl::_nil();
        
    #else
    context_ = ::Simulation::CCM_TAPDisplay_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
TAPDisplayImpl::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION TAPDisplayImpl::ccm_activate
// END USER INSERT SECTION TAPDisplayImpl::ccm_activate
}


void
TAPDisplayImpl::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION TAPDisplayImpl::ccm_passivate
// END USER INSERT SECTION TAPDisplayImpl::ccm_passivate
}


void
TAPDisplayImpl::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION TAPDisplayImpl::ccm_remove
// END USER INSERT SECTION TAPDisplayImpl::ccm_remove
}


// BEGIN USER INSERT SECTION TAPDisplayHomeImpl
// END USER INSERT SECTION TAPDisplayHomeImpl


TAPDisplayHomeImpl::TAPDisplayHomeImpl()
{
// BEGIN USER INSERT SECTION TAPDisplayHomeImpl::TAPDisplayHomeImpl
// END USER INSERT SECTION TAPDisplayHomeImpl::TAPDisplayHomeImpl
}


TAPDisplayHomeImpl::~TAPDisplayHomeImpl()
{
// BEGIN USER INSERT SECTION TAPDisplayHomeImpl::~TAPDisplayHomeImpl
// END USER INSERT SECTION TAPDisplayHomeImpl::~TAPDisplayHomeImpl

}


void
TAPDisplayHomeImpl::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
}


::Components::EnterpriseComponent_ptr
TAPDisplayHomeImpl::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION TAPDisplayHomeImpl::create
// END USER INSERT SECTION TAPDisplayHomeImpl::create
    return new TAPDisplayImpl();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_TAPDisplayHomeE(void)
{
// BEGIN USER INSERT SECTION create_TAPDisplayHome
// END USER INSERT SECTION create_TAPDisplayHome

    return new ::Simulation::TAPDisplayHomeImpl();
}

