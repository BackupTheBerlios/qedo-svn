//
// generated by Qedo
//

#ifndef _Simulation_PlaneImpl_H_
#define _Simulation_PlaneImpl_H_


// BEGIN USER INSERT SECTION file_pre
// END USER INSERT SECTION file_pre


#include <CORBA.h>
#include "Simulation_PlaneImpl_BUSINESS.h"
#include "valuetypes.h"
#include "RefCountBase.h"
#include <string>


// BEGIN USER INSERT SECTION file_post
#include <FL/Fl.H>
#include <FL/Fl_Window.H>

// END USER INSERT SECTION file_post


namespace Simulation
{
    
    //
    // executor
    //
    class PlaneSessionImpl
        : public virtual CORBA::LocalObject
        , public virtual ::Simulation::CCM_PlaneSessionImpl
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_PlaneSessionImpl
// END USER INSERT SECTION INHERITANCE_PlaneSessionImpl
    {
    
    private:
    
        ::Simulation::CCM_Plane_ContextImpl_var context_;
        
    public:
    
        PlaneSessionImpl();
        virtual ~PlaneSessionImpl();
        
        void set_context(::Simulation::CCM_Plane_ContextImpl_ptr context)
            throw (CORBA::SystemException, Components::CCMException);
        
        void configuration_complete()
            throw (CORBA::SystemException, Components::InvalidConfiguration);
        
        void remove()
            throw (CORBA::SystemException);
        
        
        //
        // IDL:Simulation/Plane/identifier:1.0
        //
        void identifier(const char* param)
        	throw(CORBA::SystemException);
        char* identifier()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Simulation/Plane/initial_longitude:1.0
        //
        void initial_longitude(CORBA::Double param)
        	throw(CORBA::SystemException);
        CORBA::Double initial_longitude()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Simulation/Plane/initial_latitude:1.0
        //
        void initial_latitude(CORBA::Double param)
        	throw(CORBA::SystemException);
        CORBA::Double initial_latitude()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Simulation/Plane/initial_altitude:1.0
        //
        void initial_altitude(CORBA::Double param)
        	throw(CORBA::SystemException);
        CORBA::Double initial_altitude()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Simulation/Plane/initial_course:1.0
        //
        void initial_course(CORBA::Double param)
        	throw(CORBA::SystemException);
        CORBA::Double initial_course()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Simulation/Plane/speed:1.0
        //
        void speed(CORBA::Double param)
        	throw(CORBA::SystemException);
        CORBA::Double speed()
        	throw(CORBA::SystemException);
    
// BEGIN USER INSERT SECTION PlaneSessionImpl
	private:
		bool flight_stopped;
		bool gui_stopped;
        Components::Thread_var flight_thread;
        Components::Thread_var gui_thread;
		Fl_Window *window;

		std::string id_;
		CORBA::Double longitude_;
		CORBA::Double latitude_;
		CORBA::Double altitude_;
		CORBA::Double course_;

		CORBA::Double speed_;

	public:
		static void* run(void*);
		void stop();
		static void* start_gui(void*);
		void stop_gui();
		void fly();

// END USER INSERT SECTION PlaneSessionImpl

    };
    
    
    //
    // executor locator
    //
    class PlaneImpl
        : public virtual CORBA::LocalObject
        , public virtual Components::SessionExecutorLocator
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_PlaneImpl
// END USER INSERT SECTION INHERITANCE_PlaneImpl
    {
    
    private:
    
        ::Simulation::CCM_Plane_ContextImpl_var context_;
        
        PlaneSessionImpl* component_;
        
    public:
    
        PlaneImpl();
        virtual ~PlaneImpl();
        
        
        //
        // IDL:Components/ExecutorLocator/obtain_executor:1.0
        //
        virtual CORBA::Object_ptr obtain_executor(const char* name)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/release_executor:1.0
        //
        virtual void release_executor(CORBA::Object_ptr exc)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/configuration_complete:1.0
        //
        virtual void configuration_complete()
        	throw(CORBA::SystemException, ::Components::InvalidConfiguration);
        
        //
        // IDL:Components/SessionComponent/set_session_context:1.0
        //
        virtual void set_session_context(Components::SessionContext_ptr ctx)
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_activate:1.0
        //
        virtual void ccm_activate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_passivate:1.0
        //
        virtual void ccm_passivate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_remove:1.0
        //
        virtual void ccm_remove()
        	throw(CORBA::SystemException, ::Components::CCMException);
    
// BEGIN USER INSERT SECTION PlaneImpl
// END USER INSERT SECTION PlaneImpl

    };
    
    
    //
    // home executor
    //
    class PlaneHomeImpl
        : public virtual CORBA::LocalObject
        , public virtual ::Simulation::CCM_PlaneHome
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_PlaneHomeImpl
// END USER INSERT SECTION INHERITANCE_PlaneHomeImpl
    {
    
    private:
    
        Components::HomeContext_var context_;
        
    public:
        PlaneHomeImpl();
        virtual ~PlaneHomeImpl();
        
        //
        // IDL:Components/HomeExecutorBase/set_context:1.0
        //
        virtual void set_context (Components::HomeContext_ptr ctx)
            throw (CORBA::SystemException, Components::CCMException);
        
        //
        // IDL:.../create:1.0
        //
        virtual ::Components::EnterpriseComponent_ptr create()
            throw (CORBA::SystemException, Components::CreateFailure);
    
// BEGIN USER INSERT SECTION PlaneHomeImpl
// END USER INSERT SECTION PlaneHomeImpl

    };
    
};

//
// entry point
//
extern "C" {
#ifdef _WIN32
__declspec(dllexport)
#else
#endif
::Components::HomeExecutorBase_ptr create_PlaneHomeE(void);
}

#endif
