/*
	*********************************************************************
	
	Generated by M2C MOF2IDL
	
	Copyright (c) 2001
	IKV++ Technologies AG
	Berlin, Germany
	
	All Rights Reserved
	
	**********************************************************************
*/

#include <Reflective.idl>
#include <CorbaIdlTypes.idl>
#include <PrimitiveTypes.idl>

#pragma prefix ""

#ifndef _MDE_1_idl_
#define _MDE_1_idl_

#include "MDE_0.idl"

module MDE
{
	module ComponentIDL
	{
		interface ComponentDef;
		struct ComponentSupportsLink
		{
			ComponentDef components_end;
			MDE::BaseIDL::InterfaceDef supports_itf_end;
		};

		typedef sequence < ComponentSupportsLink >  ComponentSupportsLinkSet;
		

/* 
::MDE::ComponentIDL::Component_Supports
*/
		interface ComponentSupports
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::ComponentSupportsLinkSet all_component_supports_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ComponentDef components,
				in MDE::BaseIDL::InterfaceDef supports_itf) raises ( 
					Reflective::MofError);
			MDE::BaseIDL::InterfaceDefSet supports_itf ( 
				in MDE::ComponentIDL::ComponentDef components) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ComponentDef components,
				in MDE::BaseIDL::InterfaceDef supports_itf) raises ( 
					Reflective::MofError);
			void modify_supports_itf ( 
				in MDE::ComponentIDL::ComponentDef components,
				in MDE::BaseIDL::InterfaceDef supports_itf,
				in MDE::BaseIDL::InterfaceDef new_supports_itf) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ComponentDef components,
				in MDE::BaseIDL::InterfaceDef supports_itf) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface SiSouDef;
		struct SiSousLink
		{
			ComponentDef comp_end;
			SiSouDef sisouss_end;
		};

		typedef sequence < SiSousLink >  SiSousLinkSet;
		
		typedef sequence < SiSouDef >  SiSouDefSet;
		

/* 
::MDE::ComponentIDL::SiSous
*/
		interface SiSous
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::SiSousLinkSet all_si_sous_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SiSouDef sisouss) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef comp ( 
				in MDE::ComponentIDL::SiSouDef sisouss) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::SiSouDefSet sisouss ( 
				in MDE::ComponentIDL::ComponentDef comp) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SiSouDef sisouss) raises ( 
					Reflective::MofError);
			void modify_comp ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SiSouDef sisouss,
				in MDE::ComponentIDL::ComponentDef new_comp) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_sisouss ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SiSouDef sisouss,
				in MDE::ComponentIDL::SiSouDef new_sisouss) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SiSouDef sisouss) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface SiSouDefClass;
		typedef sequence < SiSouDefClass >  SiSouDefClassUList;
		
		typedef sequence < SiSouDefClass >  SiSouDefClassList;
		
		typedef sequence < SiSouDefClass >  SiSouDefClassBag;
		
		typedef sequence < SiSouDefClass >  SiSouDefClassSet;
		
		typedef sequence < SiSouDef >  SiSouDefUList;
		
		typedef sequence < SiSouDef >  SiSouDefList;
		
		typedef sequence < SiSouDef >  SiSouDefBag;
		
		interface StreamPortDef;
		typedef sequence < StreamPortDef >  StreamPortDefSet;
		
		interface ComponentFeature;
		typedef sequence < ComponentFeature >  ComponentFeatureSet;
		

/* 
class proxy::MDE::ComponentIDL::ComponentFeature
*/
		interface ComponentFeatureClass
			: Reflective::RefObject
		{
			readonly attribute MDE::ComponentIDL::ComponentFeatureSet all_of_type_component_feature;
		};


/* 
class proxy::MDE::ComponentIDL::StreamPortDef
*/
		interface StreamPortDefClass
			: ComponentFeatureClass,
			  MDE::BaseIDL::ContainedClass
		{
			readonly attribute MDE::ComponentIDL::StreamPortDefSet all_of_type_stream_port_def;
		};


/* 
class proxy::MDE::ComponentIDL::SiSouDef
*/
		interface SiSouDefClass
			: StreamPortDefClass
		{
			readonly attribute MDE::ComponentIDL::SiSouDefSet all_of_type_si_sou_def;
			readonly attribute MDE::ComponentIDL::SiSouDefSet all_of_class_si_sou_def;
			MDE::ComponentIDL::SiSouDef create_si_sou_def ( 
				in string identifier,
				in string repository_id,
				in string version) raises ( 
					Reflective::MofError);
		};

		interface MediaType;
	}; // end module ComponentIDL
	module CIF
	{
		interface SegmentDef;
	}; // end module CIF
	module ComponentIDL
	{

/* 
::MDE::ComponentIDL::ComponentFeature
*/
		interface ComponentFeature
			: ComponentFeatureClass
		{
			MDE::CIF::SegmentDef segment ( ) raises ( 
					Reflective::MofError);
			void set_segment ( 
				in MDE::CIF::SegmentDef new_value) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::StreamPortDef
*/
		interface StreamPortDef
			: StreamPortDefClass,
			  ComponentFeature,
			  MDE::BaseIDL::Contained
		{
			MDE::ComponentIDL::MediaType type ( ) raises ( 
					Reflective::MofError);
			void set_type ( 
				in MDE::ComponentIDL::MediaType new_value) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::SiSouDef
*/
		interface SiSouDef
			: SiSouDefClass,
			  StreamPortDef
		{
			MDE::ComponentIDL::ComponentDef comp ( ) raises ( 
					Reflective::MofError);
			void set_comp ( 
				in MDE::ComponentIDL::ComponentDef new_value) raises ( 
					Reflective::MofError);
		};

		interface SourceDef;
		struct SourcesLink
		{
			ComponentDef comp_end;
			SourceDef sourcess_end;
		};

		typedef sequence < SourcesLink >  SourcesLinkSet;
		
		typedef sequence < SourceDef >  SourceDefSet;
		

/* 
::MDE::ComponentIDL::Sources
*/
		interface Sources
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::SourcesLinkSet all_sources_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SourceDef sourcess) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef comp ( 
				in MDE::ComponentIDL::SourceDef sourcess) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::SourceDefSet sourcess ( 
				in MDE::ComponentIDL::ComponentDef comp) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SourceDef sourcess) raises ( 
					Reflective::MofError);
			void modify_comp ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SourceDef sourcess,
				in MDE::ComponentIDL::ComponentDef new_comp) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_sourcess ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SourceDef sourcess,
				in MDE::ComponentIDL::SourceDef new_sourcess) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SourceDef sourcess) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface SourceDefClass;
		typedef sequence < SourceDefClass >  SourceDefClassUList;
		
		typedef sequence < SourceDefClass >  SourceDefClassList;
		
		typedef sequence < SourceDefClass >  SourceDefClassBag;
		
		typedef sequence < SourceDefClass >  SourceDefClassSet;
		
		typedef sequence < SourceDef >  SourceDefUList;
		
		typedef sequence < SourceDef >  SourceDefList;
		
		typedef sequence < SourceDef >  SourceDefBag;
		

/* 
class proxy::MDE::ComponentIDL::SourceDef
*/
		interface SourceDefClass
			: StreamPortDefClass
		{
			readonly attribute MDE::ComponentIDL::SourceDefSet all_of_type_source_def;
			readonly attribute MDE::ComponentIDL::SourceDefSet all_of_class_source_def;
			MDE::ComponentIDL::SourceDef create_source_def ( 
				in string identifier,
				in string repository_id,
				in string version) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::SourceDef
*/
		interface SourceDef
			: SourceDefClass,
			  StreamPortDef
		{
			MDE::ComponentIDL::ComponentDef comp ( ) raises ( 
					Reflective::MofError);
			void set_comp ( 
				in MDE::ComponentIDL::ComponentDef new_value) raises ( 
					Reflective::MofError);
		};

		interface SinkDef;
		struct SinksLink
		{
			ComponentDef comp_end;
			SinkDef sinkss_end;
		};

		typedef sequence < SinksLink >  SinksLinkSet;
		
		typedef sequence < SinkDef >  SinkDefSet;
		

/* 
::MDE::ComponentIDL::Sinks
*/
		interface Sinks
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::SinksLinkSet all_sinks_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SinkDef sinkss) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef comp ( 
				in MDE::ComponentIDL::SinkDef sinkss) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::SinkDefSet sinkss ( 
				in MDE::ComponentIDL::ComponentDef comp) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SinkDef sinkss) raises ( 
					Reflective::MofError);
			void modify_comp ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SinkDef sinkss,
				in MDE::ComponentIDL::ComponentDef new_comp) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_sinkss ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SinkDef sinkss,
				in MDE::ComponentIDL::SinkDef new_sinkss) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::SinkDef sinkss) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface SinkDefClass;
		typedef sequence < SinkDefClass >  SinkDefClassUList;
		
		typedef sequence < SinkDefClass >  SinkDefClassList;
		
		typedef sequence < SinkDefClass >  SinkDefClassBag;
		
		typedef sequence < SinkDefClass >  SinkDefClassSet;
		
		typedef sequence < SinkDef >  SinkDefUList;
		
		typedef sequence < SinkDef >  SinkDefList;
		
		typedef sequence < SinkDef >  SinkDefBag;
		

/* 
class proxy::MDE::ComponentIDL::SinkDef
*/
		interface SinkDefClass
			: StreamPortDefClass
		{
			readonly attribute MDE::ComponentIDL::SinkDefSet all_of_type_sink_def;
			readonly attribute MDE::ComponentIDL::SinkDefSet all_of_class_sink_def;
			MDE::ComponentIDL::SinkDef create_sink_def ( 
				in string identifier,
				in string repository_id,
				in string version) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::SinkDef
*/
		interface SinkDef
			: SinkDefClass,
			  StreamPortDef
		{
			MDE::ComponentIDL::ComponentDef comp ( ) raises ( 
					Reflective::MofError);
			void set_comp ( 
				in MDE::ComponentIDL::ComponentDef new_value) raises ( 
					Reflective::MofError);
		};

		struct MediatoTypeLink
		{
			StreamPortDef ends_end;
			MediaType type_end;
		};

		typedef sequence < MediatoTypeLink >  MediatoTypeLinkSet;
		

/* 
::MDE::ComponentIDL::MediatoType
*/
		interface MediatoType
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::MediatoTypeLinkSet all_mediato_type_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::StreamPortDef ends,
				in MDE::ComponentIDL::MediaType type) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::StreamPortDefSet ends ( 
				in MDE::ComponentIDL::MediaType type) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::MediaType type ( 
				in MDE::ComponentIDL::StreamPortDef ends) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::StreamPortDef ends,
				in MDE::ComponentIDL::MediaType type) raises ( 
					Reflective::MofError);
			void modify_ends ( 
				in MDE::ComponentIDL::StreamPortDef ends,
				in MDE::ComponentIDL::MediaType type,
				in MDE::ComponentIDL::StreamPortDef new_ends) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_type ( 
				in MDE::ComponentIDL::StreamPortDef ends,
				in MDE::ComponentIDL::MediaType type,
				in MDE::ComponentIDL::MediaType new_type) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::StreamPortDef ends,
				in MDE::ComponentIDL::MediaType type) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface MediaTypeClass;
		typedef sequence < MediaTypeClass >  MediaTypeClassUList;
		
		typedef sequence < MediaTypeClass >  MediaTypeClassList;
		
		typedef sequence < MediaTypeClass >  MediaTypeClassBag;
		
		typedef sequence < MediaTypeClass >  MediaTypeClassSet;
		
		typedef sequence < MediaType >  MediaTypeUList;
		
		typedef sequence < MediaType >  MediaTypeList;
		
		typedef sequence < MediaType >  MediaTypeBag;
		
		typedef sequence < MediaType >  MediaTypeSet;
		

/* 
class proxy::MDE::ComponentIDL::MediaType
*/
		interface MediaTypeClass
			: MDE::BaseIDL::ContainedClass
		{
			readonly attribute MDE::ComponentIDL::MediaTypeSet all_of_type_media_type;
			readonly attribute MDE::ComponentIDL::MediaTypeSet all_of_class_media_type;
			MDE::ComponentIDL::MediaType create_media_type ( 
				in string identifier,
				in string repository_id,
				in string version) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::MediaType
*/
		interface MediaType
			: MediaTypeClass,
			  MDE::BaseIDL::Contained
		{
			MDE::ComponentIDL::StreamPortDefSet ends ( ) raises ( 
					Reflective::MofError);
			void set_ends ( 
				in MDE::ComponentIDL::StreamPortDefSet new_value) raises ( 
					Reflective::MofError);
			void add_ends ( 
				in MDE::ComponentIDL::StreamPortDef new_element) raises ( 
					Reflective::MofError);
			void modify_ends ( 
				in MDE::ComponentIDL::StreamPortDef old_element,
				in MDE::ComponentIDL::StreamPortDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_ends ( 
				in MDE::ComponentIDL::StreamPortDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		typedef sequence < StreamPortDefClass >  StreamPortDefClassUList;
		
		typedef sequence < StreamPortDefClass >  StreamPortDefClassList;
		
		typedef sequence < StreamPortDefClass >  StreamPortDefClassBag;
		
		typedef sequence < StreamPortDefClass >  StreamPortDefClassSet;
		
		typedef sequence < StreamPortDef >  StreamPortDefUList;
		
		typedef sequence < StreamPortDef >  StreamPortDefList;
		
		typedef sequence < StreamPortDef >  StreamPortDefBag;
		
		interface PublishesDef;
		struct ComponentPublishesLink
		{
			ComponentDef comp_end;
			PublishesDef publishess_end;
		};

		typedef sequence < ComponentPublishesLink >  ComponentPublishesLinkSet;
		
		typedef sequence < PublishesDef >  PublishesDefSet;
		

/* 
::MDE::ComponentIDL::Component_Publishes
*/
		interface ComponentPublishes
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::ComponentPublishesLinkSet all_component_publishes_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::PublishesDef publishess) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef comp ( 
				in MDE::ComponentIDL::PublishesDef publishess) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::PublishesDefSet publishess ( 
				in MDE::ComponentIDL::ComponentDef comp) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::PublishesDef publishess) raises ( 
					Reflective::MofError);
			void modify_comp ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::PublishesDef publishess,
				in MDE::ComponentIDL::ComponentDef new_comp) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_publishess ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::PublishesDef publishess,
				in MDE::ComponentIDL::PublishesDef new_publishess) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::PublishesDef publishess) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface PublishesDefClass;
		typedef sequence < PublishesDefClass >  PublishesDefClassUList;
		
		typedef sequence < PublishesDefClass >  PublishesDefClassList;
		
		typedef sequence < PublishesDefClass >  PublishesDefClassBag;
		
		typedef sequence < PublishesDefClass >  PublishesDefClassSet;
		
		typedef sequence < PublishesDef >  PublishesDefUList;
		
		typedef sequence < PublishesDef >  PublishesDefList;
		
		typedef sequence < PublishesDef >  PublishesDefBag;
		
		interface EventPortDef;
		typedef sequence < EventPortDef >  EventPortDefSet;
		

/* 
class proxy::MDE::ComponentIDL::EventPortDef
*/
		interface EventPortDefClass
			: ComponentFeatureClass,
			  MDE::BaseIDL::ContainedClass
		{
			readonly attribute MDE::ComponentIDL::EventPortDefSet all_of_type_event_port_def;
		};


/* 
class proxy::MDE::ComponentIDL::PublishesDef
*/
		interface PublishesDefClass
			: EventPortDefClass
		{
			readonly attribute MDE::ComponentIDL::PublishesDefSet all_of_type_publishes_def;
			readonly attribute MDE::ComponentIDL::PublishesDefSet all_of_class_publishes_def;
			MDE::ComponentIDL::PublishesDef create_publishes_def ( 
				in string identifier,
				in string repository_id,
				in string version) raises ( 
					Reflective::MofError);
		};

		interface EventDef;

/* 
::MDE::ComponentIDL::EventPortDef
*/
		interface EventPortDef
			: EventPortDefClass,
			  ComponentFeature,
			  MDE::BaseIDL::Contained
		{
			MDE::ComponentIDL::EventDef type ( ) raises ( 
					Reflective::MofError);
			void set_type ( 
				in MDE::ComponentIDL::EventDef new_value) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::PublishesDef
*/
		interface PublishesDef
			: PublishesDefClass,
			  EventPortDef
		{
			MDE::ComponentIDL::ComponentDef comp ( ) raises ( 
					Reflective::MofError);
			void set_comp ( 
				in MDE::ComponentIDL::ComponentDef new_value) raises ( 
					Reflective::MofError);
		};

		interface HomeDef;
		struct KeyHomeLink
		{
			HomeDef home_end_end;
			MDE::BaseIDL::ValueDef primary_key_end;
		};

		typedef sequence < KeyHomeLink >  KeyHomeLinkSet;
		

/* 
::MDE::ComponentIDL::Key_Home
*/
		interface KeyHome
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::KeyHomeLinkSet all_key_home_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::HomeDef home_end,
				in MDE::BaseIDL::ValueDef primary_key) raises ( 
					Reflective::MofError);
			MDE::BaseIDL::ValueDef primary_key ( 
				in MDE::ComponentIDL::HomeDef home_end) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::HomeDef home_end,
				in MDE::BaseIDL::ValueDef primary_key) raises ( 
					Reflective::MofError);
			void modify_primary_key ( 
				in MDE::ComponentIDL::HomeDef home_end,
				in MDE::BaseIDL::ValueDef primary_key,
				in MDE::BaseIDL::ValueDef new_primary_key) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::HomeDef home_end,
				in MDE::BaseIDL::ValueDef primary_key) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		struct HomeSupportsLink
		{
			HomeDef comp_end;
			MDE::BaseIDL::InterfaceDef supports_itf_end;
		};

		typedef sequence < HomeSupportsLink >  HomeSupportsLinkSet;
		

/* 
::MDE::ComponentIDL::Home_Supports
*/
		interface HomeSupports
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::HomeSupportsLinkSet all_home_supports_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::HomeDef comp,
				in MDE::BaseIDL::InterfaceDef supports_itf) raises ( 
					Reflective::MofError);
			MDE::BaseIDL::InterfaceDefSet supports_itf ( 
				in MDE::ComponentIDL::HomeDef comp) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::HomeDef comp,
				in MDE::BaseIDL::InterfaceDef supports_itf) raises ( 
					Reflective::MofError);
			void modify_supports_itf ( 
				in MDE::ComponentIDL::HomeDef comp,
				in MDE::BaseIDL::InterfaceDef supports_itf,
				in MDE::BaseIDL::InterfaceDef new_supports_itf) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::HomeDef comp,
				in MDE::BaseIDL::InterfaceDef supports_itf) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface FactoryDef;
		struct HomeFactoryLink
		{
			HomeDef homedef_end;
			FactoryDef factorys_end;
		};

		typedef sequence < HomeFactoryLink >  HomeFactoryLinkSet;
		
		typedef sequence < FactoryDef >  FactoryDefSet;
		

/* 
::MDE::ComponentIDL::Home_Factory
*/
		interface HomeFactory
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::HomeFactoryLinkSet all_home_factory_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::HomeDef homedef,
				in MDE::ComponentIDL::FactoryDef factorys) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::HomeDef homedef ( 
				in MDE::ComponentIDL::FactoryDef factorys) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::FactoryDefSet factorys ( 
				in MDE::ComponentIDL::HomeDef homedef) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::HomeDef homedef,
				in MDE::ComponentIDL::FactoryDef factorys) raises ( 
					Reflective::MofError);
			void modify_homedef ( 
				in MDE::ComponentIDL::HomeDef homedef,
				in MDE::ComponentIDL::FactoryDef factorys,
				in MDE::ComponentIDL::HomeDef new_homedef) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_factorys ( 
				in MDE::ComponentIDL::HomeDef homedef,
				in MDE::ComponentIDL::FactoryDef factorys,
				in MDE::ComponentIDL::FactoryDef new_factorys) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::HomeDef homedef,
				in MDE::ComponentIDL::FactoryDef factorys) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface FactoryDefClass;
		typedef sequence < FactoryDefClass >  FactoryDefClassUList;
		
		typedef sequence < FactoryDefClass >  FactoryDefClassList;
		
		typedef sequence < FactoryDefClass >  FactoryDefClassBag;
		
		typedef sequence < FactoryDefClass >  FactoryDefClassSet;
		
		typedef sequence < FactoryDef >  FactoryDefUList;
		
		typedef sequence < FactoryDef >  FactoryDefList;
		
		typedef sequence < FactoryDef >  FactoryDefBag;
		

/* 
class proxy::MDE::ComponentIDL::FactoryDef
*/
		interface FactoryDefClass
			: MDE::BaseIDL::OperationDefClass
		{
			readonly attribute MDE::ComponentIDL::FactoryDefSet all_of_type_factory_def;
			readonly attribute MDE::ComponentIDL::FactoryDefSet all_of_class_factory_def;
			MDE::ComponentIDL::FactoryDef create_factory_def ( 
				in string identifier,
				in string repository_id,
				in string version,
				in boolean is_oneway,
				in MDE::BaseIDL::ParameterDefUList parameters,
				in string contexts) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::FactoryDef
*/
		interface FactoryDef
			: FactoryDefClass,
			  MDE::BaseIDL::OperationDef
		{
			MDE::ComponentIDL::HomeDef homedef ( ) raises ( 
					Reflective::MofError);
			void set_homedef ( 
				in MDE::ComponentIDL::HomeDef new_value) raises ( 
					Reflective::MofError);
		};

		interface FinderDef;
		struct HomeFinderLink
		{
			HomeDef homedef_end;
			FinderDef finders_end;
		};

		typedef sequence < HomeFinderLink >  HomeFinderLinkSet;
		
		typedef sequence < FinderDef >  FinderDefSet;
		

/* 
::MDE::ComponentIDL::Home_Finder
*/
		interface HomeFinder
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::HomeFinderLinkSet all_home_finder_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::HomeDef homedef,
				in MDE::ComponentIDL::FinderDef finders) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::HomeDef homedef ( 
				in MDE::ComponentIDL::FinderDef finders) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::FinderDefSet finders ( 
				in MDE::ComponentIDL::HomeDef homedef) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::HomeDef homedef,
				in MDE::ComponentIDL::FinderDef finders) raises ( 
					Reflective::MofError);
			void modify_homedef ( 
				in MDE::ComponentIDL::HomeDef homedef,
				in MDE::ComponentIDL::FinderDef finders,
				in MDE::ComponentIDL::HomeDef new_homedef) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_finders ( 
				in MDE::ComponentIDL::HomeDef homedef,
				in MDE::ComponentIDL::FinderDef finders,
				in MDE::ComponentIDL::FinderDef new_finders) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::HomeDef homedef,
				in MDE::ComponentIDL::FinderDef finders) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface FinderDefClass;
		typedef sequence < FinderDefClass >  FinderDefClassUList;
		
		typedef sequence < FinderDefClass >  FinderDefClassList;
		
		typedef sequence < FinderDefClass >  FinderDefClassBag;
		
		typedef sequence < FinderDefClass >  FinderDefClassSet;
		
		typedef sequence < FinderDef >  FinderDefUList;
		
		typedef sequence < FinderDef >  FinderDefList;
		
		typedef sequence < FinderDef >  FinderDefBag;
		

/* 
class proxy::MDE::ComponentIDL::FinderDef
*/
		interface FinderDefClass
			: MDE::BaseIDL::OperationDefClass
		{
			readonly attribute MDE::ComponentIDL::FinderDefSet all_of_type_finder_def;
			readonly attribute MDE::ComponentIDL::FinderDefSet all_of_class_finder_def;
			MDE::ComponentIDL::FinderDef create_finder_def ( 
				in string identifier,
				in string repository_id,
				in string version,
				in boolean is_oneway,
				in MDE::BaseIDL::ParameterDefUList parameters,
				in string contexts) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::FinderDef
*/
		interface FinderDef
			: FinderDefClass,
			  MDE::BaseIDL::OperationDef
		{
			MDE::ComponentIDL::HomeDef homedef ( ) raises ( 
					Reflective::MofError);
			void set_homedef ( 
				in MDE::ComponentIDL::HomeDef new_value) raises ( 
					Reflective::MofError);
		};

		struct ComponentHomeLink
		{
			ComponentDef component_end_end;
			HomeDef home_end_end;
		};

		typedef sequence < ComponentHomeLink >  ComponentHomeLinkSet;
		
		typedef sequence < HomeDef >  HomeDefSet;
		

/* 
::MDE::ComponentIDL::Component_Home
*/
		interface ComponentHome
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::ComponentHomeLinkSet all_component_home_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ComponentDef component_end,
				in MDE::ComponentIDL::HomeDef home_end) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef component_end ( 
				in MDE::ComponentIDL::HomeDef home_end) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::HomeDefSet home_end ( 
				in MDE::ComponentIDL::ComponentDef component_end) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ComponentDef component_end,
				in MDE::ComponentIDL::HomeDef home_end) raises ( 
					Reflective::MofError);
			void modify_component_end ( 
				in MDE::ComponentIDL::ComponentDef component_end,
				in MDE::ComponentIDL::HomeDef home_end,
				in MDE::ComponentIDL::ComponentDef new_component_end) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_home_end ( 
				in MDE::ComponentIDL::ComponentDef component_end,
				in MDE::ComponentIDL::HomeDef home_end,
				in MDE::ComponentIDL::HomeDef new_home_end) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ComponentDef component_end,
				in MDE::ComponentIDL::HomeDef home_end) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface HomeDefClass;
		typedef sequence < HomeDefClass >  HomeDefClassUList;
		
		typedef sequence < HomeDefClass >  HomeDefClassList;
		
		typedef sequence < HomeDefClass >  HomeDefClassBag;
		
		typedef sequence < HomeDefClass >  HomeDefClassSet;
		
		typedef sequence < HomeDef >  HomeDefUList;
		
		typedef sequence < HomeDef >  HomeDefList;
		
		typedef sequence < HomeDef >  HomeDefBag;
		
	}; // end module ComponentIDL
	module CIF
	{
		interface HomeImplDef;
		typedef sequence < HomeImplDef >  HomeImplDefSet;
		
	}; // end module CIF
	module ComponentIDL
	{

/* 
class proxy::MDE::ComponentIDL::HomeDef
*/
		interface HomeDefClass
			: MDE::BaseIDL::InterfaceDefClass
		{
			readonly attribute MDE::ComponentIDL::HomeDefSet all_of_type_home_def;
			readonly attribute MDE::ComponentIDL::HomeDefSet all_of_class_home_def;
			MDE::ComponentIDL::HomeDef create_home_def ( 
				in string identifier,
				in string repository_id,
				in string version,
				in boolean is_abstract,
				in boolean is_local) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::HomeDef
*/
		interface HomeDef
			: HomeDefClass,
			  MDE::BaseIDL::InterfaceDef
		{
			MDE::CIF::HomeImplDefSet segs ( ) raises ( 
					Reflective::MofError);
			void set_segs ( 
				in MDE::CIF::HomeImplDefSet new_value) raises ( 
					Reflective::MofError);
			void add_segs ( 
				in MDE::CIF::HomeImplDef new_element) raises ( 
					Reflective::MofError);
			void modify_segs ( 
				in MDE::CIF::HomeImplDef old_element,
				in MDE::CIF::HomeImplDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_segs ( 
				in MDE::CIF::HomeImplDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef component_end ( ) raises ( 
					Reflective::MofError);
			void set_component_end ( 
				in MDE::ComponentIDL::ComponentDef new_value) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::FinderDefSet finders ( ) raises ( 
					Reflective::MofError);
			void set_finders ( 
				in MDE::ComponentIDL::FinderDefSet new_value) raises ( 
					Reflective::MofError);
			void add_finders ( 
				in MDE::ComponentIDL::FinderDef new_element) raises ( 
					Reflective::MofError);
			void modify_finders ( 
				in MDE::ComponentIDL::FinderDef old_element,
				in MDE::ComponentIDL::FinderDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_finders ( 
				in MDE::ComponentIDL::FinderDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::FactoryDefSet factorys ( ) raises ( 
					Reflective::MofError);
			void set_factorys ( 
				in MDE::ComponentIDL::FactoryDefSet new_value) raises ( 
					Reflective::MofError);
			void add_factorys ( 
				in MDE::ComponentIDL::FactoryDef new_element) raises ( 
					Reflective::MofError);
			void modify_factorys ( 
				in MDE::ComponentIDL::FactoryDef old_element,
				in MDE::ComponentIDL::FactoryDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_factorys ( 
				in MDE::ComponentIDL::FactoryDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::BaseIDL::InterfaceDefSet supports_itf ( ) raises ( 
					Reflective::MofError);
			void set_supports_itf ( 
				in MDE::BaseIDL::InterfaceDefSet new_value) raises ( 
					Reflective::MofError);
			void add_supports_itf ( 
				in MDE::BaseIDL::InterfaceDef new_element) raises ( 
					Reflective::MofError);
			void modify_supports_itf ( 
				in MDE::BaseIDL::InterfaceDef old_element,
				in MDE::BaseIDL::InterfaceDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_supports_itf ( 
				in MDE::BaseIDL::InterfaceDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::BaseIDL::ValueDef primary_key ( ) raises ( 
					Reflective::NotSet,
					Reflective::MofError);
			void set_primary_key ( 
				in MDE::BaseIDL::ValueDef new_value) raises ( 
					Reflective::MofError);
			void unset_primary_key ( ) raises ( 
					Reflective::MofError);
		};

		interface UsesDef;
		struct UsesInterfaceLink
		{
			UsesDef uses_def_end;
			MDE::BaseIDL::InterfaceDef uses_itf_end;
		};

		typedef sequence < UsesInterfaceLink >  UsesInterfaceLinkSet;
		

/* 
::MDE::ComponentIDL::Uses_Interface
*/
		interface UsesInterface
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::UsesInterfaceLinkSet all_uses_interface_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::UsesDef uses_def,
				in MDE::BaseIDL::InterfaceDef uses_itf) raises ( 
					Reflective::MofError);
			MDE::BaseIDL::InterfaceDef uses_itf ( 
				in MDE::ComponentIDL::UsesDef uses_def) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::UsesDef uses_def,
				in MDE::BaseIDL::InterfaceDef uses_itf) raises ( 
					Reflective::MofError);
			void modify_uses_itf ( 
				in MDE::ComponentIDL::UsesDef uses_def,
				in MDE::BaseIDL::InterfaceDef uses_itf,
				in MDE::BaseIDL::InterfaceDef new_uses_itf) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::UsesDef uses_def,
				in MDE::BaseIDL::InterfaceDef uses_itf) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		struct ComponentReceptacleLink
		{
			ComponentDef comp_end;
			UsesDef receptacle_end;
		};

		typedef sequence < ComponentReceptacleLink >  ComponentReceptacleLinkSet;
		
		typedef sequence < UsesDef >  UsesDefSet;
		

/* 
::MDE::ComponentIDL::Component_Receptacle
*/
		interface ComponentReceptacle
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::ComponentReceptacleLinkSet all_component_receptacle_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::UsesDef receptacle) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef comp ( 
				in MDE::ComponentIDL::UsesDef receptacle) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::UsesDefSet receptacle ( 
				in MDE::ComponentIDL::ComponentDef comp) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::UsesDef receptacle) raises ( 
					Reflective::MofError);
			void modify_comp ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::UsesDef receptacle,
				in MDE::ComponentIDL::ComponentDef new_comp) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_receptacle ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::UsesDef receptacle,
				in MDE::ComponentIDL::UsesDef new_receptacle) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::UsesDef receptacle) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface UsesDefClass;
		typedef sequence < UsesDefClass >  UsesDefClassUList;
		
		typedef sequence < UsesDefClass >  UsesDefClassList;
		
		typedef sequence < UsesDefClass >  UsesDefClassBag;
		
		typedef sequence < UsesDefClass >  UsesDefClassSet;
		
		typedef sequence < UsesDef >  UsesDefUList;
		
		typedef sequence < UsesDef >  UsesDefList;
		
		typedef sequence < UsesDef >  UsesDefBag;
		

/* 
class proxy::MDE::ComponentIDL::UsesDef
*/
		interface UsesDefClass
			: ComponentFeatureClass,
			  MDE::BaseIDL::ContainedClass
		{
			readonly attribute MDE::ComponentIDL::UsesDefSet all_of_type_uses_def;
			readonly attribute MDE::ComponentIDL::UsesDefSet all_of_class_uses_def;
			MDE::ComponentIDL::UsesDef create_uses_def ( 
				in string identifier,
				in string repository_id,
				in string version,
				in boolean multiple_itf) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::UsesDef
*/
		interface UsesDef
			: UsesDefClass,
			  ComponentFeature,
			  MDE::BaseIDL::Contained
		{
			boolean multiple_itf ( ) raises ( 
					Reflective::MofError);
			void set_multiple_itf ( 
				in boolean new_value) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef comp ( ) raises ( 
					Reflective::MofError);
			void set_comp ( 
				in MDE::ComponentIDL::ComponentDef new_value) raises ( 
					Reflective::MofError);
			MDE::BaseIDL::InterfaceDef uses_itf ( ) raises ( 
					Reflective::MofError);
			void set_uses_itf ( 
				in MDE::BaseIDL::InterfaceDef new_value) raises ( 
					Reflective::MofError);
		};

		interface ConsumesDef;
		struct ComponentConsumesLink
		{
			ComponentDef comp_end;
			ConsumesDef consumess_end;
		};

		typedef sequence < ComponentConsumesLink >  ComponentConsumesLinkSet;
		
		typedef sequence < ConsumesDef >  ConsumesDefSet;
		

/* 
::MDE::ComponentIDL::Component_Consumes
*/
		interface ComponentConsumes
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::ComponentConsumesLinkSet all_component_consumes_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::ConsumesDef consumess) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef comp ( 
				in MDE::ComponentIDL::ConsumesDef consumess) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ConsumesDefSet consumess ( 
				in MDE::ComponentIDL::ComponentDef comp) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::ConsumesDef consumess) raises ( 
					Reflective::MofError);
			void modify_comp ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::ConsumesDef consumess,
				in MDE::ComponentIDL::ComponentDef new_comp) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_consumess ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::ConsumesDef consumess,
				in MDE::ComponentIDL::ConsumesDef new_consumess) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::ConsumesDef consumess) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface ConsumesDefClass;
		typedef sequence < ConsumesDefClass >  ConsumesDefClassUList;
		
		typedef sequence < ConsumesDefClass >  ConsumesDefClassList;
		
		typedef sequence < ConsumesDefClass >  ConsumesDefClassBag;
		
		typedef sequence < ConsumesDefClass >  ConsumesDefClassSet;
		
		typedef sequence < ConsumesDef >  ConsumesDefUList;
		
		typedef sequence < ConsumesDef >  ConsumesDefList;
		
		typedef sequence < ConsumesDef >  ConsumesDefBag;
		

/* 
class proxy::MDE::ComponentIDL::ConsumesDef
*/
		interface ConsumesDefClass
			: EventPortDefClass
		{
			readonly attribute MDE::ComponentIDL::ConsumesDefSet all_of_type_consumes_def;
			readonly attribute MDE::ComponentIDL::ConsumesDefSet all_of_class_consumes_def;
			MDE::ComponentIDL::ConsumesDef create_consumes_def ( 
				in string identifier,
				in string repository_id,
				in string version) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::ConsumesDef
*/
		interface ConsumesDef
			: ConsumesDefClass,
			  EventPortDef
		{
			MDE::ComponentIDL::ComponentDef comp ( ) raises ( 
					Reflective::MofError);
			void set_comp ( 
				in MDE::ComponentIDL::ComponentDef new_value) raises ( 
					Reflective::MofError);
		};

		interface EmitsDef;
		struct ComponentEmitsLink
		{
			ComponentDef comp_end;
			EmitsDef emitss_end;
		};

		typedef sequence < ComponentEmitsLink >  ComponentEmitsLinkSet;
		
		typedef sequence < EmitsDef >  EmitsDefSet;
		

/* 
::MDE::ComponentIDL::Component_Emits
*/
		interface ComponentEmits
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::ComponentEmitsLinkSet all_component_emits_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::EmitsDef emitss) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef comp ( 
				in MDE::ComponentIDL::EmitsDef emitss) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::EmitsDefSet emitss ( 
				in MDE::ComponentIDL::ComponentDef comp) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::EmitsDef emitss) raises ( 
					Reflective::MofError);
			void modify_comp ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::EmitsDef emitss,
				in MDE::ComponentIDL::ComponentDef new_comp) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_emitss ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::EmitsDef emitss,
				in MDE::ComponentIDL::EmitsDef new_emitss) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::EmitsDef emitss) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface EmitsDefClass;
		typedef sequence < EmitsDefClass >  EmitsDefClassUList;
		
		typedef sequence < EmitsDefClass >  EmitsDefClassList;
		
		typedef sequence < EmitsDefClass >  EmitsDefClassBag;
		
		typedef sequence < EmitsDefClass >  EmitsDefClassSet;
		
		typedef sequence < EmitsDef >  EmitsDefUList;
		
		typedef sequence < EmitsDef >  EmitsDefList;
		
		typedef sequence < EmitsDef >  EmitsDefBag;
		

/* 
class proxy::MDE::ComponentIDL::EmitsDef
*/
		interface EmitsDefClass
			: EventPortDefClass
		{
			readonly attribute MDE::ComponentIDL::EmitsDefSet all_of_type_emits_def;
			readonly attribute MDE::ComponentIDL::EmitsDefSet all_of_class_emits_def;
			MDE::ComponentIDL::EmitsDef create_emits_def ( 
				in string identifier,
				in string repository_id,
				in string version) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::EmitsDef
*/
		interface EmitsDef
			: EmitsDefClass,
			  EventPortDef
		{
			MDE::ComponentIDL::ComponentDef comp ( ) raises ( 
					Reflective::MofError);
			void set_comp ( 
				in MDE::ComponentIDL::ComponentDef new_value) raises ( 
					Reflective::MofError);
		};

		struct EventTypeAssLink
		{
			EventPortDef event_end;
			EventDef type_end;
		};

		typedef sequence < EventTypeAssLink >  EventTypeAssLinkSet;
		

/* 
::MDE::ComponentIDL::Event_TypeAss
*/
		interface EventTypeAss
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::EventTypeAssLinkSet all_event_type_ass_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::EventPortDef event,
				in MDE::ComponentIDL::EventDef type) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::EventDef type ( 
				in MDE::ComponentIDL::EventPortDef event) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::EventPortDef event,
				in MDE::ComponentIDL::EventDef type) raises ( 
					Reflective::MofError);
			void modify_type ( 
				in MDE::ComponentIDL::EventPortDef event,
				in MDE::ComponentIDL::EventDef type,
				in MDE::ComponentIDL::EventDef new_type) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::EventPortDef event,
				in MDE::ComponentIDL::EventDef type) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface EventDefClass;
		typedef sequence < EventDefClass >  EventDefClassUList;
		
		typedef sequence < EventDefClass >  EventDefClassList;
		
		typedef sequence < EventDefClass >  EventDefClassBag;
		
		typedef sequence < EventDefClass >  EventDefClassSet;
		
		typedef sequence < EventDef >  EventDefUList;
		
		typedef sequence < EventDef >  EventDefList;
		
		typedef sequence < EventDef >  EventDefBag;
		
		typedef sequence < EventDef >  EventDefSet;
		

/* 
class proxy::MDE::ComponentIDL::EventDef
*/
		interface EventDefClass
			: MDE::BaseIDL::ValueDefClass
		{
			readonly attribute MDE::ComponentIDL::EventDefSet all_of_type_event_def;
			readonly attribute MDE::ComponentIDL::EventDefSet all_of_class_event_def;
			MDE::ComponentIDL::EventDef create_event_def ( 
				in string identifier,
				in string repository_id,
				in string version,
				in boolean is_abstract,
				in boolean is_custom,
				in boolean is_truncatable) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::EventDef
*/
		interface EventDef
			: EventDefClass,
			  MDE::BaseIDL::ValueDef
		{
		};

		typedef sequence < EventPortDefClass >  EventPortDefClassUList;
		
		typedef sequence < EventPortDefClass >  EventPortDefClassList;
		
		typedef sequence < EventPortDefClass >  EventPortDefClassBag;
		
		typedef sequence < EventPortDefClass >  EventPortDefClassSet;
		
		typedef sequence < EventPortDef >  EventPortDefUList;
		
		typedef sequence < EventPortDef >  EventPortDefList;
		
		typedef sequence < EventPortDef >  EventPortDefBag;
		
		interface ProvidesDef;
		struct ProvidesInterfaceLink
		{
			ProvidesDef provides_def_end;
			MDE::BaseIDL::InterfaceDef provides_itf_end;
		};

		typedef sequence < ProvidesInterfaceLink >  ProvidesInterfaceLinkSet;
		

/* 
::MDE::ComponentIDL::Provides_Interface
*/
		interface ProvidesInterface
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::ProvidesInterfaceLinkSet all_provides_interface_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ProvidesDef provides_def,
				in MDE::BaseIDL::InterfaceDef provides_itf) raises ( 
					Reflective::MofError);
			MDE::BaseIDL::InterfaceDef provides_itf ( 
				in MDE::ComponentIDL::ProvidesDef provides_def) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ProvidesDef provides_def,
				in MDE::BaseIDL::InterfaceDef provides_itf) raises ( 
					Reflective::MofError);
			void modify_provides_itf ( 
				in MDE::ComponentIDL::ProvidesDef provides_def,
				in MDE::BaseIDL::InterfaceDef provides_itf,
				in MDE::BaseIDL::InterfaceDef new_provides_itf) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ProvidesDef provides_def,
				in MDE::BaseIDL::InterfaceDef provides_itf) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		struct ComponentFacetLink
		{
			ComponentDef comp_end;
			ProvidesDef facet_end;
		};

		typedef sequence < ComponentFacetLink >  ComponentFacetLinkSet;
		
		typedef sequence < ProvidesDef >  ProvidesDefSet;
		

/* 
::MDE::ComponentIDL::Component_Facet
*/
		interface ComponentFacet
			: Reflective::RefAssociation
		{
			MDE::ComponentIDL::ComponentFacetLinkSet all_component_facet_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::ProvidesDef facet) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef comp ( 
				in MDE::ComponentIDL::ProvidesDef facet) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ProvidesDefSet facet ( 
				in MDE::ComponentIDL::ComponentDef comp) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::ProvidesDef facet) raises ( 
					Reflective::MofError);
			void modify_comp ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::ProvidesDef facet,
				in MDE::ComponentIDL::ComponentDef new_comp) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_facet ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::ProvidesDef facet,
				in MDE::ComponentIDL::ProvidesDef new_facet) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::ComponentIDL::ComponentDef comp,
				in MDE::ComponentIDL::ProvidesDef facet) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		interface ProvidesDefClass;
		typedef sequence < ProvidesDefClass >  ProvidesDefClassUList;
		
		typedef sequence < ProvidesDefClass >  ProvidesDefClassList;
		
		typedef sequence < ProvidesDefClass >  ProvidesDefClassBag;
		
		typedef sequence < ProvidesDefClass >  ProvidesDefClassSet;
		
		typedef sequence < ProvidesDef >  ProvidesDefUList;
		
		typedef sequence < ProvidesDef >  ProvidesDefList;
		
		typedef sequence < ProvidesDef >  ProvidesDefBag;
		

/* 
class proxy::MDE::ComponentIDL::ProvidesDef
*/
		interface ProvidesDefClass
			: ComponentFeatureClass,
			  MDE::BaseIDL::ContainedClass
		{
			readonly attribute MDE::ComponentIDL::ProvidesDefSet all_of_type_provides_def;
			readonly attribute MDE::ComponentIDL::ProvidesDefSet all_of_class_provides_def;
			MDE::ComponentIDL::ProvidesDef create_provides_def ( 
				in string identifier,
				in string repository_id,
				in string version) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::ProvidesDef
*/
		interface ProvidesDef
			: ProvidesDefClass,
			  ComponentFeature,
			  MDE::BaseIDL::Contained
		{
			MDE::ComponentIDL::ComponentDef comp ( ) raises ( 
					Reflective::MofError);
			void set_comp ( 
				in MDE::ComponentIDL::ComponentDef new_value) raises ( 
					Reflective::MofError);
			MDE::BaseIDL::InterfaceDef provides_itf ( ) raises ( 
					Reflective::MofError);
			void set_provides_itf ( 
				in MDE::BaseIDL::InterfaceDef new_value) raises ( 
					Reflective::MofError);
		};

		interface ComponentDefClass;
		typedef sequence < ComponentDefClass >  ComponentDefClassUList;
		
		typedef sequence < ComponentDefClass >  ComponentDefClassList;
		
		typedef sequence < ComponentDefClass >  ComponentDefClassBag;
		
		typedef sequence < ComponentDefClass >  ComponentDefClassSet;
		
		typedef sequence < ComponentDef >  ComponentDefUList;
		
		typedef sequence < ComponentDef >  ComponentDefList;
		
		typedef sequence < ComponentDef >  ComponentDefBag;
		
		typedef sequence < ComponentDef >  ComponentDefSet;
		
	}; // end module ComponentIDL
	module CIF
	{
		interface ComponentImplDef;
		typedef sequence < ComponentImplDef >  ComponentImplDefSet;
		
	}; // end module CIF
	module ComponentIDL
	{

/* 
class proxy::MDE::ComponentIDL::ComponentDef
*/
		interface ComponentDefClass
			: ComponentFeatureClass,
			  MDE::BaseIDL::InterfaceDefClass
		{
			readonly attribute MDE::ComponentIDL::ComponentDefSet all_of_type_component_def;
			readonly attribute MDE::ComponentIDL::ComponentDefSet all_of_class_component_def;
			MDE::ComponentIDL::ComponentDef create_component_def ( 
				in string identifier,
				in string repository_id,
				in string version,
				in boolean is_abstract,
				in boolean is_local) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::ComponentIDL::ComponentDef
*/
		interface ComponentDef
			: ComponentDefClass,
			  ComponentFeature,
			  MDE::BaseIDL::InterfaceDef
		{
			MDE::CIF::ComponentImplDefSet segs ( ) raises ( 
					Reflective::MofError);
			void set_segs ( 
				in MDE::CIF::ComponentImplDefSet new_value) raises ( 
					Reflective::MofError);
			void add_segs ( 
				in MDE::CIF::ComponentImplDef new_element) raises ( 
					Reflective::MofError);
			void modify_segs ( 
				in MDE::CIF::ComponentImplDef old_element,
				in MDE::CIF::ComponentImplDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_segs ( 
				in MDE::CIF::ComponentImplDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::ProvidesDefSet facet ( ) raises ( 
					Reflective::MofError);
			void set_facet ( 
				in MDE::ComponentIDL::ProvidesDefSet new_value) raises ( 
					Reflective::MofError);
			void add_facet ( 
				in MDE::ComponentIDL::ProvidesDef new_element) raises ( 
					Reflective::MofError);
			void modify_facet ( 
				in MDE::ComponentIDL::ProvidesDef old_element,
				in MDE::ComponentIDL::ProvidesDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_facet ( 
				in MDE::ComponentIDL::ProvidesDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::EmitsDefSet emitss ( ) raises ( 
					Reflective::MofError);
			void set_emitss ( 
				in MDE::ComponentIDL::EmitsDefSet new_value) raises ( 
					Reflective::MofError);
			void add_emitss ( 
				in MDE::ComponentIDL::EmitsDef new_element) raises ( 
					Reflective::MofError);
			void modify_emitss ( 
				in MDE::ComponentIDL::EmitsDef old_element,
				in MDE::ComponentIDL::EmitsDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_emitss ( 
				in MDE::ComponentIDL::EmitsDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::ConsumesDefSet consumess ( ) raises ( 
					Reflective::MofError);
			void set_consumess ( 
				in MDE::ComponentIDL::ConsumesDefSet new_value) raises ( 
					Reflective::MofError);
			void add_consumess ( 
				in MDE::ComponentIDL::ConsumesDef new_element) raises ( 
					Reflective::MofError);
			void modify_consumess ( 
				in MDE::ComponentIDL::ConsumesDef old_element,
				in MDE::ComponentIDL::ConsumesDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_consumess ( 
				in MDE::ComponentIDL::ConsumesDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::UsesDefSet receptacle ( ) raises ( 
					Reflective::MofError);
			void set_receptacle ( 
				in MDE::ComponentIDL::UsesDefSet new_value) raises ( 
					Reflective::MofError);
			void add_receptacle ( 
				in MDE::ComponentIDL::UsesDef new_element) raises ( 
					Reflective::MofError);
			void modify_receptacle ( 
				in MDE::ComponentIDL::UsesDef old_element,
				in MDE::ComponentIDL::UsesDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_receptacle ( 
				in MDE::ComponentIDL::UsesDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::HomeDefSet home_end ( ) raises ( 
					Reflective::MofError);
			void set_home_end ( 
				in MDE::ComponentIDL::HomeDefSet new_value) raises ( 
					Reflective::MofError);
			void add_home_end ( 
				in MDE::ComponentIDL::HomeDef new_element) raises ( 
					Reflective::MofError);
			void modify_home_end ( 
				in MDE::ComponentIDL::HomeDef old_element,
				in MDE::ComponentIDL::HomeDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_home_end ( 
				in MDE::ComponentIDL::HomeDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::PublishesDefSet publishess ( ) raises ( 
					Reflective::MofError);
			void set_publishess ( 
				in MDE::ComponentIDL::PublishesDefSet new_value) raises ( 
					Reflective::MofError);
			void add_publishess ( 
				in MDE::ComponentIDL::PublishesDef new_element) raises ( 
					Reflective::MofError);
			void modify_publishess ( 
				in MDE::ComponentIDL::PublishesDef old_element,
				in MDE::ComponentIDL::PublishesDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_publishess ( 
				in MDE::ComponentIDL::PublishesDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::SinkDefSet sinkss ( ) raises ( 
					Reflective::MofError);
			void set_sinkss ( 
				in MDE::ComponentIDL::SinkDefSet new_value) raises ( 
					Reflective::MofError);
			void add_sinkss ( 
				in MDE::ComponentIDL::SinkDef new_element) raises ( 
					Reflective::MofError);
			void modify_sinkss ( 
				in MDE::ComponentIDL::SinkDef old_element,
				in MDE::ComponentIDL::SinkDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_sinkss ( 
				in MDE::ComponentIDL::SinkDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::SourceDefSet sourcess ( ) raises ( 
					Reflective::MofError);
			void set_sourcess ( 
				in MDE::ComponentIDL::SourceDefSet new_value) raises ( 
					Reflective::MofError);
			void add_sourcess ( 
				in MDE::ComponentIDL::SourceDef new_element) raises ( 
					Reflective::MofError);
			void modify_sourcess ( 
				in MDE::ComponentIDL::SourceDef old_element,
				in MDE::ComponentIDL::SourceDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_sourcess ( 
				in MDE::ComponentIDL::SourceDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::SiSouDefSet sisouss ( ) raises ( 
					Reflective::MofError);
			void set_sisouss ( 
				in MDE::ComponentIDL::SiSouDefSet new_value) raises ( 
					Reflective::MofError);
			void add_sisouss ( 
				in MDE::ComponentIDL::SiSouDef new_element) raises ( 
					Reflective::MofError);
			void modify_sisouss ( 
				in MDE::ComponentIDL::SiSouDef old_element,
				in MDE::ComponentIDL::SiSouDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_sisouss ( 
				in MDE::ComponentIDL::SiSouDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::BaseIDL::InterfaceDefSet supports_itf ( ) raises ( 
					Reflective::MofError);
			void set_supports_itf ( 
				in MDE::BaseIDL::InterfaceDefSet new_value) raises ( 
					Reflective::MofError);
			void add_supports_itf ( 
				in MDE::BaseIDL::InterfaceDef new_element) raises ( 
					Reflective::MofError);
			void modify_supports_itf ( 
				in MDE::BaseIDL::InterfaceDef old_element,
				in MDE::BaseIDL::InterfaceDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_supports_itf ( 
				in MDE::BaseIDL::InterfaceDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		typedef sequence < ComponentFeatureClass >  ComponentFeatureClassUList;
		
		typedef sequence < ComponentFeatureClass >  ComponentFeatureClassList;
		
		typedef sequence < ComponentFeatureClass >  ComponentFeatureClassBag;
		
		typedef sequence < ComponentFeatureClass >  ComponentFeatureClassSet;
		
		typedef sequence < ComponentFeature >  ComponentFeatureUList;
		
		typedef sequence < ComponentFeature >  ComponentFeatureList;
		
		typedef sequence < ComponentFeature >  ComponentFeatureBag;
		
		interface ComponentIDLPackage
			: Reflective::RefPackage
		{
			readonly attribute MDE::ComponentIDL::ComponentFeatureClass component_feature_ref;
			readonly attribute MDE::ComponentIDL::ComponentDefClass component_def_ref;
			readonly attribute MDE::ComponentIDL::ProvidesDefClass provides_def_ref;
			readonly attribute MDE::ComponentIDL::ComponentFacet component_facet_ref;
			readonly attribute MDE::ComponentIDL::ProvidesInterface provides_interface_ref;
			readonly attribute MDE::ComponentIDL::EventPortDefClass event_port_def_ref;
			readonly attribute MDE::ComponentIDL::EventDefClass event_def_ref;
			readonly attribute MDE::ComponentIDL::EventTypeAss event_type_ass_ref;
			readonly attribute MDE::ComponentIDL::EmitsDefClass emits_def_ref;
			readonly attribute MDE::ComponentIDL::ComponentEmits component_emits_ref;
			readonly attribute MDE::ComponentIDL::ConsumesDefClass consumes_def_ref;
			readonly attribute MDE::ComponentIDL::ComponentConsumes component_consumes_ref;
			readonly attribute MDE::ComponentIDL::UsesDefClass uses_def_ref;
			readonly attribute MDE::ComponentIDL::ComponentReceptacle component_receptacle_ref;
			readonly attribute MDE::ComponentIDL::UsesInterface uses_interface_ref;
			readonly attribute MDE::ComponentIDL::HomeDefClass home_def_ref;
			readonly attribute MDE::ComponentIDL::ComponentHome component_home_ref;
			readonly attribute MDE::ComponentIDL::FinderDefClass finder_def_ref;
			readonly attribute MDE::ComponentIDL::HomeFinder home_finder_ref;
			readonly attribute MDE::ComponentIDL::FactoryDefClass factory_def_ref;
			readonly attribute MDE::ComponentIDL::HomeFactory home_factory_ref;
			readonly attribute MDE::ComponentIDL::HomeSupports home_supports_ref;
			readonly attribute MDE::ComponentIDL::KeyHome key_home_ref;
			readonly attribute MDE::ComponentIDL::PublishesDefClass publishes_def_ref;
			readonly attribute MDE::ComponentIDL::ComponentPublishes component_publishes_ref;
			readonly attribute MDE::ComponentIDL::StreamPortDefClass stream_port_def_ref;
			readonly attribute MDE::ComponentIDL::MediaTypeClass media_type_ref;
			readonly attribute MDE::ComponentIDL::MediatoType mediato_type_ref;
			readonly attribute MDE::ComponentIDL::SinkDefClass sink_def_ref;
			readonly attribute MDE::ComponentIDL::Sinks sinks_ref;
			readonly attribute MDE::ComponentIDL::SourceDefClass source_def_ref;
			readonly attribute MDE::ComponentIDL::Sources sources_ref;
			readonly attribute MDE::ComponentIDL::SiSouDefClass si_sou_def_ref;
			readonly attribute MDE::ComponentIDL::SiSous si_sous_ref;
			readonly attribute MDE::ComponentIDL::ComponentSupports component_supports_ref;
		};

	}; // end module ComponentIDL
	module CIF
	{
		interface ArtifactDef;
		interface Policy;
		typedef sequence < Policy >  PolicySet;
		
		typedef sequence < SegmentDef >  SegmentDefSet;
		

/* 
class proxy::MDE::CIF::SegmentDef
*/
		interface SegmentDefClass
			: MDE::BaseIDL::ContainedClass
		{
			readonly attribute MDE::CIF::SegmentDefSet all_of_type_segment_def;
			readonly attribute MDE::CIF::SegmentDefSet all_of_class_segment_def;
			MDE::CIF::SegmentDef create_segment_def ( 
				in string identifier,
				in string repository_id,
				in string version,
				in boolean is_serialized) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::CIF::SegmentDef
*/
		interface SegmentDef
			: SegmentDefClass,
			  MDE::BaseIDL::Contained
		{
			boolean is_serialized ( ) raises ( 
					Reflective::MofError);
			void set_is_serialized ( 
				in boolean new_value) raises ( 
					Reflective::MofError);
			MDE::CIF::ArtifactDef artifact ( ) raises ( 
					Reflective::MofError);
			void set_artifact ( 
				in MDE::CIF::ArtifactDef new_value) raises ( 
					Reflective::MofError);
			MDE::CIF::ComponentImplDef component_impl_end ( ) raises ( 
					Reflective::MofError);
			void set_component_impl_end ( 
				in MDE::CIF::ComponentImplDef new_value) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentFeatureSet features ( ) raises ( 
					Reflective::MofError);
			void set_features ( 
				in MDE::ComponentIDL::ComponentFeatureSet new_value) raises ( 
					Reflective::MofError);
			void add_features ( 
				in MDE::ComponentIDL::ComponentFeature new_element) raises ( 
					Reflective::MofError);
			void modify_features ( 
				in MDE::ComponentIDL::ComponentFeature old_element,
				in MDE::ComponentIDL::ComponentFeature new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_features ( 
				in MDE::ComponentIDL::ComponentFeature old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::CIF::PolicySet policies ( ) raises ( 
					Reflective::MofError);
			void set_policies ( 
				in MDE::CIF::PolicySet new_value) raises ( 
					Reflective::MofError);
			void add_policies ( 
				in MDE::CIF::Policy new_element) raises ( 
					Reflective::MofError);
			void modify_policies ( 
				in MDE::CIF::Policy old_element,
				in MDE::CIF::Policy new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_policies ( 
				in MDE::CIF::Policy old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};


/* 
class proxy::MDE::CIF::HomeImplDef
*/
		interface HomeImplDefClass
			: MDE::BaseIDL::ContainerClass
		{
			readonly attribute MDE::CIF::HomeImplDefSet all_of_type_home_impl_def;
			readonly attribute MDE::CIF::HomeImplDefSet all_of_class_home_impl_def;
			MDE::CIF::HomeImplDef create_home_impl_def ( 
				in string identifier,
				in string repository_id,
				in string version) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::CIF::HomeImplDef
*/
		interface HomeImplDef
			: HomeImplDefClass,
			  MDE::BaseIDL::Container
		{
			MDE::CIF::ComponentImplDef component_impl ( ) raises ( 
					Reflective::MofError);
			void set_component_impl ( 
				in MDE::CIF::ComponentImplDef new_value) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::HomeDef home_end ( ) raises ( 
					Reflective::MofError);
			void set_home_end ( 
				in MDE::ComponentIDL::HomeDef new_value) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::CIF::ComponentCategory
*/
		enum ComponentCategory
			{
			PROCESS,
			SESSION,
			ENTITY,
			SERVICE
			};

/* 
class proxy::MDE::CIF::ComponentImplDef
*/
		interface ComponentImplDefClass
			: MDE::BaseIDL::ContainerClass
		{
			readonly attribute MDE::CIF::ComponentImplDefSet all_of_type_component_impl_def;
			readonly attribute MDE::CIF::ComponentImplDefSet all_of_class_component_impl_def;
			MDE::CIF::ComponentImplDef create_component_impl_def ( 
				in string identifier,
				in string repository_id,
				in string version,
				in MDE::CIF::ComponentCategory category) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::CIF::ComponentImplDef
*/
		interface ComponentImplDef
			: ComponentImplDefClass,
			  MDE::BaseIDL::Container
		{
			MDE::CIF::ComponentCategory category ( ) raises ( 
					Reflective::MofError);
			void set_category ( 
				in MDE::CIF::ComponentCategory new_value) raises ( 
					Reflective::MofError);
			MDE::CIF::SegmentDefSet segment ( ) raises ( 
					Reflective::MofError);
			void set_segment ( 
				in MDE::CIF::SegmentDefSet new_value) raises ( 
					Reflective::MofError);
			void add_segment ( 
				in MDE::CIF::SegmentDef new_element) raises ( 
					Reflective::MofError);
			void modify_segment ( 
				in MDE::CIF::SegmentDef old_element,
				in MDE::CIF::SegmentDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_segment ( 
				in MDE::CIF::SegmentDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef component_end ( ) raises ( 
					Reflective::MofError);
			void set_component_end ( 
				in MDE::ComponentIDL::ComponentDef new_value) raises ( 
					Reflective::MofError);
			MDE::CIF::HomeImplDefSet home_impl ( ) raises ( 
					Reflective::MofError);
			void set_home_impl ( 
				in MDE::CIF::HomeImplDefSet new_value) raises ( 
					Reflective::MofError);
			void add_home_impl ( 
				in MDE::CIF::HomeImplDef new_element) raises ( 
					Reflective::MofError);
			void modify_home_impl ( 
				in MDE::CIF::HomeImplDef old_element,
				in MDE::CIF::HomeImplDef new_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
			void remove_home_impl ( 
				in MDE::CIF::HomeImplDef old_element) raises ( 
					Reflective::NotFound,
					Reflective::MofError);
		};

		typedef sequence < ArtifactDef >  ArtifactDefSet;
		

/* 
class proxy::MDE::CIF::ArtifactDef
*/
		interface ArtifactDefClass
			: MDE::BaseIDL::ContainedClass
		{
			readonly attribute MDE::CIF::ArtifactDefSet all_of_type_artifact_def;
			readonly attribute MDE::CIF::ArtifactDefSet all_of_class_artifact_def;
			MDE::CIF::ArtifactDef create_artifact_def ( 
				in string identifier,
				in string repository_id,
				in string version) raises ( 
					Reflective::MofError);
		};


/* 
::MDE::CIF::ArtifactDef
*/
		interface ArtifactDef
			: ArtifactDefClass,
			  MDE::BaseIDL::Contained
		{
			MDE::CIF::SegmentDef segment ( ) raises ( 
					Reflective::MofError);
			void set_segment ( 
				in MDE::CIF::SegmentDef new_value) raises ( 
					Reflective::MofError);
		};


/* 
class proxy::MDE::CIF::Policy
*/
		interface PolicyClass
			: Reflective::RefObject
		{
			readonly attribute MDE::CIF::PolicySet all_of_type_policy;
		};


/* 
::MDE::CIF::Policy
*/
		interface Policy
			: PolicyClass
		{
		};

	}; // end module CIF
}; // end module MDE
#endif