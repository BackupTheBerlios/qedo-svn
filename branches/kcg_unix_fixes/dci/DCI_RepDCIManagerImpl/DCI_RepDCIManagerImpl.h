//
// generated by Qedo
//

#ifndef _DCI_RepDCIManagerImpl_H_
#define _DCI_RepDCIManagerImpl_H_


// BEGIN USER INSERT SECTION file_pre
// END USER INSERT SECTION file_pre


#include <CORBA.h>
#include "DCI_RepDCIManagerImpl_BUSINESS.h"
#include "valuetypes.h"
#include "RefCountBase.h"
#include <string>


// BEGIN USER INSERT SECTION file_post
#include "MDE.h"
#include "Output.h"
#include "RepUtils.h"
#include <fstream>

using namespace std;
// END USER INSERT SECTION file_post


namespace DCI
{
    
    //
    // executor
    //
    class RepDCIManagerSessionImpl
        : public virtual CORBA::LocalObject
        , public virtual ::DCI::CCM_RepDCIManagerSessionImpl
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_RepDCIManagerSessionImpl
// END USER INSERT SECTION INHERITANCE_RepDCIManagerSessionImpl
    {
    
    private:
    
        ::DCI::CCM_RepDCIManager_ContextImpl_var context_;
        
    public:
    
        RepDCIManagerSessionImpl();
        virtual ~RepDCIManagerSessionImpl();
        
        void set_context(::DCI::CCM_RepDCIManager_ContextImpl_ptr context)
            throw (CORBA::SystemException, Components::CCMException);
        
        void configuration_complete()
            throw (CORBA::SystemException, Components::InvalidConfiguration);
        
        void remove()
            throw (CORBA::SystemException);
        
        
        //
        // IDL:DCI/DCIManager/dci_name:1.0
        //
        void dci_name(const char* param)
        	throw(CORBA::SystemException);
        char* dci_name()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/DCIDeployment/install_with_archive:1.0
        //
        virtual char* install_with_archive(const DCI::AssemblyArchive& archive)
        	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure, ::DCI::InvalidArchive, ::DCI::AlreadyInstalled);
        
        //
        // IDL:DCI/DCIDeployment/install_with_descriptor:1.0
        //
        virtual char* install_with_descriptor(const char* descriptor)
        	throw(CORBA::SystemException, ::Components::Deployment::InstallationFailure, ::DCI::AlreadyInstalled);
        
        //
        // IDL:DCI/DCIDeployment/update_with_archive:1.0
        //
        virtual char* update_with_archive(const char* old_assemblyUUID, const DCI::AssemblyArchive& archive)
        	throw(CORBA::SystemException, ::DCI::UninstallationFailure, ::DCI::InvalidArchive, ::DCI::AlreadyInstalled, ::Components::Deployment::InstallationFailure, ::DCI::UnknownAssembly);
        
        //
        // IDL:DCI/DCIDeployment/update_with_descriptor:1.0
        //
        virtual char* update_with_descriptor(const char* old_assemblyUUID, const char* descriptor)
        	throw(CORBA::SystemException, ::DCI::UninstallationFailure, ::DCI::AlreadyInstalled, ::Components::Deployment::InstallationFailure, ::DCI::UnknownAssembly);
        
        //
        // IDL:DCI/DCIDeployment/uninstall:1.0
        //
        virtual void uninstall(const char* assemblyUUID)
        	throw(CORBA::SystemException, ::DCI::UninstallationFailure, ::DCI::AssemblyUsed, ::DCI::UnknownAssembly);
        
        //
        // IDL:DCI/DCIDeployment/create_assembly_instance:1.0
        //
        virtual char* create_assembly_instance(const char* assemblyUUID)
        	throw(CORBA::SystemException, ::DCI::CreationFailure);
        
        //
        // IDL:DCI/DCIDeployment/get_assembly_instances:1.0
        //
        virtual DCI::InstanceUUIDs* get_assembly_instances(const char* assemblyUUID)
        	throw(CORBA::SystemException, ::DCI::UnknownAssembly);
        
        //
        // IDL:DCI/DCIDeployment/get_assembly_manager:1.0
        //
        virtual DCI::AssemblyManager_ptr get_assembly_manager(const char* instance_id)
        	throw(CORBA::SystemException, ::DCI::UnknownAssembly);
        
        //
        // IDL:DCI/DCIDeployment/destroy_assembly_instance:1.0
        //
        virtual void destroy_assembly_instance(const char* instance_id)
        	throw(CORBA::SystemException, ::DCI::DestroyError);
        
        //
        // IDL:DCI/DCIDeployment/get_assemblies:1.0
        //
        virtual DCI::AssemblyUUIDs* get_assemblies()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/DCIDeployment/lookup_assembly:1.0
        //
        virtual char* lookup_assembly(const char* assemblyUUID)
        	throw(CORBA::SystemException, ::DCI::UnknownAssembly);
        
        //
        // IDL:DCI/DCIInformation/get_node_manager:1.0
        //
        virtual DCI::NodeManager_ptr get_node_manager(const char* node_name)
        	throw(CORBA::SystemException, ::Components::InvalidName);
        
        //
        // IDL:DCI/DCIInformation/get_node_managers:1.0
        //
        virtual DCI::NodeManagers* get_node_managers()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/DCIInformation/get_dci_properties:1.0
        //
        virtual DCI::DCIDescriptors* get_dci_properties()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/DCIInformation/get_node_properties:1.0
        //
        virtual DCI::DCIDescriptors* get_node_properties(const char* node_name)
        	throw(CORBA::SystemException, ::Components::InvalidName);
        
        //
        // IDL:DCI/NodeManagement/register_node:1.0
        //
        virtual void register_node(const char* node_name, DCI::NodeManager_ptr node_manager)
        	throw(CORBA::SystemException, ::Components::InvalidName, ::DCI::AlreadyRegistered);
        
        //
        // IDL:DCI/NodeManagement/deregister_node:1.0
        //
        virtual void deregister_node(const char* node_name)
        	throw(CORBA::SystemException, ::DCI::UnknownNode);
        
        //
        // IDL:DCI/HomeRegistration/register_home:1.0
        //
        virtual Components::Cookie* register_home(Components::CCMHome_ptr home_ref, const char* home_repid, const char* component_repid, const char* name)
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/HomeRegistration/unregister_home:1.0
        //
        virtual void unregister_home(Components::Cookie* ck)
        	throw(CORBA::SystemException, ::Components::CookieRequired);
        
        //
        // IDL:Components/EventConsumerBase/push_event:1.0
        //
        virtual void push_event (Components::EventBase* ev)
            throw (CORBA::SystemException);
        
        
        //
        // IDL:DCI/DCIManager/node_changed:1.0
        //
        void push_NodeChanged(::DCI::NodeChanged* ev)
            throw (CORBA::SystemException);
        
    
// BEGIN USER INSERT SECTION RepDCIManagerSessionImpl
	private:
		MDE::Deployment::DeploymentPackage_ptr 
		RepDCIManagerSessionImpl::get_rep_root();

		MDE::Deployment::Assembly_ptr
		RepDCIManagerSessionImpl::get_assembly(const char* assemblyUUID);

		MDE::Deployment::AssemblyInstance_ptr
		RepDCIManagerSessionImpl::get_assemblyInstance(const char* instance_id);

		char*
		RepDCIManagerSessionImpl::install(MDE::Deployment::Assembly_var ass);
		
		string dci_name_;
		
		string mda_etc_var_;

		CORBA::ORB_var orb_;
	
		map < string, Components::Cookie* >	assinstmap_;

// END USER INSERT SECTION RepDCIManagerSessionImpl

    };
    
    
    //
    // executor locator
    //
    class RepDCIManagerImpl
        : public virtual CORBA::LocalObject
        , public virtual Components::SessionExecutorLocator
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_RepDCIManagerImpl
// END USER INSERT SECTION INHERITANCE_RepDCIManagerImpl
    {
    
    private:
    
        ::DCI::CCM_RepDCIManager_ContextImpl_var context_;
        
        RepDCIManagerSessionImpl* component_;
        
    public:
    
        RepDCIManagerImpl();
        virtual ~RepDCIManagerImpl();
        
        
        //
        // IDL:Components/ExecutorLocator/obtain_executor:1.0
        //
        virtual CORBA::Object_ptr obtain_executor(const char* name)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/release_executor:1.0
        //
        virtual void release_executor(CORBA::Object_ptr exc)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/configuration_complete:1.0
        //
        virtual void configuration_complete()
        	throw(CORBA::SystemException, ::Components::InvalidConfiguration);
        
        //
        // IDL:Components/SessionComponent/set_session_context:1.0
        //
        virtual void set_session_context(Components::SessionContext_ptr ctx)
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_activate:1.0
        //
        virtual void ccm_activate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_passivate:1.0
        //
        virtual void ccm_passivate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_remove:1.0
        //
        virtual void ccm_remove()
        	throw(CORBA::SystemException, ::Components::CCMException);
    
// BEGIN USER INSERT SECTION RepDCIManagerImpl
// END USER INSERT SECTION RepDCIManagerImpl

    };
    
    
    //
    // home executor
    //
    class RepDCIManagerHomeImpl
        : public virtual CORBA::LocalObject
        , public virtual ::DCI::CCM_RepDCIManagerHome
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_RepDCIManagerHomeImpl
// END USER INSERT SECTION INHERITANCE_RepDCIManagerHomeImpl
    {
    
    private:
    
        Components::HomeContext_var context_;
        
    public:
        RepDCIManagerHomeImpl();
        virtual ~RepDCIManagerHomeImpl();
        
        //
        // IDL:Components/HomeExecutorBase/set_context:1.0
        //
        virtual void set_context (Components::HomeContext_ptr ctx)
            throw (CORBA::SystemException, Components::CCMException);
        
        //
        // IDL:.../create:1.0
        //
        virtual ::Components::EnterpriseComponent_ptr create()
            throw (CORBA::SystemException, Components::CreateFailure);
    
// BEGIN USER INSERT SECTION RepDCIManagerHomeImpl
// END USER INSERT SECTION RepDCIManagerHomeImpl

    };
    
};

//
// entry point
//
extern "C" {
#ifdef _WIN32
__declspec(dllexport)
#else
#endif
::Components::HomeExecutorBase_ptr create_RepDCIManagerHomeE(void);
}

#endif
