//
// generated by Qedo
//

#include "Computation_ClientCompo.h"


// BEGIN USER INSERT SECTION file
// END USER INSERT SECTION file


namespace Computation {


// BEGIN USER INSERT SECTION ClientExec
void*
ClientExec::client_thread_initiator (void* data)
{
	ClientExec* this_ptr = static_cast<ClientExec*>(data);
	this_ptr->client_thread();

	return data;
}


void
ClientExec::client_thread()
{
	Computation::Computing_Service_var server;
	try
	{
		server = context_->get_connection_computing_server();
	}
	catch (...)
	{
		std::cout << "get_connection_failed" << std::endl;
		return;
	}

	CORBA::ULong calls = 0;
	CORBA::ULong un_calls = 0;
	CORBA::ULong n = 0;

	_time64( &ltime_start );
	__time64_t time_stamp;
	_time64( &time_stamp);
	__time64_t current_time;
	_time64( &current_time);

	while (true)
//	for (n = 0; n < 500 ; n++)
	{
		_time64( &current_time);
		if ((current_time - time_stamp ) > 5)
		{
			_time64( &time_stamp);
			std::cout << "successful calls so far: " << calls << std::endl;
			std::cout << "unsuccessful calls so far: " << un_calls << std::endl;
		}

		if (stopped_) 
		{
			break;
		};
		try {
			server -> compute(2);
			calls++;
		} catch (...)
		{
			un_calls++;
		}
		if (calls > 500)
		{ break;}
	}

	_time64( &ltime_end );

	std::cout << "@@@ calling compute ended after " << ltime_end - ltime_start << " seconds" << std::endl;
	std::cout << "successful calls: " << calls << std::endl;
	std::cout << "unsuccessful calls: " << un_calls << std::endl;
}
// END USER INSERT SECTION ClientExec


ClientExec::ClientExec()
{
// BEGIN USER INSERT SECTION ClientExec::ClientExec
// END USER INSERT SECTION ClientExec::ClientExec
}


ClientExec::~ClientExec()
{
// BEGIN USER INSERT SECTION ClientExec::~ClientExec
// END USER INSERT SECTION ClientExec::~ClientExec

}


void
ClientExec::set_context(::Computation::CCM_Client_ContextImpl_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = ::Computation::CCM_Client_ContextImpl::_duplicate(context);
}


void
ClientExec::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
// BEGIN USER INSERT SECTION ClientExec::configuration_complete
	stopped_ = false;
	thread_ = context_->start_thread (client_thread_initiator, this);
// END USER INSERT SECTION ClientExec::configuration_complete
}


void
ClientExec::remove()
    throw (CORBA::SystemException)
{
// BEGIN USER INSERT SECTION ClientExec::remove
// END USER INSERT SECTION ClientExec::remove
}


// BEGIN USER INSERT SECTION ClientCompo
// END USER INSERT SECTION ClientCompo


ClientCompo::ClientCompo()
:component_(new ClientExec())
{
// BEGIN USER INSERT SECTION ClientCompo::ClientCompo
// END USER INSERT SECTION ClientCompo::ClientCompo
}


ClientCompo::~ClientCompo()
{
// BEGIN USER INSERT SECTION ClientCompo::~ClientCompo
// END USER INSERT SECTION ClientCompo::~ClientCompo

    component_->_remove_ref();
}


::CORBA::Object*
ClientCompo::obtain_executor(const char* name)
    throw (CORBA::SystemException)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
ClientCompo::release_executor(::CORBA::Object_ptr executor)
    throw (CORBA::SystemException)
{
    CORBA::release (executor);
}


void
ClientCompo::configuration_complete()
    throw (CORBA::SystemException, Components::InvalidConfiguration)
{
    component_->configuration_complete();

// BEGIN USER INSERT SECTION ClientCompo::configuration_complete
// END USER INSERT SECTION ClientCompo::configuration_complete
}


void
ClientCompo::set_session_context(::Components::SessionContext_ptr context)
    throw (CORBA::SystemException, Components::CCMException)
{
    #ifdef TAO_ORB
    ::Computation::CCM_Client_Context_ptr tmp_context;
    
    tmp_context = dynamic_cast<::Computation::CCM_Client_ContextImpl*>(context);
    
    if (tmp_context)
        context_ = ::Computation::CCM_Client_ContextImpl::_duplicate(tmp_context);
    else
        context_ = ::Computation::CCM_Client_ContextImpl::_nil();
        
    #else
    context_ = ::Computation::CCM_Client_ContextImpl::_narrow(context);
    
    #endif
    component_->set_context(context_);
}


void
ClientCompo::ccm_activate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION ClientCompo::ccm_activate
// END USER INSERT SECTION ClientCompo::ccm_activate
}


void
ClientCompo::ccm_passivate()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION ClientCompo::ccm_passivate
// END USER INSERT SECTION ClientCompo::ccm_passivate
}


void
ClientCompo::ccm_remove()
    throw (CORBA::SystemException, Components::CCMException)
{
// BEGIN USER INSERT SECTION ClientCompo::ccm_remove
// END USER INSERT SECTION ClientCompo::ccm_remove
}


// BEGIN USER INSERT SECTION ClientHomeExec
// END USER INSERT SECTION ClientHomeExec


ClientHomeExec::ClientHomeExec()
{
// BEGIN USER INSERT SECTION ClientHomeExec::ClientHomeExec
// END USER INSERT SECTION ClientHomeExec::ClientHomeExec
}


ClientHomeExec::~ClientHomeExec()
{
// BEGIN USER INSERT SECTION ClientHomeExec::~ClientHomeExec
// END USER INSERT SECTION ClientHomeExec::~ClientHomeExec

}


void
ClientHomeExec::set_context(Components::HomeContext_ptr ctx)
    throw (CORBA::SystemException, Components::CCMException)
{
    context_ = Components::HomeContext::_duplicate(ctx);
    
}


::Components::EnterpriseComponent_ptr
ClientHomeExec::create ()
    throw (CORBA::SystemException, Components::CreateFailure)
{
// BEGIN USER INSERT SECTION ClientHomeExec::create
// END USER INSERT SECTION ClientHomeExec::create
    return new ClientCompo();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_ClientHomeE(void)
{
// BEGIN USER INSERT SECTION create_ClientHome
// END USER INSERT SECTION create_ClientHome

    return new ::Computation::ClientHomeExec();
}

