// $ANTLR : "idl.g" -> "IDLParser.java"$

  package ccmio.parser;
  import java.io.*;
  import java.util.Vector;
  import java.util.Hashtable;

public interface IDLTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SPECIFICATION = 4;
	int BASE_TYPE_SPEC = 5;
	int CASE_STMT = 6;
	int CASE_STMT_LIST = 7;
	int CONST_DEF = 8;
	int DEFINITION = 9;
	int DEFINITION_LIST = 10;
	int DOUBLE_TYPE = 11;
	int ENUM = 12;
	int ENUMERATOR_LIST = 13;
	int EXCEPTION_TYPE = 14;
	int EXPORT_LIST = 15;
	int FLOAT_TYPE = 16;
	int INTERFACE = 17;
	int INTERFACE_INHERITANCE = 18;
	int LONG_DOUBLE_TYPE = 19;
	int MODULE = 20;
	int OPERATION_DEF = 21;
	int PARAMETER_DEF = 22;
	int PARAMETER_LIST = 23;
	int RAISES = 24;
	int SCOPED_NAME = 25;
	int SEQUENCE = 26;
	int SIGNED_SHORT_INT = 27;
	int SIGNED_LONG_INT = 28;
	int SIGNED_LONGLONG_INT = 29;
	int STRING_TYPE = 30;
	int STRUCT_MEMBER = 31;
	int STRUCT_TYPE = 32;
	int TYPEDEF = 33;
	int UNION_TYPE = 34;
	int UNSIGNED_SHORT_INT = 35;
	int UNSIGNED_LONG_INT = 36;
	int UNSIGNED_LONGLONG_INT = 37;
	int WSTRING_TYPE = 38;
	int SEMI = 39;
	int LITERAL_abstract = 40;
	int LITERAL_local = 41;
	int LITERAL_interface = 42;
	int LITERAL_custom = 43;
	int LITERAL_valuetype = 44;
	int LITERAL_eventtype = 45;
	int LITERAL_module = 46;
	int LCURLY = 47;
	int RCURLY = 48;
	int COLON = 49;
	int COMMA = 50;
	int SCOPEOP = 51;
	int IDENT = 52;
	int LITERAL_truncatable = 53;
	int LITERAL_supports = 54;
	int LITERAL_public = 55;
	int LITERAL_private = 56;
	int LITERAL_factory = 57;
	int LPAREN = 58;
	int RPAREN = 59;
	int LITERAL_in = 60;
	int LITERAL_const = 61;
	int ASSIGN = 62;
	int OR = 63;
	int XOR = 64;
	int AND = 65;
	int LSHIFT = 66;
	int RSHIFT = 67;
	int PLUS = 68;
	int MINUS = 69;
	int STAR = 70;
	int DIV = 71;
	int MOD = 72;
	int TILDE = 73;
	int LITERAL_TRUE = 74;
	int LITERAL_FALSE = 75;
	int LITERAL_typedef = 76;
	int LITERAL_native = 77;
	int LITERAL_float = 78;
	int LITERAL_double = 79;
	int LITERAL_long = 80;
	int LITERAL_short = 81;
	int LITERAL_unsigned = 82;
	int LITERAL_char = 83;
	int LITERAL_wchar = 84;
	int LITERAL_boolean = 85;
	int LITERAL_octet = 86;
	int LITERAL_any = 87;
	int LITERAL_Object = 88;
	int LITERAL_struct = 89;
	int LITERAL_union = 90;
	int LITERAL_switch = 91;
	int LITERAL_case = 92;
	int LITERAL_default = 93;
	int LITERAL_enum = 94;
	int LITERAL_sequence = 95;
	int LT = 96;
	int GT = 97;
	int LITERAL_string = 98;
	int LITERAL_wstring = 99;
	int LBRACK = 100;
	int RBRACK = 101;
	int LITERAL_exception = 102;
	int LITERAL_oneway = 103;
	int LITERAL_void = 104;
	int LITERAL_out = 105;
	int LITERAL_inout = 106;
	int LITERAL_raises = 107;
	int LITERAL_context = 108;
	int LITERAL_fixed = 109;
	int LITERAL_ValueBase = 110;
	int LITERAL_import = 111;
	int LITERAL_typeid = 112;
	int LITERAL_typeprefix = 113;
	int LITERAL_readonly = 114;
	int LITERAL_attribute = 115;
	int LITERAL_getraises = 116;
	int LITERAL_setraises = 117;
	int LITERAL_component = 118;
	int LITERAL_provides = 119;
	int LITERAL_uses = 120;
	int LITERAL_multiple = 121;
	int LITERAL_emits = 122;
	int LITERAL_publishes = 123;
	int LITERAL_consumes = 124;
	int LITERAL_home = 125;
	int LITERAL_manages = 126;
	int LITERAL_primarykey = 127;
	int LITERAL_finder = 128;
	int INT = 129;
	int OCTAL = 130;
	int HEX = 131;
	int STRING_LITERAL = 132;
	int WIDE_STRING_LITERAL = 133;
	int CHAR_LITERAL = 134;
	int WIDE_CHAR_LITERAL = 135;
	int FIXED = 136;
	int FLOAT = 137;
	int QUESTION = 138;
	int DOT = 139;
	int NOT = 140;
	int WS = 141;
	int PREPROC_DIRECTIVE = 142;
	int SL_COMMENT = 143;
	int ML_COMMENT = 144;
	int ESC = 145;
	int VOCAB = 146;
	int DIGIT = 147;
	int NONZERODIGIT = 148;
	int OCTDIGIT = 149;
	int HEXDIGIT = 150;
	int ESCAPED_IDENT = 151;
}
