//
// generated by Qedo
//

#ifndef _DCI_RepAssemblyManagerImpl_H_
#define _DCI_RepAssemblyManagerImpl_H_


// BEGIN USER INSERT SECTION file_pre
#define COMPONENT_INSTALLATION_CONTEXT "Qedo/ComponentInstallation/"
#define SERVER_ACTIVATOR_CONTEXT "Qedo/Activators/"

#define DCI_REPOSITORY_ENTRY "DCI/DCIRepository"
// END USER INSERT SECTION file_pre


#include <CORBA.h>
#include "DCI_RepAssemblyManagerImpl_BUSINESS.h"
#include "valuetypes.h"
#include "RefCountBase.h"
#include <string>


// BEGIN USER INSERT SECTION file_post
#include "MDE.h"
#include "NameServiceBase.h"
#include "Output.h"
#include "ConvertProperty.h"
#include "RepUtils.h"
#include "StandardConfigurator.h"
#include <Valuetypes.h>							// should be find:  $(QEDO)\include\Valuetypes.h
// END USER INSERT SECTION file_post


namespace DCI
{
    
    //
    // executor
    //
    class RepAssemblyManagerSessionImpl
        : public virtual CORBA::LocalObject
        , public virtual ::DCI::CCM_RepAssemblyManagerSessionImpl
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_RepAssemblyManagerSessionImpl
		, public virtual Qedo::NameServiceBase
// END USER INSERT SECTION INHERITANCE_RepAssemblyManagerSessionImpl
    {
    
    private:
    
        ::DCI::CCM_RepAssemblyManager_ContextImpl_var context_;
        
    public:
    
        RepAssemblyManagerSessionImpl();
        virtual ~RepAssemblyManagerSessionImpl();
        
        void set_context(::DCI::CCM_RepAssemblyManager_ContextImpl_ptr context)
            throw (CORBA::SystemException, Components::CCMException);
        
        void configuration_complete()
            throw (CORBA::SystemException, Components::InvalidConfiguration);
        
        void remove()
            throw (CORBA::SystemException);
        
        
        //
        // IDL:DCI/AssemblyManager/assembly_loc:1.0
        //
        void assembly_loc(const char* param)
        	throw(CORBA::SystemException);
        char* assembly_loc()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/AssemblyManager/ass_id:1.0
        //
        char* ass_id()
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/Deployment/Assembly/build:1.0
        //
        virtual void build()
        	throw(CORBA::SystemException, ::Components::CreateFailure);
        
        //
        // IDL:Components/Deployment/Assembly/tear_down:1.0
        //
        virtual void tear_down()
        	throw(CORBA::SystemException, ::Components::RemoveFailure);
        
        //
        // IDL:Components/Deployment/Assembly/get_state:1.0
        //
        virtual Components::Deployment::AssemblyState get_state()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/AssemblyInformation/is_dynamic_information:1.0
        //
        CORBA::Boolean is_dynamic_information()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/AssemblyInformation/descriptors:1.0
        //
        DCI::DeploymentDescriptors* descriptors()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/AssemblyInformation/get_assembly_descriptor:1.0
        //
        virtual char* get_assembly_descriptor()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/AssemblyInformation/get_homes:1.0
        //
        virtual DCI::InstalledHomes* get_homes()
        	throw(CORBA::SystemException);
        
        //
        // IDL:DCI/AssemblyInformation/get_components:1.0
        //
        virtual DCI::RunningComponents* get_components()
        	throw(CORBA::SystemException);
    
// BEGIN USER INSERT SECTION RepAssemblyManagerSessionImpl
	public:
		enum ReferenceType { COMPONENTID, HOMEID, NAMING, OBJECTREF, TRADER, FINDER };
	private:
		//orb reference for nameservice and string_to_object
       	CORBA::ORB_var orb_;

		Components::ConfigValue*
		convert_prop(const MDE::Deployment::Property_ptr);

		MDE::Deployment::DeploymentPackage_ptr 
		RepAssemblyManagerSessionImpl::get_rep_root();

		//----------------------------------------------------------------------------------

		/** the assembly location (reference to repository) */
		MDE::Deployment::Assembly_var						assembly_;
		/** the assembly instance location (reference to repository) */
		MDE::Deployment::AssemblyInstance_var				assinst_; 
		/** the state of the assembly */
		Components::Deployment::AssemblyState				state_;

		/**
		* create all component instances defined in the assembly descriptor
		*/
		void instantiate()
			throw(Components::CreateFailure);

		/**
		* create new component server
		*/
		Components::Deployment::ComponentServer_ptr createComponentServer (std::string)
			throw(Components::CreateFailure);

		/**
		* create new container
		*/
		Components::Deployment::Container_ptr createContainer
		(Components::Deployment::ComponentServer_ptr, const ::Components::ConfigValues&)
        throw(Components::CreateFailure);

		/**
		* instantiate component of a home
		*/
		void instantiateComponent (MDE::Deployment::HomeInstance_ptr, MDE::Deployment::ComponentInstantiation_ptr)
			throw(Components::CreateFailure);

		/**
		* instantiate home
		*/
		MDE::Deployment::HomeInstance_ptr instantiateHome (Components::Deployment::Container_ptr, MDE::Deployment::HomeInstantiation_ptr)
			throw(Components::CreateFailure);
	

		/**
		* get reference
		*/
 		CORBA::Object_ptr
		RepAssemblyManagerSessionImpl::getRef (ReferenceType , const char *);


		CORBA::Object_ptr
		RepAssemblyManagerSessionImpl::getConnRef (MDE::Deployment::ConnectionEnd_ptr connend);

		/**
		* make interface connection
		*/
		void connectinterface(const MDE::Deployment::Connection_ptr conn)
			throw(Components::CreateFailure);

		/**
		* make event connection
		*/
		void connectevent(const MDE::Deployment::Connection_ptr conn)
			throw(Components::CreateFailure);

		/**
		* make all connections according to the assembly descriptor
		*/
		void connect()
			throw(Components::CreateFailure);

		/**
		* start all created component instances
		*/
		void configurationComplete()
			throw(Components::CreateFailure);

// END USER INSERT SECTION RepAssemblyManagerSessionImpl

    };
    
    
    //
    // executor locator
    //
    class RepAssemblyManagerImpl
        : public virtual CORBA::LocalObject
        , public virtual Components::SessionExecutorLocator
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_RepAssemblyManagerImpl
// END USER INSERT SECTION INHERITANCE_RepAssemblyManagerImpl
    {
    
    private:
    
        ::DCI::CCM_RepAssemblyManager_ContextImpl_var context_;
        
        RepAssemblyManagerSessionImpl* component_;
        
    public:
    
        RepAssemblyManagerImpl();
        virtual ~RepAssemblyManagerImpl();
        
        
        //
        // IDL:Components/ExecutorLocator/obtain_executor:1.0
        //
        virtual CORBA::Object_ptr obtain_executor(const char* name)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/release_executor:1.0
        //
        virtual void release_executor(CORBA::Object_ptr exc)
        	throw(CORBA::SystemException);
        
        //
        // IDL:Components/ExecutorLocator/configuration_complete:1.0
        //
        virtual void configuration_complete()
        	throw(CORBA::SystemException, ::Components::InvalidConfiguration);
        
        //
        // IDL:Components/SessionComponent/set_session_context:1.0
        //
        virtual void set_session_context(Components::SessionContext_ptr ctx)
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_activate:1.0
        //
        virtual void ccm_activate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_passivate:1.0
        //
        virtual void ccm_passivate()
        	throw(CORBA::SystemException, ::Components::CCMException);
        
        //
        // IDL:Components/SessionComponent/ccm_remove:1.0
        //
        virtual void ccm_remove()
        	throw(CORBA::SystemException, ::Components::CCMException);
    
// BEGIN USER INSERT SECTION RepAssemblyManagerImpl
// END USER INSERT SECTION RepAssemblyManagerImpl

    };
    
    
    //
    // home executor
    //
    class RepAssemblyManagerHomeImpl
        : public virtual CORBA::LocalObject
        , public virtual ::DCI::CCM_RepAssemblyManagerHome
#ifndef MICO_ORB
        , public virtual Qedo::RefCountLocalObject
#endif
// BEGIN USER INSERT SECTION INHERITANCE_RepAssemblyManagerHomeImpl
		, public virtual Qedo::NameServiceBase
// END USER INSERT SECTION INHERITANCE_RepAssemblyManagerHomeImpl
    {
    
    private:
    
        Components::HomeContext_var context_;
        
    public:
        RepAssemblyManagerHomeImpl();
        virtual ~RepAssemblyManagerHomeImpl();
        
        //
        // IDL:Components/HomeExecutorBase/set_context:1.0
        //
        virtual void set_context (Components::HomeContext_ptr ctx)
            throw (CORBA::SystemException, Components::CCMException);
        
        //
        // IDL:.../create:1.0
        //
        virtual ::Components::EnterpriseComponent_ptr create()
            throw (CORBA::SystemException, Components::CreateFailure);
        
        //
        // IDL:Components__/Deployment/AssemblyFactory/create_assembly:1.0
        //
        virtual Components::Cookie* create_assembly(const char* assembly_loc)
        	throw(CORBA::SystemException, ::Components::Deployment::InvalidLocation, ::Components::CreateFailure);
        
        //
        // IDL:Components__/Deployment/AssemblyFactory/lookup:1.0
        //
        virtual Components::Deployment::Assembly_ptr lookup(Components::Cookie* c)
        	throw(CORBA::SystemException, ::Components::Deployment::InvalidAssembly);
        
        //
        // IDL:Components__/Deployment/AssemblyFactory/destroy:1.0
        //
        virtual void destroy(Components::Cookie* c)
        	throw(CORBA::SystemException, ::Components::Deployment::InvalidAssembly, ::Components::RemoveFailure);
        
        //
        // IDL:DCI/RepAssemblyFactory/create_assembly_from_dci:1.0
        //
        virtual CORBA::Object_ptr create_assembly_from_dci(CORBA::Object_ptr assemblyRef)
        	throw(CORBA::SystemException, ::DCI::CreationFailure);
        
        //
        // IDL:DCI/RepAssemblyFactory/destroy_from_dci:1.0
        //
        virtual void destroy_from_dci(CORBA::Object_ptr assemblyInstanceRef)
        	throw(CORBA::SystemException, ::DCI::DestroyError);
    
// BEGIN USER INSERT SECTION RepAssemblyManagerHomeImpl
	private:
		//orb reference for nameservice and string_to_object
       	CORBA::ORB_var orb_;

		MDE::Deployment::AssemblyInstance_ptr
		get_assemblyInstance(Components::Cookie* c);

		CORBA::Object_ptr
		get_rep_facet(const char* facetname);
// END USER INSERT SECTION RepAssemblyManagerHomeImpl

    };
    
};

//
// entry point
//
extern "C" {
#ifdef _WIN32
__declspec(dllexport)
#else
#endif
::Components::HomeExecutorBase_ptr create_RepAssemblyManagerHomeE(void);
}

#endif
