/*
	*********************************************************************
	
	Generated by M2C MOF2IDL
	
	Copyright (c) 2001
	IKV++ Technologies AG
	Berlin, Germany
	
	All Rights Reserved
	
	**********************************************************************
*/

#include <Reflective.idl>
#include <CorbaIdlTypes.idl>
#include <PrimitiveTypes.idl>

#pragma prefix ""

#ifndef _MDE_2_idl_
#define _MDE_2_idl_

#include "MDE_0.idl"

#include "MDE_1.idl"

module MDE
{
	module CIF
	{
		struct AssPoliciesLink
		{
			SegmentDef segs_end;
			Policy policies_end;
		};

		typedef sequence < AssPoliciesLink >  AssPoliciesLinkSet;
		

/* 
::MDE::CIF::ass_policies
*/
		interface AssPolicies
			: Reflective::RefAssociation
		{
			MDE::CIF::AssPoliciesLinkSet all_ass_policies_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::CIF::SegmentDef segs,
				in MDE::CIF::Policy policies) raises ( 
					Reflective::MofError);
			MDE::CIF::PolicySet policies ( 
				in MDE::CIF::SegmentDef segs) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::CIF::SegmentDef segs,
				in MDE::CIF::Policy policies) raises ( 
					Reflective::MofError);
			void modify_policies ( 
				in MDE::CIF::SegmentDef segs,
				in MDE::CIF::Policy policies,
				in MDE::CIF::Policy new_policies) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::CIF::SegmentDef segs,
				in MDE::CIF::Policy policies) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		typedef sequence < PolicyClass >  PolicyClassUList;
		
		typedef sequence < PolicyClass >  PolicyClassList;
		
		typedef sequence < PolicyClass >  PolicyClassBag;
		
		typedef sequence < PolicyClass >  PolicyClassSet;
		
		typedef sequence < Policy >  PolicyUList;
		
		typedef sequence < Policy >  PolicyList;
		
		typedef sequence < Policy >  PolicyBag;
		
		struct HomeImplementsLink
		{
			HomeImplDef segs_end;
			MDE::ComponentIDL::HomeDef home_end_end;
		};

		typedef sequence < HomeImplementsLink >  HomeImplementsLinkSet;
		

/* 
::MDE::CIF::home_implements
*/
		interface HomeImplements
			: Reflective::RefAssociation
		{
			MDE::CIF::HomeImplementsLinkSet all_home_implements_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::CIF::HomeImplDef segs,
				in MDE::ComponentIDL::HomeDef home_end) raises ( 
					Reflective::MofError);
			MDE::CIF::HomeImplDefSet segs ( 
				in MDE::ComponentIDL::HomeDef home_end) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::HomeDef home_end ( 
				in MDE::CIF::HomeImplDef segs) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::CIF::HomeImplDef segs,
				in MDE::ComponentIDL::HomeDef home_end) raises ( 
					Reflective::MofError);
			void modify_segs ( 
				in MDE::CIF::HomeImplDef segs,
				in MDE::ComponentIDL::HomeDef home_end,
				in MDE::CIF::HomeImplDef new_segs) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_home_end ( 
				in MDE::CIF::HomeImplDef segs,
				in MDE::ComponentIDL::HomeDef home_end,
				in MDE::ComponentIDL::HomeDef new_home_end) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::CIF::HomeImplDef segs,
				in MDE::ComponentIDL::HomeDef home_end) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		struct ManagesLink
		{
			ComponentImplDef component_impl_end;
			HomeImplDef home_impl_end;
		};

		typedef sequence < ManagesLink >  ManagesLinkSet;
		

/* 
::MDE::CIF::manages
*/
		interface Manages
			: Reflective::RefAssociation
		{
			MDE::CIF::ManagesLinkSet all_manages_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::CIF::ComponentImplDef component_impl,
				in MDE::CIF::HomeImplDef home_impl) raises ( 
					Reflective::MofError);
			MDE::CIF::ComponentImplDef component_impl ( 
				in MDE::CIF::HomeImplDef home_impl) raises ( 
					Reflective::MofError);
			MDE::CIF::HomeImplDefSet home_impl ( 
				in MDE::CIF::ComponentImplDef component_impl) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::CIF::ComponentImplDef component_impl,
				in MDE::CIF::HomeImplDef home_impl) raises ( 
					Reflective::MofError);
			void modify_component_impl ( 
				in MDE::CIF::ComponentImplDef component_impl,
				in MDE::CIF::HomeImplDef home_impl,
				in MDE::CIF::ComponentImplDef new_component_impl) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_home_impl ( 
				in MDE::CIF::ComponentImplDef component_impl,
				in MDE::CIF::HomeImplDef home_impl,
				in MDE::CIF::HomeImplDef new_home_impl) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::CIF::ComponentImplDef component_impl,
				in MDE::CIF::HomeImplDef home_impl) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		typedef sequence < HomeImplDefClass >  HomeImplDefClassUList;
		
		typedef sequence < HomeImplDefClass >  HomeImplDefClassList;
		
		typedef sequence < HomeImplDefClass >  HomeImplDefClassBag;
		
		typedef sequence < HomeImplDefClass >  HomeImplDefClassSet;
		
		typedef sequence < HomeImplDef >  HomeImplDefUList;
		
		typedef sequence < HomeImplDef >  HomeImplDefList;
		
		typedef sequence < HomeImplDef >  HomeImplDefBag;
		
		struct ComponentImplementsLink
		{
			ComponentImplDef segs_end;
			MDE::ComponentIDL::ComponentDef component_end_end;
		};

		typedef sequence < ComponentImplementsLink >  ComponentImplementsLinkSet;
		

/* 
::MDE::CIF::component_implements
*/
		interface ComponentImplements
			: Reflective::RefAssociation
		{
			MDE::CIF::ComponentImplementsLinkSet all_component_implements_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::CIF::ComponentImplDef segs,
				in MDE::ComponentIDL::ComponentDef component_end) raises ( 
					Reflective::MofError);
			MDE::CIF::ComponentImplDefSet segs ( 
				in MDE::ComponentIDL::ComponentDef component_end) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentDef component_end ( 
				in MDE::CIF::ComponentImplDef segs) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::CIF::ComponentImplDef segs,
				in MDE::ComponentIDL::ComponentDef component_end) raises ( 
					Reflective::MofError);
			void modify_segs ( 
				in MDE::CIF::ComponentImplDef segs,
				in MDE::ComponentIDL::ComponentDef component_end,
				in MDE::CIF::ComponentImplDef new_segs) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_component_end ( 
				in MDE::CIF::ComponentImplDef segs,
				in MDE::ComponentIDL::ComponentDef component_end,
				in MDE::ComponentIDL::ComponentDef new_component_end) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::CIF::ComponentImplDef segs,
				in MDE::ComponentIDL::ComponentDef component_end) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		struct ImplementedByLink
		{
			SegmentDef segment_end;
			MDE::ComponentIDL::ComponentFeature features_end;
		};

		typedef sequence < ImplementedByLink >  ImplementedByLinkSet;
		

/* 
::MDE::CIF::implemented_by
*/
		interface ImplementedBy
			: Reflective::RefAssociation
		{
			MDE::CIF::ImplementedByLinkSet all_implemented_by_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::CIF::SegmentDef segment,
				in MDE::ComponentIDL::ComponentFeature features) raises ( 
					Reflective::MofError);
			MDE::CIF::SegmentDef segment ( 
				in MDE::ComponentIDL::ComponentFeature features) raises ( 
					Reflective::MofError);
			MDE::ComponentIDL::ComponentFeatureSet features ( 
				in MDE::CIF::SegmentDef segment) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::CIF::SegmentDef segment,
				in MDE::ComponentIDL::ComponentFeature features) raises ( 
					Reflective::MofError);
			void modify_segment ( 
				in MDE::CIF::SegmentDef segment,
				in MDE::ComponentIDL::ComponentFeature features,
				in MDE::CIF::SegmentDef new_segment) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_features ( 
				in MDE::CIF::SegmentDef segment,
				in MDE::ComponentIDL::ComponentFeature features,
				in MDE::ComponentIDL::ComponentFeature new_features) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::CIF::SegmentDef segment,
				in MDE::ComponentIDL::ComponentFeature features) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		struct SegmentsLink
		{
			SegmentDef segment_end;
			ComponentImplDef component_impl_end_end;
		};

		typedef sequence < SegmentsLink >  SegmentsLinkSet;
		

/* 
::MDE::CIF::segments
*/
		interface Segments
			: Reflective::RefAssociation
		{
			MDE::CIF::SegmentsLinkSet all_segments_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::CIF::SegmentDef segment,
				in MDE::CIF::ComponentImplDef component_impl_end) raises ( 
					Reflective::MofError);
			MDE::CIF::SegmentDefSet segment ( 
				in MDE::CIF::ComponentImplDef component_impl_end) raises ( 
					Reflective::MofError);
			MDE::CIF::ComponentImplDef component_impl_end ( 
				in MDE::CIF::SegmentDef segment) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::CIF::SegmentDef segment,
				in MDE::CIF::ComponentImplDef component_impl_end) raises ( 
					Reflective::MofError);
			void modify_segment ( 
				in MDE::CIF::SegmentDef segment,
				in MDE::CIF::ComponentImplDef component_impl_end,
				in MDE::CIF::SegmentDef new_segment) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_component_impl_end ( 
				in MDE::CIF::SegmentDef segment,
				in MDE::CIF::ComponentImplDef component_impl_end,
				in MDE::CIF::ComponentImplDef new_component_impl_end) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::CIF::SegmentDef segment,
				in MDE::CIF::ComponentImplDef component_impl_end) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		typedef sequence < ComponentCategory >  ComponentCategoryUList;
		
		typedef sequence < ComponentCategory >  ComponentCategoryList;
		
		typedef sequence < ComponentCategory >  ComponentCategoryBag;
		
		typedef sequence < ComponentCategory >  ComponentCategorySet;
		
		typedef sequence < ComponentImplDefClass >  ComponentImplDefClassUList;
		
		typedef sequence < ComponentImplDefClass >  ComponentImplDefClassList;
		
		typedef sequence < ComponentImplDefClass >  ComponentImplDefClassBag;
		
		typedef sequence < ComponentImplDefClass >  ComponentImplDefClassSet;
		
		typedef sequence < ComponentImplDef >  ComponentImplDefUList;
		
		typedef sequence < ComponentImplDef >  ComponentImplDefList;
		
		typedef sequence < ComponentImplDef >  ComponentImplDefBag;
		
		struct SegmentArtifactLink
		{
			ArtifactDef artifact_end;
			SegmentDef segment_end;
		};

		typedef sequence < SegmentArtifactLink >  SegmentArtifactLinkSet;
		

/* 
::MDE::CIF::segment_artifact
*/
		interface SegmentArtifact
			: Reflective::RefAssociation
		{
			MDE::CIF::SegmentArtifactLinkSet all_segment_artifact_links ( ) raises ( 
					Reflective::MofError);
			boolean exists ( 
				in MDE::CIF::ArtifactDef artifact,
				in MDE::CIF::SegmentDef segment) raises ( 
					Reflective::MofError);
			MDE::CIF::ArtifactDef artifact ( 
				in MDE::CIF::SegmentDef segment) raises ( 
					Reflective::MofError);
			MDE::CIF::SegmentDef segment ( 
				in MDE::CIF::ArtifactDef artifact) raises ( 
					Reflective::MofError);
			void add ( 
				in MDE::CIF::ArtifactDef artifact,
				in MDE::CIF::SegmentDef segment) raises ( 
					Reflective::MofError);
			void modify_artifact ( 
				in MDE::CIF::ArtifactDef artifact,
				in MDE::CIF::SegmentDef segment,
				in MDE::CIF::ArtifactDef new_artifact) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void modify_segment ( 
				in MDE::CIF::ArtifactDef artifact,
				in MDE::CIF::SegmentDef segment,
				in MDE::CIF::SegmentDef new_segment) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
			void remove ( 
				in MDE::CIF::ArtifactDef artifact,
				in MDE::CIF::SegmentDef segment) raises ( 
					Reflective::MofError,
					Reflective::NotFound);
		};

		typedef sequence < SegmentDefClass >  SegmentDefClassUList;
		
		typedef sequence < SegmentDefClass >  SegmentDefClassList;
		
		typedef sequence < SegmentDefClass >  SegmentDefClassBag;
		
		typedef sequence < SegmentDefClass >  SegmentDefClassSet;
		
		typedef sequence < SegmentDef >  SegmentDefUList;
		
		typedef sequence < SegmentDef >  SegmentDefList;
		
		typedef sequence < SegmentDef >  SegmentDefBag;
		
		typedef sequence < ArtifactDefClass >  ArtifactDefClassUList;
		
		typedef sequence < ArtifactDefClass >  ArtifactDefClassList;
		
		typedef sequence < ArtifactDefClass >  ArtifactDefClassBag;
		
		typedef sequence < ArtifactDefClass >  ArtifactDefClassSet;
		
		typedef sequence < ArtifactDef >  ArtifactDefUList;
		
		typedef sequence < ArtifactDef >  ArtifactDefList;
		
		typedef sequence < ArtifactDef >  ArtifactDefBag;
		
		interface CIFPackage
			: Reflective::RefPackage
		{
			readonly attribute MDE::CIF::ArtifactDefClass artifact_def_ref;
			readonly attribute MDE::CIF::SegmentDefClass segment_def_ref;
			readonly attribute MDE::CIF::SegmentArtifact segment_artifact_ref;
			readonly attribute MDE::CIF::ComponentImplDefClass component_impl_def_ref;
			readonly attribute MDE::CIF::Segments segments_ref;
			readonly attribute MDE::CIF::ImplementedBy implemented_by_ref;
			readonly attribute MDE::CIF::ComponentImplements component_implements_ref;
			readonly attribute MDE::CIF::HomeImplDefClass home_impl_def_ref;
			readonly attribute MDE::CIF::Manages manages_ref;
			readonly attribute MDE::CIF::HomeImplements home_implements_ref;
			readonly attribute MDE::CIF::PolicyClass policy_ref;
			readonly attribute MDE::CIF::AssPolicies ass_policies_ref;
		};

	}; // end module CIF
}; // end module MDE
#endif