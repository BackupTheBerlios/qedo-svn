/***************************************************************************/
/* Qedo - Quality of Service Enabled Distributed Objects                   */
/*                                                                         */
/* http://qedo.berlios.de/                                                 */
/*                                                                         */
/* Copyright (C) 2002 by the Qedo Team                                     */
/*                                                                         */
/* This library is free software; you can redistribute it and/or           */
/* modify it under the terms of the GNU Lesser General Public              */
/* License as published by the Free Software Foundation; either            */
/* version 2.1 of the License, or (at your option) any later version.      */
/*                                                                         */
/* This library is distributed in the hope that it will be useful,         */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of          */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU        */
/* Lesser General Public License for more details.                         */
/*                                                                         */
/* You should have received a copy of the GNU Lesser General Public        */
/* License along with this library; if not, write to the Free Software     */
/* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */
/***************************************************************************/

#ifndef __CORBA_DEPENDS_IDL__
#define __CORBA_DEPENDS_IDL__


#ifdef MICO_CIDL_GEN
module CORBA {
	typedef sequence<octet> Principal;
};
#endif

#include <orb.idl>

#ifdef TAO_ORB
#include "PortableServer.pidl"
#ifndef TAO_CIDL_GEN
#include "IFR_Basic.pidl"
#else
#pragma prefix "omg.org"
module CORBA {
	interface IRObject {};
};
#endif
#endif

#ifdef ORBACUS_ORB
#include "PortableServer.idl"
#ifndef _QEDO_NO_QOS
#include "PIClient.idl"
#include "PIServer.idl"
#endif
#include "qedo_orbacus.idl"
#endif

#ifdef MICO_ORB
// #include "ir_base.idl"
#include "poa.idl"
#include "pi.idl"
#include "qedo_mico.idl"
#endif

#ifdef OMNIORB_ORB
#include "ir.idl"
#include "poa.idl"
#endif

#ifdef OPENORB_ORB
#include "PortableServer.idl"
#endif

#ifdef IIOPNET_ORB
#pragma prefix "omg.org"
module CORBA {
    interface IRObject {};
    typedef sequence<octet> OctetSeq;
    typedef string RepositoryId;
};
pragma prefix ""
module PortableServer {
    typedef sequence<octet> ObjectId;
};
#endif

#pragma prefix "omg.org"

#ifndef _QEDO_NO_DB
#include "PSSNativeClasses.idl"

module CosPersistentState {

    local interface CatalogBase;
    local interface Connector;
    //local interface EndOfAssociationCallback;
    local interface Sessio;
    local interface SessionPool;
    local interface StorageHomeBase;
    //local interface TransactionalSession;

    native StorageObjectBase;
    native StorageObjectFactory;
    native StorageHomeFactory;
    native SessionFactory;
    native SessionPoolFactory;
	//local interface StorageObjectBase;
    //local interface StorageObjectFactory;
    //local interface StorageHomeFactory;
    //local interface SessionFactory;
    //local interface SessionPoolFactory;

    exception NotFound {};

    typedef string PTypeId;
    typedef CORBA::OctetSeq Pid;
    typedef CORBA::OctetSeq ShortPid;    

    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    // StorageObject
    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#ifdef _PSDL_
    abstract storagetype StorageObject 
    {
        void destroy_object();
        
        boolean object_exists();

        Pid get_pid();

        ShortPid get_short_pid();

        StorageHomeBase get_storage_home();
    };    
#endif

    enum YieldRef { YIELD_REF };
    enum ForUpdate { FOR_UPDATE };

    typedef short IsolationLevel;

    const IsolationLevel READ_UNCOMMITTED = 0;
    const IsolationLevel READ_COMMITTED = 1;
    const IsolationLevel REPEATABLE_READ = 2; // reserved for future use
    const IsolationLevel SERIALIZABLE = 3;

    typedef short TransactionPolicy;
    
    const TransactionPolicy NON_TRANSACTIONAL = 0;
    const TransactionPolicy TRANSACTIONAL = 1;
    
    typedef short AccessMode;
    
    const AccessMode READ_ONLY = 0;
    const AccessMode READ_WRITE = 1;

    struct Parameter 
    {
        string name;
        any val;
    };

    typedef sequence<Parameter> ParameterList;
    //typedef sequence<TransactionalSession> TransactionalSessionList;

    //-------------------------------------------------------------
    // Connector
    //-------------------------------------------------------------

    local interface Connector 
    {
        readonly attribute string implementation_id;
        
        Pid get_pid(in StorageObjectBase obj);

        ShortPid get_short_pid(in StorageObjectBase obj);

        Sessio create_basic_session(
                            in AccessMode access_mode,
                            in PTypeId catalog_type_name,
                            in ParameterList additional_parameters);

//        TransactionalSession create_transactional_session(
//                            in AccessMode access_mode,
//                            in IsolationLevel default_isolation_level,
//                            in EndOfAssociationCallback callback,
//                            in PTypeId catalog_type_name,
//                            in ParameterList additional_parameters);

        SessionPool create_session_pool(
                            in AccessMode access_mode,
                            in TransactionPolicy tx_policy,
                            in PTypeId catalog_type_name,
                            in ParameterList additional_parameters);

//        TransactionalSession current_session();
//
//        TransactionalSessionList sessions(
//                            in CosTransactions::Coordinator transaction);

        StorageObjectFactory register_storage_object_factory(
                            in PTypeId storage_type_name,
                            in StorageObjectFactory _factory);

        StorageHomeFactory register_storage_home_factory(
                            in PTypeId storage_home_type_name,
                            in StorageHomeFactory _factory);

        SessionFactory register_session_factory(
                            in PTypeId catalog_type_name,
                            in SessionFactory _factory);

        SessionPoolFactory register_session_pool_factory(
                            in PTypeId catalog_type_name,
                            in SessionPoolFactory _factory);
    };
        
    //-------------------------------------------------------------
    // CatalogBase
    //-------------------------------------------------------------

    local interface CatalogBase 
    {
        readonly attribute AccessMode access_mode;

        StorageHomeBase find_storage_home(in string storage_home_id)
            raises(NotFound);

        StorageObjectBase find_by_pid(in Pid the_pid) 
            raises(NotFound);

        void flush();
        
        void refresh();

        void free_all();

        void close();
    };
    
    //-------------------------------------------------------------
    // StorageHomeBase
    //-------------------------------------------------------------

    local interface StorageHomeBase 
    {
        StorageObjectBase find_by_short_pid(in ShortPid short_pid)
            raises(NotFound);

        CatalogBase get_catalog();
    };
    
    //-------------------------------------------------------------
    // Session
    //-------------------------------------------------------------

    local interface Sessio : CatalogBase {};

    //-------------------------------------------------------------
    // TransactionalSession
    //-------------------------------------------------------------

//    local interface TransactionalSession : Sessio 
//    {
//        readonly attribute IsolationLevel default_isolation_level;
//
//        typedef short AssociationStatus;
//
//        const AssociationStatus NO_ASSOCIATION = 0;
//        const AssociationStatus ACTIVE = 1;
//        const AssociationStatus SUSPENDED = 2;
//        const AssociationStatus ENDING = 3;
//
//        void start(in CosTransactions::Coordinator transaction);
//
//        void suspend(in CosTransactions::Coordinator transaction);
//
//        void end(in CosTransactions::Coordinator transaction,
//                 in boolean success);
//
//        AssociationStatus get_association_status();
//
//        // in SPEC is transaction()
//        CosTransactions::Coordinator get_transaction();
//        
//        // This operation appears in PSS_SPEC Page2-7, but not in Appendix A
//        IsolationLevel get_isolation_level_of_associated_resource();
//    };
//    
//    local interface EndOfAssociationCallback 
//    {
//        void released(in TransactionalSession tsession);
//    };

    //-------------------------------------------------------------
    // SessionPool
    //-------------------------------------------------------------

    typedef sequence<Pid> PidList;

    local interface SessionPool : CatalogBase 
    {
        readonly attribute TransactionPolicy transaction_policy;

		void flush_by_pids(in PidList pids);

        void refresh_by_pids(in PidList pids);
    };

};
#endif /* _QEDO_NO_DB */


#pragma prefix ""

#ifndef _QEDO_NO_STREAMS
// The BufferPtr native type
module StreamComponents {
native BufferPtr;
};
#endif


#endif
