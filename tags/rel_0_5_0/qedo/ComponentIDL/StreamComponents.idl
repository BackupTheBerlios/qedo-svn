/***************************************************************************/
/* Qedo - Quality of Service Enabled Distributed Objects                   */
/*                                                                         */
/* http://qedo.berlios.de/                                                 */
/*                                                                         */
/* Copyright (C) 2002 by the Qedo Team                                     */
/*                                                                         */
/* This library is free software; you can redistribute it and/or           */
/* modify it under the terms of the GNU Lesser General Public              */
/* License as published by the Free Software Foundation; either            */
/* version 2.1 of the License, or (at your option) any later version.      */
/*                                                                         */
/* This library is distributed in the hope that it will be useful,         */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of          */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU        */
/* Lesser General Public License for more details.                         */
/*                                                                         */
/* You should have received a copy of the GNU Lesser General Public        */
/* License along with this library; if not, write to the Free Software     */
/* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */
/***************************************************************************/

#ifndef __STREAM_COMPONENTS_IDL__
#define __STREAM_COMPONENTS_IDL__

#ifndef _QEDO_NO_STREAMS


#pragma prefix "omg.org"

#include "Components.idl"


module StreamComponents {

//
// Forward declaration
//
interface SinkStreamPort;

//
// Exceptions
//
exception UnsupportedStreamtype {
	CORBA::RepositoryIdSeq unsupported_streamtypes;
};

exception NoStream {};					// Raised when end_stream is called without a previous begin_stream
exception DuplicateStream {};			// Raised when begin_stream is called twice without first calling end_stream
exception TransportFailure {};
exception InvalidBinding {};
exception NoBinding {};
exception ExceededBindingLimit {};
exception AlreadyBound {};
exception IllegalStream {};				// Raised when the wrong send_stream_data_* operation is used with respect to the
										// repository identifier supplied in the preceeding begin_stream operation

//
// Structures
//
struct TransportSpec {
	string protocol;
	Components::ConfigValues transport_parameters;
};


// TCP Profile Header
// A stream ends when the stream_number increases by one
// Since TCP delivers reliable and in correct order, we can omit a sequence number
struct TCPProfileHeader {
	unsigned short stream_number;
	unsigned long seq_length;
};

//
// Valuetypes
//
valuetype BindingDescription {
	public Components::Cookie ck;
	public SinkStreamPort the_sink;
};
typedef sequence <BindingDescription> BindingDescriptions;

valuetype SourceDescription : Components::PortDescription {
	public boolean is_multiplex;
	public CORBA::RepositoryIdSeq stream_types;
	public BindingDescriptions bindings;
};
typedef sequence <SourceDescription> SourceDescriptions;

valuetype SinkDescription : Components::PortDescription {
	public CORBA::RepositoryIdSeq stream_types;
	public SinkStreamPort the_sink;
};
typedef sequence <SinkDescription> SinkDescriptions;

//
// Interfaces
//

//
// For each sink stream port there will be exactly one object implementing the SinkStreamPort interface
// There is no need for typed-specific SinkStreamPort interfaces, since the source component cannot know
// the name of the sink (in the scope of the sink component) to which it transfers data
// Consequently operations like begin_stream_<my_sink>() make no sense
//
interface SinkStreamPort {
	void begin_stream (in CORBA::RepositoryId repository_id,
					   in Components::ConfigValues stream_meta_data)
		raises (UnsupportedStreamtype, DuplicateStream);

	void end_stream()
		raises (NoStream);

	void check_streamtype (in CORBA::RepositoryIdSeq the_streamtypes)
		raises (UnsupportedStreamtype);

	void consider_transport (inout TransportSpec the_transport)
		raises (AlreadyBound, TransportFailure);
};


//
// The Streams interface with general stream management operations
//
interface Streams {
	SinkStreamPort provide_sink_stream_port (in Components::FeatureName name)
		raises (Components::InvalidName);

	Components::Cookie bind (in Components::FeatureName name, in SinkStreamPort the_sink)
		raises (Components::InvalidName, AlreadyBound, InvalidBinding, ExceededBindingLimit);

	SinkStreamPort unbind (in Components::FeatureName name, in Components::Cookie ck)
		raises (Components::CookieRequired, InvalidBinding, NoBinding);

	BindingDescriptions get_bindings (in Components::FeatureName name)
		raises (Components::InvalidName);

	SinkDescriptions get_named_sinks (in Components::NameList names)
		raises(Components::InvalidName);

	SinkDescriptions get_all_sinks();

	SourceDescriptions get_named_sources (in Components::NameList names)
		raises (Components::InvalidName);

	SourceDescriptions get_all_sources();
};


//
// This is the CORBA interface a component with stream ports must implement
//
interface StreamCCMObject : Streams, Components::CCMObject 
{
};


};


#endif

#endif