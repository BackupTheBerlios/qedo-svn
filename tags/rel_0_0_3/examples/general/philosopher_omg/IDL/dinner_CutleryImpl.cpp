//
// generated by Qedo
//

#include "dinner_CutleryImpl.h"


// BEGIN USER INSERT SECTION file
int dinner::Seg::last_fork = 0;
#ifndef WIN32
static GUI *gui;
#endif
// END USER INSERT SECTION file


namespace dinner {


// BEGIN USER INSERT SECTION CutlerySessionImpl
// END USER INSERT SECTION CutlerySessionImpl


CutlerySessionImpl::CutlerySessionImpl()
{
// BEGIN USER INSERT SECTION CutlerySessionImpl::CutlerySessionImpl
// END USER INSERT SECTION CutlerySessionImpl::CutlerySessionImpl
}


CutlerySessionImpl::~CutlerySessionImpl()
{
// BEGIN USER INSERT SECTION CutlerySessionImpl::~CutlerySessionImpl
// END USER INSERT SECTION CutlerySessionImpl::~CutlerySessionImpl
}


void
CutlerySessionImpl::set_context(::DiningPhilosophers::CCM_ForkManager_Context_ptr context)
{
    context_ = ::DiningPhilosophers::CCM_ForkManager_Context::_duplicate(context);
}


void
CutlerySessionImpl::configuration_complete()
{
// BEGIN USER INSERT SECTION CutlerySessionImpl::configuration_complete
// END USER INSERT SECTION CutlerySessionImpl::configuration_complete
}


void
CutlerySessionImpl::stop()
{
// BEGIN USER INSERT SECTION CutlerySessionImpl::stop
// END USER INSERT SECTION CutlerySessionImpl::stop
}


void
CutlerySessionImpl::remove()
{
// BEGIN USER INSERT SECTION CutlerySessionImpl::remove
// END USER INSERT SECTION CutlerySessionImpl::remove
}


// BEGIN USER INSERT SECTION Seg
#ifdef WIN32
void
Seg::run()
{
	AFX_MANAGE_STATE(AfxGetStaticModuleState( ));

	fork_gui = new CCutleryGUI();
	running_ = true;
	MSG msg;
	BOOL bRet;

	while (running_ && ( (bRet = GetMessage( &msg, NULL, 0, 0 )) != 0)) { 
		if (bRet == -1) 
		{
			WITH_PID_ERR( "Error from GetMessage()" );
			break;
		}
		else
		{
			TranslateMessage(&msg); 
			DispatchMessage(&msg); 
		}
	}

	if(fork_gui) delete fork_gui;
}


void
Seg::finish()
{
	DEBUG_WITH_PID_OUT2( "Seg: finish for ", _id );

	JTCThreadHandle t = this;
	running_ = false;
	fork_gui -> InvalidateRect(0);
	do {
		try 
        {
			WITH_PID_OUT2(_id, " joining");
			t->join();
		}
		catch(const JTCInterruptedException&) {
		}
	} while( t->isAlive());

	WITH_PID_OUT2(_id, " finished");
}
#else
void
Seg::start()
{
	 gui_handle = gui->new_form(_id.c_str());

	 if(gui_handle<0) cerr << "Ooops no gui" << endl;
}


void
Seg::finish()
{
	gui->delete_form(gui_handle);
}
#endif
// END USER INSERT SECTION Seg


Seg::Seg()
{
// BEGIN USER INSERT SECTION Seg::Seg
    owner = false;

#ifdef WIN32
	fork_gui = 0;
	running_ = false;
#endif

	char name[256];
	sprintf(name,"Fork %d",last_fork++);
	_id = name;

#ifdef WIN32
	setName(_id.c_str());
#endif

	start();
// END USER INSERT SECTION Seg::Seg
}


Seg::~Seg()
{
// BEGIN USER INSERT SECTION Seg::~Seg
// END USER INSERT SECTION Seg::~Seg
}


void
Seg::set_context(::DiningPhilosophers::CCM_ForkManager_Context_ptr context)
{
    context_ = ::DiningPhilosophers::CCM_ForkManager_Context::_duplicate(context);
}


void
Seg::configuration_complete()
{
// BEGIN USER INSERT SECTION Seg::configuration_complete
// END USER INSERT SECTION Seg::configuration_complete
}


void
Seg::get()
{
// BEGIN USER INSERT SECTION Seg::get
    JTCSynchronized sync1(*this);

	DEBUG_WITH_PID_OUT3(JTCThread::currentThread()->getName(), " asks for fork ", _id);

	if(owner) 
    {
		WITH_PID_OUT2(_id, " already in use");
		throw DiningPhilosophers::InUse();
	}

#ifdef WIN32
	while ( !running_ ) {};
	fork_gui->empty = FALSE;
	fork_gui->InvalidateRect(0);
#else
	gui->empty(gui_handle,false);
#endif

	owner = true;
// END USER INSERT SECTION Seg::get
}


void
Seg::release()
{
// BEGIN USER INSERT SECTION Seg::release
    DEBUG_WITH_PID_OUT3(JTCThread::currentThread()->getName(), " releases fork ", _id);

#ifdef WIN32
	fork_gui->empty = TRUE;
	fork_gui->InvalidateRect(0);
#else
	gui->empty(gui_handle,true);
#endif

    owner = false;
// END USER INSERT SECTION Seg::release
}


// BEGIN USER INSERT SECTION CutleryImpl
// END USER INSERT SECTION CutleryImpl


CutleryImpl::CutleryImpl()
    : component_(new CutlerySessionImpl())
    , Seg_(new Seg())
{
// BEGIN USER INSERT SECTION CutleryImpl::CutleryImpl
// END USER INSERT SECTION CutleryImpl::CutleryImpl
}


CutleryImpl::~CutleryImpl()
{
    component_->_remove_ref();
    Seg_->_remove_ref();

// BEGIN USER INSERT SECTION CutleryImpl::~CutleryImpl
// END USER INSERT SECTION CutleryImpl::~CutleryImpl
}


::CORBA::Object*
CutleryImpl::obtain_executor(const char* name)
{
    if (! strcmp ( name, "component" ) ) {
        return Components::EnterpriseComponent::_duplicate (component_);
    }
    
    else if (! strcmp (name, "the_fork")) {
        return Components::EnterpriseComponent::_duplicate (Seg_);
    }
    
    return Components::EnterpriseComponent::_nil();
}


void
CutleryImpl::release_executor(::CORBA::Object_ptr executor)
{
    CORBA::release (executor);
}


void
CutleryImpl::configuration_complete()
{
    component_->configuration_complete();
    Seg_->configuration_complete();

// BEGIN USER INSERT SECTION CutleryImpl::configuration_complete
// END USER INSERT SECTION CutleryImpl::configuration_complete
}


void
CutleryImpl::set_session_context(::Components::SessionContext_ptr context)
{
    context_ = ::DiningPhilosophers::CCM_ForkManager_Context::_narrow(context);
    
    component_->set_context(context_);
    Seg_->set_context(context_);
}


void
CutleryImpl::ccm_activate()
{
// BEGIN USER INSERT SECTION CutleryImpl::ccm_activate
// END USER INSERT SECTION CutleryImpl::ccm_activate
}


void
CutleryImpl::ccm_passivate()
{
// BEGIN USER INSERT SECTION CutleryImpl::ccm_passivate
// END USER INSERT SECTION CutleryImpl::ccm_passivate
}


void
CutleryImpl::ccm_remove()
{
// BEGIN USER INSERT SECTION CutleryImpl::ccm_remove
// END USER INSERT SECTION CutleryImpl::ccm_remove
}


// BEGIN USER INSERT SECTION CutleryHomeImpl
// END USER INSERT SECTION CutleryHomeImpl


CutleryHomeImpl::CutleryHomeImpl()
{
// BEGIN USER INSERT SECTION CutleryHomeImpl::CutleryHomeImpl
// END USER INSERT SECTION CutleryHomeImpl::CutleryHomeImpl
}


CutleryHomeImpl::~CutleryHomeImpl()
{
// BEGIN USER INSERT SECTION CutleryHomeImpl::~CutleryHomeImpl
// END USER INSERT SECTION CutleryHomeImpl::~CutleryHomeImpl
}


void
CutleryHomeImpl::set_context(Components::CCMContext_ptr ctx)
{
    context_ = ::DiningPhilosophers::CCM_ForkManager_Context::_narrow(ctx);
}


::Components::EnterpriseComponent_ptr
CutleryHomeImpl::create ()
{
// BEGIN USER INSERT SECTION CutleryHomeImpl::create
    return new CutleryImpl ();
// END USER INSERT SECTION CutleryHomeImpl::create
    return new CutleryImpl();
}


};


//
// entry point
//
::Components::HomeExecutorBase_ptr
create_ForkHomeE(void)
{
// BEGIN USER INSERT SECTION create_ForkHome
// END USER INSERT SECTION create_ForkHome

    return new ::dinner::CutleryHomeImpl();
}

