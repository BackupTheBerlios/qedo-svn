/***************************************************************************/
/* Qedo - Qualitiy of Service Enabled Distributed Objects                  */
/*                                                                         */
/* http://qedo.berlios.de/                                                 */
/*                                                                         */
/* Copyright (C) 2002 by the Qedo Team                                     */
/*                                                                         */
/* This library is free software; you can redistribute it and/or           */
/* modify it under the terms of the GNU Lesser General Public              */
/* License as published by the Free Software Foundation; either            */
/* version 2.1 of the License, or (at your option) any later version.      */
/*                                                                         */
/* This library is distributed in the hope that it will be useful,         */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of          */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU        */
/* Lesser General Public License for more details.                         */
/*                                                                         */
/* You should have received a copy of the GNU Lesser General Public        */
/* License along with this library; if not, write to the Free Software     */
/* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */
/***************************************************************************/

#ifndef __COMPONENTS_IDL__
#define __COMPONENTS_IDL__


#ifndef WIN32
#include "gen_CORBADepends.idl"
#else
#include "CORBADepends.idl"
#endif


#pragma prefix "omg.org"


module Components {
	
	typedef string FeatureName;
	typedef sequence<FeatureName> NameList;
	typedef unsigned long FailureReason;


    exception InvalidName { };
	exception InvalidConnection { };
	exception ExceededConnectionLimit { };
	exception AlreadyConnected { };
	exception NoConnection { };
	exception CookieRequired { };
	exception DuplicateKeyValue { };
	exception NoKeyAvailable { };
	exception InvalidKey { };
	exception UnknownKeyValue { };
	exception BadEventType {
		CORBA::RepositoryId expected_event_type;
	};
	exception HomeNotFound { };
	exception WrongComponentType { };
	exception InvalidConfiguration { };
	exception CreateFailure
	{
		FailureReason reason;
	};
	exception FinderFailure
	{
		FailureReason reason;
	};
	exception RemoveFailure
	{
		FailureReason reason;
	};


	abstract valuetype EventBase {};

	abstract valuetype PrimaryKeyBase { };

	interface EventConsumerBase /*: CosNotifyComm::StructuredPushConsumer*/ {
		void push_event (in EventBase evt) raises (BadEventType);
	};

	valuetype Cookie {
		private CORBA::OctetSeq cookieValue;
	};

	valuetype PortDescription {
		public FeatureName name;
		public CORBA::RepositoryId type_id;
	};

	valuetype FacetDescription : PortDescription {
		public Object ref;
	};

	typedef sequence < FacetDescription > FacetDescriptions;

    valuetype ConnectionDescription { // erbt nicht von PortDescription ???
		public Cookie ck;
		public Object objref;
	};

	typedef sequence < ConnectionDescription > ConnectedDescriptions;

	valuetype ReceptacleDescription : PortDescription {
		public boolean is_multiplex;
		public ConnectedDescriptions connections;
	};

	typedef sequence < ReceptacleDescription > ReceptacleDescriptions;

	valuetype ConsumerDescription : PortDescription {
		public EventConsumerBase consumer;
	};

	typedef sequence < ConsumerDescription > ConsumerDescriptions;

	valuetype EmitterDescription : PortDescription {
		public EventConsumerBase consumer;
	};

	typedef sequence < EmitterDescription > EmitterDescriptions;

	valuetype SubscriberDescription : PortDescription {
		public Cookie ck;
		public EventConsumerBase consumer;
	};

	typedef sequence < SubscriberDescription > SubscriberDescriptions;
	
	valuetype ComponentPortDescription {
		public FacetDescriptions facets;
		public ReceptacleDescriptions receptacles;
		public ConsumerDescriptions consumers;
		public EmitterDescriptions emitters;
		public SubscriberDescriptions publishers;
	};

	interface Navigation {
		Object provide_facet (in FeatureName name)
			raises (InvalidName);
		FacetDescriptions get_all_facets();
		FacetDescriptions get_named_facets ( in NameList names )
			raises ( InvalidName );
		boolean same_component (in Object ref);
	};
	
	interface Receptacles {
		Cookie connect (
			in FeatureName name,
			in Object connection )
			raises (
				InvalidName,
				InvalidConnection,
				AlreadyConnected,
				ExceededConnectionLimit);
		void disconnect (
			in FeatureName name,
			in Cookie ck)
			raises (
				InvalidName,
				InvalidConnection,
				CookieRequired,
				NoConnection);
		ConnectedDescriptions get_connections (in FeatureName name)
			raises (InvalidName);
		ReceptacleDescriptions get_all_receptacles();
		ReceptacleDescriptions get_named_receptacles ( in NameList names )
			raises ( InvalidName );
	};

	interface Events {
		EventConsumerBase get_consumer (in FeatureName sink_name)
			raises (InvalidName);
		Cookie subscribe (in FeatureName publisher_name,
			in EventConsumerBase subscriber)
			raises (InvalidName);
		void unsubscribe (in FeatureName publisher_name,
			in Cookie ck)
			raises (InvalidName, InvalidConnection);
		void connect_consumer (in FeatureName emitter_name,
			in EventConsumerBase consumer)
			raises (InvalidName, AlreadyConnected);
		EventConsumerBase disconnect_consumer (
			in FeatureName source_name)
			raises (InvalidName, NoConnection);
		ConsumerDescriptions get_all_consumers();
		ConsumerDescriptions get_named_consumers ( in NameList names )
			raises ( InvalidName );
		EmitterDescriptions get_all_emitters();
		EmitterDescriptions get_named_emitters ( in NameList names )
			raises ( InvalidName );
		SubscriberDescriptions get_all_publishers();
		SubscriberDescriptions get_named_publishers ( in NameList names )
			raises ( InvalidName );
	};

	interface CCMObject;

	typedef sequence<CCMObject> CCMObjects; // extension !!!

	interface CCMHome {
		CORBA::IRObject get_component_def ();
		CORBA::IRObject get_home_def ();
		void remove_component ( in CCMObject comp)
			raises ( RemoveFailure );
		CCMObjects get_instances (); // extension !!!
	};

	interface KeylessCCMHome {
		CCMObject create_component()
			raises (CreateFailure);
	};

	interface HomeFinder {
		CCMHome find_home_by_component_type (
			in CORBA::RepositoryId comp_repid)
			raises (HomeNotFound);
		CCMHome find_home_by_home_type (
			in CORBA::RepositoryId home_repid)
			raises (HomeNotFound);
		CCMHome find_home_by_name (
			in string home_name)
			raises (HomeNotFound);
	};

	interface Configurator {
		void configure (in CCMObject comp)
			raises (WrongComponentType);
	};

	valuetype ConfigValue {
		public FeatureName name;
		public any value;
	};

	typedef sequence<ConfigValue> ConfigValues;

	interface StandardConfigurator : Configurator {
		void set_configuration (in ConfigValues descr);
	};

	interface HomeConfiguration : CCMHome {
		void set_configurator (in Configurator cfg);
		void set_configuration_values (
			in ConfigValues config);
		void complete_component_configuration (in boolean b);
		void disable_home_configuration();
	};

	interface CCMObject : Navigation, Receptacles, Events {
		CORBA::IRObject get_component_def ( );
		CCMHome get_ccm_home( );
		PrimaryKeyBase get_primary_key( )
			raises (NoKeyAvailable);
		void configuration_complete( )
			raises (InvalidConfiguration);
		void remove();
		ComponentPortDescription get_all_ports();
	};

	interface Enumeration {
		boolean has_more_elements();
		CCMObject next_element();
	};

	module Transaction {

                typedef sequence<octet> TranToken;

                exception NoTransaction { };
                exception NotSupported { };
                exception SystemError { };
                exception Rollback { };
                exception HeuristicMixed { };
                exception HeuristicRollback { };
                exception Security { };
                exception InvalidToken { };

                enum Status {
                          ACTIVE,
                          MARKED_ROLLBACK,
                          PREPARED,
                          COMMITTED,
                          ROLLED_BACK,
                          NO_TRANSACTION,
                          PREPARING,
                          COMMITTING,
                          ROLLING_BACK
                };

		local interface UserTransaction {
                          void begin ()
                                  raises (NotSupported, SystemError);
                          void commit ()
                                  raises (Transaction::Rollback, NoTransaction,
                                  HeuristicMixed, HeuristicRollback,
                                  Security, SystemError);
                          void rollback ()
                                  raises (NoTransaction,
                                  Security, SystemError);
                          void set_rollback_only ()
                                  raises (NoTransaction, SystemError);
                          Status get_status()
                                  raises (SystemError);
                          void set_timeout (in long to)
                                  raises (SystemError);
                          TranToken suspend ()
                                  raises (NoTransaction, SystemError);
                          void resume (in TranToken txtoken)
                                  raises (InvalidToken, SystemError);
                };
        };
	
	typedef long/*SecurityLevel2::Credentials*/ Principal;
	enum CCMExceptionReason {
		SYSTEM_ERROR,
		CREATE_ERROR,
		REMOVE_ERROR,
		DUPLICATE_KEY,
		FIND_ERROR,
		OBJECT_NOT_FOUND,
		NO_SUCH_ENTITY};

	exception CCMException { CCMExceptionReason reason; };
	exception IllegalState { };

	local interface CCMContext {
		Principal get_caller_principal();
		CCMHome get_CCM_home();
		boolean get_rollback_only()
			raises (IllegalState);
		Transaction::UserTransaction get_user_transaction()
			raises (IllegalState);
		boolean is_caller_in_role (in string role);
		void set_rollback_only()
			raises (IllegalState);
	};
		
	local interface EnterpriseComponent {
	};

	local interface SessionContext : CCMContext {
		Object get_CCM_object()
			raises (IllegalState);
	};

	local interface SessionComponent : EnterpriseComponent {
		void set_session_context ( in SessionContext ctx)
			raises (CCMException);
		void ccm_activate()
			raises (CCMException);
		void ccm_passivate()
			raises (CCMException);
		void ccm_remove ()
			raises (CCMException);
	};

	local interface SessionSynchronization {
		void after_begin ()
			raises (CCMException);
		void before_completion ()
			raises (CCMException);
		void after_completion (
			in boolean committed)
			raises (CCMException);
	};

	local interface EntityContext : CCMContext {
		Object get_CCM_object ()
			raises (IllegalState);
		PrimaryKeyBase get_primary_key ()
			raises (IllegalState);
	};

	local interface EntityComponent : EnterpriseComponent {
		void set_entity_context (in EntityContext ctx)
			raises (CCMException);
		void unset_entity_context ()
			raises (CCMException);
		void ccm_activate ()
			raises (CCMException);
		void ccm_load ()
			raises (CCMException);
		void ccm_store ()
			raises (CCMException);
		void ccm_passivate ()
			raises (CCMException);
		void ccm_remove ()
			raises (CCMException);
	};
		
	enum BadComponentReferenceReason {
		NON_LOCAL_REFERENCE,
		NON_COMPONENT_REFERENCE,
		WRONG_CONTAINER
	};

	typedef CosPersistentState::CatalogBase CatalogBase;
	typedef CosPersistentState::PTypeId PTypeId;
	typedef CosPersistentState::Pid PersistentId;
	typedef short SegmentId;
	const SegmentId COMPONENT_SEGMENT = 0;
	typedef short FacetId;
	const FacetId COMPONENT_FACET = 0;
	typedef sequence<octet> IdData;
	typedef short StateIdType;
	const StateIdType PERSISTENT_ID = 0;
		
	exception BadComponentReference {
		BadComponentReferenceReason reason;
	};
	exception PolicyMismatch { };
	exception PersistenceNotAvailable { };
	exception UnknownActualHome { };
	exception ProxyHomeNotSupported { };
	exception InvalidStateIdData {};

	local interface HomeRegistration;
		
	local interface CCM2Context : CCMContext {
		HomeRegistration get_home_registration ();
		void req_passivate ()
			raises (PolicyMismatch);
		CatalogBase get_persistence (
			in PTypeId catalog_type_id)
			raises (PersistenceNotAvailable);
	};

	local interface HomeRegistration {
		void register_home (
			in CCMHome ahome,
			in string home_name);
		void unregister_home (in CCMHome ahome);
	};

	local interface ProxyHomeRegistration : HomeRegistration {
		void register_proxy_home (
			in CCMHome rhome,
			in CCMHome ahome)
			raises (UnknownActualHome, ProxyHomeNotSupported);
	};

	local interface Session2Context : SessionContext, CCM2Context {
		Object create_ref (
			in CORBA::RepositoryId repid);
		Object create_ref_from_oid (
			in PortableServer::ObjectId oid,
			in CORBA::RepositoryId repid);
		PortableServer::ObjectId get_oid_from_ref (
			in Object ref)
			raises (IllegalState, BadComponentReference);
	};

	abstract valuetype StateIdValue {
		StateIdType get_sid_type();
		IdData get_sid_data();
	};

	local interface StateIdFactory {
		StateIdValue create (in IdData data)
			raises (InvalidStateIdData);
	};

	valuetype PersistentIdValue : StateIdValue {
		private PersistentId pid;
		PersistentId get_pid();
#ifdef TAO_IDL
		PersistentIdValue init(in PersistentId pid);
#else
		factory init(in PersistentId pid);
#endif
	};
	valuetype SegmentDescr {
		private StateIdValue sid;
		private SegmentId seg;
		StateIdValue get_sid();
		SegmentId get_seg_id();
#ifdef TAO_IDL
		SegmentDescr init(in StateIdValue sid, in SegmentId seg);
#else
		factory init(in StateIdValue sid, in SegmentId seg);
#endif
	};

	typedef sequence<SegmentDescr> SegmentDescrSeq;

	local interface ComponentId {
		FacetId get_target_facet();
		SegmentId get_target_segment();
		StateIdValue get_target_state_id (
			in StateIdFactory sid_factory)
			raises (InvalidStateIdData);
		StateIdValue get_segment_state_id (
			in SegmentId seg,
			in StateIdFactory sid_factory)
			raises (InvalidStateIdData);
		ComponentId create_with_new_target (
			in FacetId new_target_facet,
			in SegmentId new_target_segment);
		SegmentDescrSeq get_segment_descrs (
			in StateIdFactory sid_factory)
			raises (InvalidStateIdData);
	};

	local interface Entity2Context : EntityContext, CCM2Context {
		ComponentId get_component_id ()
			raises (IllegalState);
		ComponentId create_component_id (
			in FacetId target_facet,
			in SegmentId target_segment,
			in SegmentDescrSeq seq_descrs);
		ComponentId create_monolithic_component_id (
			in FacetId target_facet,
			in StateIdValue sid);
		Object create_ref_from_cid (
			in CORBA::RepositoryId repid,
			in ComponentId cid);
		ComponentId get_cid_from_ref (
			in Object ref)
			raises (BadComponentReference);
	};

	typedef sequence<CCMHome> CCMHomes;
	

	//
	// module deployment
	//
	module Deployment
	{

		//
		// typedefs
		//
		typedef FailureReason InvalidConfigurationReason;
		const InvalidConfigurationReason UnknownConfigValueName = 0;
		const InvalidConfigurationReason InvalidConfigValueType = 1;
		const InvalidConfigurationReason ConfigValueRequired = 2;
		const InvalidConfigurationReason ConfigValueNotExpected = 3;

		typedef string UUID;
		typedef string Location;


		//
		// exceptions
		//
		exception InvalidConfiguration
		{
			InvalidConfigurationReason reason;
			FeatureName name;
		};
		exception UnknownImplId { };
		exception InvalidLocation { };
		exception InstallationFailure
		{
			FailureReason reason;
		};
		exception InvalidAssembly { };
		exception ImplEntryPointNotFound { };


		//
		// interfaces
		//
		interface ComponentInstallation
		{
			void install(in UUID implUUID,
						 in Location component_loc)
					raises (InvalidLocation, InstallationFailure);

			void replace(in UUID implUUID,
					     in Location component_loc)
					raises (InvalidLocation, InstallationFailure);

			void remove(in UUID implUUID)
					raises (UnknownImplId, RemoveFailure);

			Location get_implementation(in UUID implUUID)
					raises(UnknownImplId, InstallationFailure);
		};


		interface Assembly;

		
		interface AssemblyFactory
		{
			Cookie create(in Location assembly_loc)
				raises (InvalidLocation, CreateFailure);

			Assembly lookup(in Cookie c)
				raises (InvalidAssembly);

			void destroy(in Cookie c)
				raises (InvalidAssembly, RemoveFailure);
		};

		enum AssemblyState { INACTIVE,  INSERVICE };


		interface Assembly
		{
			void build() raises (CreateFailure);

			void tear_down() raises (RemoveFailure);

			AssemblyState get_state();
		};


		interface ComponentServer;
		typedef sequence<ComponentServer> ComponentServers;


		interface ServerActivator
		{
			ComponentServer create_component_server(
								in ConfigValues config)
								raises(CreateFailure, InvalidConfiguration);

			void remove_component_server(in ComponentServer server)
								raises(RemoveFailure);

			ComponentServers get_component_servers();
		};


		interface Container;
		typedef sequence<Container> Containers;


		interface ComponentServer
		{
			readonly attribute ConfigValues configuration;

			ServerActivator get_server_activator();

			Container create_container(in ConfigValues config)
						raises (CreateFailure, InvalidConfiguration);

			void remove_container(in Container cref) raises (RemoveFailure);

			Containers get_containers();

	 		void remove() raises (RemoveFailure);
		};


		interface Container
		{
			readonly attribute ConfigValues configuration;

			ComponentServer get_component_server();

			CCMHome install_home(in UUID id,
							     in string entrypt,
								 in ConfigValues config)
						raises (UnknownImplId,
						        ImplEntryPointNotFound,
						        InstallationFailure,
						        InvalidConfiguration);

			void remove_home(in CCMHome href) raises (RemoveFailure);

			CCMHomes get_homes();

			void remove() raises (RemoveFailure);
		};
	}; // end of module deployment


	/*
	local interface ExecutorContext : CCMContext
	{
		Object get_CCM_object()
			raises (IllegalState);
		PrimaryKeyBase get_primary_key ()
			raises (IllegalState);
		void req_passivate ()
			raises (PolicyMismatch);
		CatalogBase get_persistence (in _TypeId catalog_type_id)
			raises (PersistenceNotAvailable);
	};*/

	local interface HomeExecutorBase
	{
		void set_context (in CCMContext ctx)
			raises (CCMException);
	};

	local interface ExecutorLocator : EnterpriseComponent
	{
		Object obtain_executor (in string name);
		void release_executor (in Object exc);
		void configuration_complete()
			raises (InvalidConfiguration);
	};

	// These interfaces are not standard, but every container implementation needs to define
	// something like this to implement session or entity components
	local interface SessionExecutorLocator : ExecutorLocator, SessionComponent
	{
	};

	local interface EntityExecutorLocator : ExecutorLocator, EntityComponent
	{
	};
};

#endif
